;; DO NOT EDIT THIS FILE
;;
;; this file is automatically generated from ./tail.urdf on (linux eri-Yoga-Slim Linux-6.8.0-52-generic-x86_64-with-glibc2.29) at 2025-03-03 08:46:17
;; urdfeus version is 0.0.13
;;

;;
;; copy euscollada-robot class definition from euscollada/src/euscollada-robot.l
;;
(defclass euscollada-robot
  ;; This euscollada-robot class is for robots converted from collada files.
  ;; This class provides :init-ending override.
  :super robot-model
  :slots ())

(defmethod euscollada-robot
  (:init-ending
   (&optional (type :urdf))
   (when (eq type :collada)
     ;; fix all links' mass properties ;; root link relative (collada) -> link local (euslisp)
     (dolist (l (append links
                        (mapcan #'(lambda (x) (if (and (derivedp (cdr x) bodyset-link)
                                                       (not (memq (cdr x) links)))
                                                  (list (cdr x)))) (send self :slots))))
       (unless (= (send l :weight) 0.0)
         (setq (l . acentroid) (send l :inverse-transform-vector
                                     (send (send (car links) :worldcoords) :transform-vector
                                           (l . acentroid))))
         (setq (l . inertia-tensor) (m* (transpose (send l :worldrot))
                                        (m* (send (car links) :worldrot)
                                            (l . inertia-tensor)))))))
   (send-super :init-ending)
   (send self :make-collision-model-for-links)
   ;;
   (dolist (j (mapcan #'(lambda (x) (if (and (derivedp (cdr x) joint)
                                             (not (memq (cdr x) (send self :joint-list))))
                                        (list (cdr x)))) (send self :slots)))
     (send (send j :child-link) :add-joint j)
     (send (send j :child-link) :add-parent-link (send j :parent-link))
     (send (send j :parent-link) :add-child-links (send j :child-link))))
  (:change-visual
   (&optional (visual :convex))
   (dolist (lk (send self :links))
     (dolist (bd (send lk :bodies))
       (when (derivedp bd collada-body)
         (send bd :change-visual visual)))))
  ;; fullbody-inverse-kinematics overwrite
  ;;  reduce root-link's weight based on leg's joint limit
  ;;  increase stop and cog-gain
  (:fullbody-inverse-kinematics
   (target-coords &rest args &key (stop 250) (cog-gain 2.0) (additional-weight-list) (use-6dof-joint-leg-gain nil) &allow-other-keys)
   (let* ((leg-ul (send self :calc-union-link-list (send self :legs :links))))
     (send self :reset-joint-angle-limit-weight-old leg-ul)
     (send-message* self robot-model :fullbody-inverse-kinematics
                    target-coords
                    :stop stop :cog-gain cog-gain
                    :additional-weight-list
                    (append
                     additional-weight-list
                     (if use-6dof-joint-leg-gain
                         (list
                          (list (car (send self :links))
                                #'(lambda ()
                                    ;; set root-link 6dof-joint's weight based on legs' joint limit
                                    (let* ((min-weight
                                            (reduce #'(lambda (x y) (min x y))
                                                    (coerce (send self :calc-inverse-kinematics-weight-from-link-list
                                                                  leg-ul :union-link-list leg-ul) cons))))
                                      (fill (instantiate float-vector 6) min-weight)))))))
                    args)))
  ;; make collision model from faces or gl-vertices
  (:make-collision-model-for-links
   (&key (fat 0) (collision-func 'pqp-collision-check) ((:links ls) (send self :links)))
   (dolist (ll ls)
     (let (fs glv usefs)
       (dolist (bd (send ll :bodies))
         (if (derivedp bd collada-body)
             (push (send bd :glvertices) glv)
           (push (send bd :faces) fs)))
       (setq fs (flatten fs))
       (cond
        ((and (not fs) glv) ;; if there is no faces, use glvertices for creating pqpmodel
         (setq usefs (instance gl::glvertices :init nil))
         (send usefs :transform (send ll :worldcoords))
         (send usefs :append-glvertices glv)
         (let ((m (send usefs (read-from-string
                               (format nil ":make-~Amodel"
                                       (string-right-trim "-COLLISION-CHECK" (string collision-func))))
                        :fat fat)))
           (setf (get ll :pqpmodel) m)))
        (fs
         (setq usefs
               (append fs
                       (mapcar #'(lambda (gv) (send gv :convert-to-faces :wrt :world)) glv)))
         (send ll
               (read-from-string
                (format nil ":make-~Amodel"
                        (string-right-trim "-COLLISION-CHECK" (string collision-func))))
               :fat fat
               :faces usefs)))))))

;; copy euscollada-body class definition from euscollada/src/euscollada-robot.l
;; This euscollada-body class is for bodies in robot model converted from collada files.
(defclass collada-body
  :super gl::glbody
  :slots (glvertices) ;; glvertices slot for backward compatibility
  )
(defmethod collada-body
  (:init (&key (name) (replace-obj))
         (if replace-obj
             (replace-object self replace-obj)
           (replace-object self (make-cube 10 10 10)))
         (if name (send self :name name))
         (setq glvertices gl::aglvertices)
         self)
  (:change-visual
   (&optional (visual :convex))
   (case visual
         ((list :convex :hull :convex-hull)
          (unless (send self :get :original-mesh)
            (send self :put :original-mesh gl::aglvertices)) ;; store original mesh
          (let* ((org-mesh (send self :get :original-mesh))
                 (org-cds (send org-mesh :copy-worldcoords))
                 (glv (gl::make-glvertices-from-faces (send self :faces))))
            (send glv :set-offset (send org-cds :inverse-transformation))
            (send glv :transform org-cds)
            (send org-mesh :assoc glv)
            (setq gl::aglvertices glv)
            glv))
         ((list :original :mesh :glvertices :original-mesh)
          (let ((org-mesh (send self :get :original-mesh)))
            (when org-mesh
              (dolist (d (send org-mesh :descendants)) ;; dissoc all discendants
                (send org-mesh :dissoc d))
              (setq gl::aglvertices org-mesh)
              org-mesh))))))

;; copy mimic-joint class definition from euscollada/src/euscollada-robot.l
;; This mimic-joint class is for mimic-joints in URDF file
(defclass mimic-joint-param
  :super propertied-object
  :slots (joint multiplier offset))
(defmethod mimic-joint-param
  (:init (j &key ((:multiplier m) 1) ((:offset o) 0))
         (setq joint j multiplier m offset o)
         self)
  (:joint (&rest args) (forward-message-to joint args))
  (:multiplier (&rest args) (forward-message-to multiplier args))
  (:offset (&rest args) (forward-message-to offset args)))

(defun calc-jacobian-mimic
    (mimic-joints
     fik row column joint paxis child-link world-default-coords child-reverse
     move-target transform-coords rotation-axis translation-axis
     tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
  (let* ((fik-tmp (copy-object fik))
         (dim (* 6 (if (atom rotation-axis) 1 (length rotation-axis)))))
    (dolist (axis (append (if (atom translation-axis)
                              (list translation-axis) translation-axis)
                          (if (atom rotation-axis)
                              (list rotation-axis) rotation-axis)))
      (case axis
            ((:x :y :z :xx :yy :zz) (decf dim 1))
            ((:xy :yx :yz :zy :zx :xz) (decf dim 2))
            (nil (decf dim 3))))
    ;;
    (dolist (mj mimic-joints)
      (let* ((j (send mj :joint))
             (paxis (case (j . axis)
                          (:x #f(1 0 0)) (:y #f(0 1 0)) (:z #f(0 0 1))
                          (:xx #f(1 0 0)) (:yy #f(0 1 0)) (:zz #f(0 0 1))
                          (:-x #f(-1 0 0)) (:-y #f(0 -1 0)) (:-z #f(0 0 -1))
                          (t (j . axis))))
             (child-link (send j :child-link))
             (parent-link (send j :parent-link))
             (default-coords (j . default-coords))
             (world-default-coords (send (send parent-link :copy-worldcoords)
                                         :transform default-coords)))
        (fill (array-entity fik-tmp) 0)
        (send j :calc-jacobian
              fik-tmp row column j paxis child-link world-default-coords child-reverse
              move-target transform-coords rotation-axis translation-axis
              tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
        ;;
        (dotimes (i dim)
          (setf (aref fik (+ i row) column)
                (+ (aref fik (+ i row) column)
                   (* (send mj :multiplier) (aref fik-tmp (+ i row) column)))))))
    fik))

(defclass rotational-mimic-joint
  :super rotational-joint
  :slots (mimic-joints))
(defmethod rotational-mimic-joint
  (:init (&rest args &key ((:mimic-joints mjs)) &allow-other-keys)
         (send-super* :init args)
         (setq mimic-joints mjs)
         (dolist (j mimic-joints)
           (send (send j :joint :child-link) :rotate (send j :offset) ((send j :joint) . axis))
           (setq ((send j :joint) . default-coords) (send j :joint :child-link :copy-coords)))
         self)
  (:joint-angle (&rest args)
                (prog1
                    (send-super* :joint-angle args)
                  (dolist (j mimic-joints)
                    (send j :joint :joint-angle (* joint-angle (send j :multiplier))))))
  (:calc-jacobian (fik row column joint paxis child-link world-default-coords child-reverse
                       move-target transform-coords rotation-axis translation-axis
                       tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
                  (calc-jacobian-rotational fik row column joint paxis child-link world-default-coords child-reverse
                                            move-target transform-coords rotation-axis translation-axis
                                            tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
                  (calc-jacobian-mimic mimic-joints
                                       fik row column joint paxis child-link world-default-coords child-reverse
                                       move-target transform-coords rotation-axis translation-axis
                                       tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)))

(defclass linear-mimic-joint
  :super linear-joint
  :slots (mimic-joints))
(defmethod linear-mimic-joint
  (:init (&rest args &key ((:mimic-joints mjs)) &allow-other-keys)
         (send-super* :init args)
         (setq mimic-joints mjs)
         (dolist (j mimic-joints)
           (send (send j :joint :child-link) :translate (scale (* 1000 (send j :offset)) ((send j :joint) . axis)))
           (setq ((send j :joint) . default-coords) (send j :joint :child-link :copy-coords)))
         self)
  (:joint-angle (&rest args)
                (prog1
                    (send-super* :joint-angle args)
                  (dolist (j mimic-joints)
                    (send j :joint :joint-angle (* joint-angle (send j :multiplier))))))
  (:calc-jacobian (fik row column joint paxis child-link world-default-coords child-reverse
                       move-target transform-coords rotation-axis translation-axis
                       tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
                  (calc-jacobian-linear fik row column joint paxis child-link world-default-coords child-reverse
                                        move-target transform-coords rotation-axis translation-axis
                                        tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)
                  (calc-jacobian-mimic mimic-joints
                                       fik row column joint paxis child-link world-default-coords child-reverse
                                       move-target transform-coords rotation-axis translation-axis
                                       tmp-v0 tmp-v1 tmp-v2 tmp-v3 tmp-v3a tmp-v3b tmp-m33)))

;;
;; end of copy from jsk_model_tools/euscollada/src/euscollada-robot.l
;;



(defun tail () (setq *tail* (instance tail-robot :init)))


(defclass tail-robot
  :super euscollada-robot
  :slots (;; link names
          base_link_lk link1-virtual_lk link1_lk link2-virtual_lk link2_lk link3-virtual_lk link3_lk link4-virtual_lk link4_lk link5-virtual_lk link5_lk link6-virtual_lk link6_lk link7-virtual_lk link7_lk link8-virtual_lk link8_lk link9-virtual_lk link9_lk
          ;; joint names
          joint1-virtual_jt joint1_jt joint2-virtual_jt joint2_jt joint3-virtual_jt joint3_jt joint4-virtual_jt joint4_jt joint5-virtual_jt joint5_jt joint6-virtual_jt joint6_jt joint7-virtual_jt joint7_jt joint8-virtual_jt joint8_jt joint9-virtual_jt joint9_jt
          ;; sensor names
          ;; non-default limb names
          tail tail-end-coords tail-root-link
          ))


(defmethod tail-robot
  (:init
   (&rest args)
   (let ()
     (send-super* :init :name "tail" args)



     ;; link: base_link_lk
     (let ((geom-lst (list (send self :_make_instance_base_link_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq base_link_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "base_link"))
       (progn (send base_link_lk :weight 142.896121980389) (setq (base_link_lk . acentroid) (float-vector -24.6546252283572 -15.0156534448461 8.37382744618125)) (send base_link_lk :inertia-tensor #2f((172848.056043176 -256.147282967753 -9.21158957979319)(-256.147282967753 139660.70724448698 -2608.4060748469096)(-9.21158957979319 -2608.4060748469096 290099.857074405))))
       ;; global coordinates for base_link_lk
       (let ((world-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send base_link_lk :transform world-cds)))

     ;; link: link1-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link1-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link1-virtual"))
       (progn (send link1-virtual_lk :weight 0.0) (setq (link1-virtual_lk . acentroid) (float-vector 0 0 0)) (send link1-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link1-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link1-virtual_lk :transform world-cds)))

     ;; link: link1_lk
     (let ((geom-lst (list (send self :_make_instance_link1_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link1_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link1"))
       (progn (send link1_lk :weight 2.40331837999615) (setq (link1_lk . acentroid) (float-vector 2.08166817117217e-14 1.07552855510562e-13 1.0)) (send link1_lk :inertia-tensor #2f((245.269832602438 5.9311449081908e-13 -7.57306469012188e-18)(5.9311449081908e-13 245.26983260243497 8.83524213847455e-18)(-7.57306469012188e-18 8.83524213847455e-18 488.937452951542))))
       ;; global coordinates for link1_lk
       (let ((world-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link1_lk :transform world-cds)))

     ;; link: link2-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link2-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link2-virtual"))
       (progn (send link2-virtual_lk :weight 0.0) (setq (link2-virtual_lk . acentroid) (float-vector 0 0 0)) (send link2-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link2-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link2-virtual_lk :transform world-cds)))

     ;; link: link2_lk
     (let ((geom-lst (list (send self :_make_instance_link2_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link2_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link2"))
       (progn (send link2_lk :weight 2.40331837999615) (setq (link2_lk . acentroid) (float-vector 2.08166817117217e-14 1.07552855510562e-13 1.00000000000001)) (send link2_lk :inertia-tensor #2f((245.269832602438 5.93316439210817e-13 -7.57306469012188e-18)(5.93316439210817e-13 245.26983260243497 8.83524213847455e-18)(-7.57306469012188e-18 8.83524213847455e-18 488.937452951542))))
       ;; global coordinates for link2_lk
       (let ((world-cds (make-coords :pos (float-vector 60.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link2_lk :transform world-cds)))

     ;; link: link3-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link3-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link3-virtual"))
       (progn (send link3-virtual_lk :weight 0.0) (setq (link3-virtual_lk . acentroid) (float-vector 0 0 0)) (send link3-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link3-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 60.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link3-virtual_lk :transform world-cds)))

     ;; link: link3_lk
     (let ((geom-lst (list (send self :_make_instance_link3_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link3_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link3"))
       (progn (send link3_lk :weight 2.4033183799961297) (setq (link3_lk . acentroid) (float-vector 2.08166817117217e-14 1.0842021724855e-13 0.999999999999987)) (send link3_lk :inertia-tensor #2f((245.26983260243597 5.92811568231475e-13 -1.48305850177636e-17)(5.92811568231475e-13 245.269832602433 -1.27795466627806e-17)(-1.48305850177636e-17 -1.27795466627806e-17 488.937452951538))))
       ;; global coordinates for link3_lk
       (let ((world-cds (make-coords :pos (float-vector 90.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link3_lk :transform world-cds)))

     ;; link: link4-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link4-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link4-virtual"))
       (progn (send link4-virtual_lk :weight 0.0) (setq (link4-virtual_lk . acentroid) (float-vector 0 0 0)) (send link4-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link4-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 90.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link4-virtual_lk :transform world-cds)))

     ;; link: link4_lk
     (let ((geom-lst (list (send self :_make_instance_link4_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link4_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link4"))
       (progn (send link4_lk :weight 2.40331837999615) (setq (link4_lk . acentroid) (float-vector 2.08166817117217e-14 1.07552855510562e-13 1.0)) (send link4_lk :inertia-tensor #2f((245.269832602438 5.9311449081908e-13 -7.57306469012188e-18)(5.9311449081908e-13 245.26983260243497 8.83524213847455e-18)(-7.57306469012188e-18 8.83524213847455e-18 488.937452951542))))
       ;; global coordinates for link4_lk
       (let ((world-cds (make-coords :pos (float-vector 120.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link4_lk :transform world-cds)))

     ;; link: link5-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link5-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link5-virtual"))
       (progn (send link5-virtual_lk :weight 0.0) (setq (link5-virtual_lk . acentroid) (float-vector 0 0 0)) (send link5-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link5-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 120.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link5-virtual_lk :transform world-cds)))

     ;; link: link5_lk
     (let ((geom-lst (list (send self :_make_instance_link5_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link5_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link5"))
       (progn (send link5_lk :weight 1.3461724520632101) (setq (link5_lk . acentroid) (float-vector -1.0 5.98479599211998e-14 -6.93889390390723e-15)) (send link5_lk :inertia-tensor #2f((156.230813614397 3.786532345048e-18 7.57306469012369e-18)(3.786532345048e-18 78.5641309578857 -1.0642680244517799e-13)(7.57306469012369e-18 -1.0642680244517799e-13 78.56413095788639))))
       ;; global coordinates for link5_lk
       (let ((world-cds (make-coords :pos (float-vector 150.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link5_lk :transform world-cds)))

     ;; link: link6-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link6-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link6-virtual"))
       (progn (send link6-virtual_lk :weight 0.0) (setq (link6-virtual_lk . acentroid) (float-vector 0 0 0)) (send link6-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link6-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 150.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link6-virtual_lk :transform world-cds)))

     ;; link: link6_lk
     (let ((geom-lst (list (send self :_make_instance_link6_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link6_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link6"))
       (progn (send link6_lk :weight 1.3461724520632101) (setq (link6_lk . acentroid) (float-vector -0.9999999999999729 5.98479599211998e-14 -6.93889390390723e-15)) (send link6_lk :inertia-tensor #2f((156.230813614397 3.786532345048e-18 7.57306469012369e-18)(3.786532345048e-18 78.5641309578857 -1.0642680244517799e-13)(7.57306469012369e-18 -1.0642680244517799e-13 78.56413095788639))))
       ;; global coordinates for link6_lk
       (let ((world-cds (make-coords :pos (float-vector 180.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link6_lk :transform world-cds)))

     ;; link: link7-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link7-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link7-virtual"))
       (progn (send link7-virtual_lk :weight 0.0) (setq (link7-virtual_lk . acentroid) (float-vector 0 0 0)) (send link7-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link7-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 180.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link7-virtual_lk :transform world-cds)))

     ;; link: link7_lk
     (let ((geom-lst (list (send self :_make_instance_link7_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link7_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link7"))
       (progn (send link7_lk :weight 0.83723444218166) (setq (link7_lk . acentroid) (float-vector -1.0 9.80118763926896e-14 -1.73472347597681e-14)) (send link7_lk :inertia-tensor #2f((62.3317507912513 3.78653234505031e-18 7.57306469012324e-18)(3.78653234505031e-18 31.4449535430192 -1.0637631534724401e-13)(7.57306469012324e-18 -1.0637631534724401e-13 31.444953543019903))))
       ;; global coordinates for link7_lk
       (let ((world-cds (make-coords :pos (float-vector 210.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link7_lk :transform world-cds)))

     ;; link: link8-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link8-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link8-virtual"))
       (progn (send link8-virtual_lk :weight 0.0) (setq (link8-virtual_lk . acentroid) (float-vector 0 0 0)) (send link8-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link8-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 210.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link8-virtual_lk :transform world-cds)))

     ;; link: link8_lk
     (let ((geom-lst (list (send self :_make_instance_link8_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link8_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link8"))
       (progn (send link8_lk :weight 0.83723444218166) (setq (link8_lk . acentroid) (float-vector -1.0 9.80118763926896e-14 -1.73472347597681e-14)) (send link8_lk :inertia-tensor #2f((62.3317507912513 3.78653234505015e-18 7.57306469012327e-18)(3.78653234505015e-18 31.4449535430192 -1.0637631534724401e-13)(7.57306469012327e-18 -1.0637631534724401e-13 31.444953543019903))))
       ;; global coordinates for link8_lk
       (let ((world-cds (make-coords :pos (float-vector 240.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link8_lk :transform world-cds)))

     ;; link: link9-virtual_lk
     (let ((geom-lst (list )))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link9-virtual_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link9-virtual"))
       (progn (send link9-virtual_lk :weight 0.0) (setq (link9-virtual_lk . acentroid) (float-vector 0 0 0)) (send link9-virtual_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))
       ;; global coordinates for link9-virtual_lk
       (let ((world-cds (make-coords :pos (float-vector 240.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link9-virtual_lk :transform world-cds)))

     ;; link: link9_lk
     (let ((geom-lst (list (send self :_make_instance_link9_geom0))))
       (dolist (g (cdr geom-lst)) (send (car geom-lst) :assoc g))
       (setq link9_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies geom-lst
                       :name "link9"))
       (progn (send link9_lk :weight 0.83723444218166) (setq (link9_lk . acentroid) (float-vector -0.9999999999999449 9.80118763926896e-14 -1.73472347597681e-14)) (send link9_lk :inertia-tensor #2f((62.3317507912513 3.78653234505015e-18 7.57306469012327e-18)(3.78653234505015e-18 31.4449535430192 -1.0637631534724401e-13)(7.57306469012327e-18 -1.0637631534724401e-13 31.444953543019903))))
       ;; global coordinates for link9_lk
       (let ((world-cds (make-coords :pos (float-vector 270.000000 0.000000 0.000000)
                                     :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
         (send link9_lk :transform world-cds)))

     (send base_link_lk :assoc link1-virtual_lk)
     (send link1-virtual_lk :assoc link1_lk)
     (send link1_lk :assoc link2-virtual_lk)
     (send link2-virtual_lk :assoc link2_lk)
     (send link2_lk :assoc link3-virtual_lk)
     (send link3-virtual_lk :assoc link3_lk)
     (send link3_lk :assoc link4-virtual_lk)
     (send link4-virtual_lk :assoc link4_lk)
     (send link4_lk :assoc link5-virtual_lk)
     (send link5-virtual_lk :assoc link5_lk)
     (send link5_lk :assoc link6-virtual_lk)
     (send link6-virtual_lk :assoc link6_lk)
     (send link6_lk :assoc link7-virtual_lk)
     (send link7-virtual_lk :assoc link7_lk)
     (send link7_lk :assoc link8-virtual_lk)
     (send link8-virtual_lk :assoc link8_lk)
     (send link8_lk :assoc link9-virtual_lk)
     (send link9-virtual_lk :assoc link9_lk)
     (send self :assoc base_link_lk)

     ;; joint: joint1-virtual_jt
     (setq joint1-virtual_jt
           (instance rotational-joint :init
                     :name "joint1-virtual"
                     :parent-link base_link_lk :child-link link1-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint1_jt
     (setq joint1_jt
           (instance rotational-joint :init
                     :name "joint1"
                     :parent-link link1-virtual_lk :child-link link1_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint2-virtual_jt
     (setq joint2-virtual_jt
           (instance rotational-joint :init
                     :name "joint2-virtual"
                     :parent-link link1_lk :child-link link2-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint2_jt
     (setq joint2_jt
           (instance rotational-joint :init
                     :name "joint2"
                     :parent-link link2-virtual_lk :child-link link2_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint3-virtual_jt
     (setq joint3-virtual_jt
           (instance rotational-joint :init
                     :name "joint3-virtual"
                     :parent-link link2_lk :child-link link3-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint3_jt
     (setq joint3_jt
           (instance rotational-joint :init
                     :name "joint3"
                     :parent-link link3-virtual_lk :child-link link3_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint4-virtual_jt
     (setq joint4-virtual_jt
           (instance rotational-joint :init
                     :name "joint4-virtual"
                     :parent-link link3_lk :child-link link4-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint4_jt
     (setq joint4_jt
           (instance rotational-joint :init
                     :name "joint4"
                     :parent-link link4-virtual_lk :child-link link4_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint5-virtual_jt
     (setq joint5-virtual_jt
           (instance rotational-joint :init
                     :name "joint5-virtual"
                     :parent-link link4_lk :child-link link5-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint5_jt
     (setq joint5_jt
           (instance rotational-joint :init
                     :name "joint5"
                     :parent-link link5-virtual_lk :child-link link5_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint6-virtual_jt
     (setq joint6-virtual_jt
           (instance rotational-joint :init
                     :name "joint6-virtual"
                     :parent-link link5_lk :child-link link6-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint6_jt
     (setq joint6_jt
           (instance rotational-joint :init
                     :name "joint6"
                     :parent-link link6-virtual_lk :child-link link6_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint7-virtual_jt
     (setq joint7-virtual_jt
           (instance rotational-joint :init
                     :name "joint7-virtual"
                     :parent-link link6_lk :child-link link7-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint7_jt
     (setq joint7_jt
           (instance rotational-joint :init
                     :name "joint7"
                     :parent-link link7-virtual_lk :child-link link7_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint8-virtual_jt
     (setq joint8-virtual_jt
           (instance rotational-joint :init
                     :name "joint8-virtual"
                     :parent-link link7_lk :child-link link8-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint8_jt
     (setq joint8_jt
           (instance rotational-joint :init
                     :name "joint8"
                     :parent-link link8-virtual_lk :child-link link8_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint9-virtual_jt
     (setq joint9-virtual_jt
           (instance rotational-joint :init
                     :name "joint9-virtual"
                     :parent-link link8_lk :child-link link9-virtual_lk
                     :axis (float-vector 0.0000000000000000 1.0000000000000000 0.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; joint: joint9_jt
     (setq joint9_jt
           (instance rotational-joint :init
                     :name "joint9"
                     :parent-link link9-virtual_lk :child-link link9_lk
                     :axis (float-vector 0.0000000000000000 0.0000000000000000 1.0000000000000000)
                     :min -44.99999999957325 :max 44.99999999957325
                     :max-joint-velocity 2.0
                     :max-joint-torque 0.0))

     ;; mimic joint re-definition


     (setq tail-end-coords (make-cascoords :coords (send link9_lk :copy-worldcoords) :name :tail-end-coords))
     (send tail-end-coords :translate (float-vector 0.0 0.0 0.0))
     (send tail-end-coords :rotate 0.0 (float-vector 0.0 1.0 0.0))
     (send link9_lk :assoc tail-end-coords)

     ;; limbs
     (setq tail (list link1-virtual_lk link1_lk link2-virtual_lk link2_lk link3-virtual_lk link3_lk link4-virtual_lk link4_lk link5-virtual_lk link5_lk link6-virtual_lk link6_lk link7-virtual_lk link7_lk link8-virtual_lk link8_lk link9-virtual_lk link9_lk))

     (setq tail-root-link
           (labels ((find-parent (l) (if (find (send l :parent) tail) (find-parent (send l :parent)) l)))
             (find-parent (car tail))))

     ;; links
     (setq links (list base_link_lk link1-virtual_lk link1_lk link2-virtual_lk link2_lk link3-virtual_lk link3_lk link4-virtual_lk link4_lk link5-virtual_lk link5_lk link6-virtual_lk link6_lk link7-virtual_lk link7_lk link8-virtual_lk link8_lk link9-virtual_lk link9_lk))

     ;; joint-list
     (setq joint-list (list joint1-virtual_jt joint1_jt joint2-virtual_jt joint2_jt joint3-virtual_jt joint3_jt joint4-virtual_jt joint4_jt joint5-virtual_jt joint5_jt joint6-virtual_jt joint6_jt joint7-virtual_jt joint7_jt joint8-virtual_jt joint8_jt joint9-virtual_jt joint9_jt))

     ;; init-ending

     (send self :init-ending) ;; :urdf

     ;; overwrite bodies to return draw-things links not (send link :bodies)

     (setq bodies (flatten (mapcar #'(lambda (b) (if (find-method b :bodies) (send b :bodies))) (list base_link_lk link1-virtual_lk link1_lk link2-virtual_lk link2_lk link3-virtual_lk link3_lk link4-virtual_lk link4_lk link5-virtual_lk link5_lk link6-virtual_lk link6_lk link7-virtual_lk link7_lk link8-virtual_lk link8_lk link9-virtual_lk link9_lk))))

     (when (member :reset-pose (send self :methods))
           (send self :reset-pose)) ;; :set reset-pose

     self)) ;; end of :init

  ;; all joints
  (:joint1-virtual (&rest args) (forward-message-to joint1-virtual_jt args))
  (:joint1 (&rest args) (forward-message-to joint1_jt args))
  (:joint2-virtual (&rest args) (forward-message-to joint2-virtual_jt args))
  (:joint2 (&rest args) (forward-message-to joint2_jt args))
  (:joint3-virtual (&rest args) (forward-message-to joint3-virtual_jt args))
  (:joint3 (&rest args) (forward-message-to joint3_jt args))
  (:joint4-virtual (&rest args) (forward-message-to joint4-virtual_jt args))
  (:joint4 (&rest args) (forward-message-to joint4_jt args))
  (:joint5-virtual (&rest args) (forward-message-to joint5-virtual_jt args))
  (:joint5 (&rest args) (forward-message-to joint5_jt args))
  (:joint6-virtual (&rest args) (forward-message-to joint6-virtual_jt args))
  (:joint6 (&rest args) (forward-message-to joint6_jt args))
  (:joint7-virtual (&rest args) (forward-message-to joint7-virtual_jt args))
  (:joint7 (&rest args) (forward-message-to joint7_jt args))
  (:joint8-virtual (&rest args) (forward-message-to joint8-virtual_jt args))
  (:joint8 (&rest args) (forward-message-to joint8_jt args))
  (:joint9-virtual (&rest args) (forward-message-to joint9-virtual_jt args))
  (:joint9 (&rest args) (forward-message-to joint9_jt args))

  ;; all links forwarding
  (:links (&rest args)
   (if (null args) (return-from :links (send-super :links)))
   (let ((key (car args))
           (nargs (cdr args)))
     (unless (keywordp key)
         (return-from :links (send-super* :links args)))
       (case key
       (:base_link (forward-message-to base_link_lk nargs))
       (:link1-virtual (forward-message-to link1-virtual_lk nargs))
       (:link1 (forward-message-to link1_lk nargs))
       (:link2-virtual (forward-message-to link2-virtual_lk nargs))
       (:link2 (forward-message-to link2_lk nargs))
       (:link3-virtual (forward-message-to link3-virtual_lk nargs))
       (:link3 (forward-message-to link3_lk nargs))
       (:link4-virtual (forward-message-to link4-virtual_lk nargs))
       (:link4 (forward-message-to link4_lk nargs))
       (:link5-virtual (forward-message-to link5-virtual_lk nargs))
       (:link5 (forward-message-to link5_lk nargs))
       (:link6-virtual (forward-message-to link6-virtual_lk nargs))
       (:link6 (forward-message-to link6_lk nargs))
       (:link7-virtual (forward-message-to link7-virtual_lk nargs))
       (:link7 (forward-message-to link7_lk nargs))
       (:link8-virtual (forward-message-to link8-virtual_lk nargs))
       (:link8 (forward-message-to link8_lk nargs))
       (:link9-virtual (forward-message-to link9-virtual_lk nargs))
       (:link9 (forward-message-to link9_lk nargs))
       (t (send-super* :links args)))))

  ;; all links
  (:base_link_lk (&rest args) (forward-message-to base_link_lk args))
  (:link1-virtual_lk (&rest args) (forward-message-to link1-virtual_lk args))
  (:link1_lk (&rest args) (forward-message-to link1_lk args))
  (:link2-virtual_lk (&rest args) (forward-message-to link2-virtual_lk args))
  (:link2_lk (&rest args) (forward-message-to link2_lk args))
  (:link3-virtual_lk (&rest args) (forward-message-to link3-virtual_lk args))
  (:link3_lk (&rest args) (forward-message-to link3_lk args))
  (:link4-virtual_lk (&rest args) (forward-message-to link4-virtual_lk args))
  (:link4_lk (&rest args) (forward-message-to link4_lk args))
  (:link5-virtual_lk (&rest args) (forward-message-to link5-virtual_lk args))
  (:link5_lk (&rest args) (forward-message-to link5_lk args))
  (:link6-virtual_lk (&rest args) (forward-message-to link6-virtual_lk args))
  (:link6_lk (&rest args) (forward-message-to link6_lk args))
  (:link7-virtual_lk (&rest args) (forward-message-to link7-virtual_lk args))
  (:link7_lk (&rest args) (forward-message-to link7_lk args))
  (:link8-virtual_lk (&rest args) (forward-message-to link8-virtual_lk args))
  (:link8_lk (&rest args) (forward-message-to link8_lk args))
  (:link9-virtual_lk (&rest args) (forward-message-to link9-virtual_lk args))
  (:link9_lk (&rest args) (forward-message-to link9_lk args))
  (:joint1-virtual (&rest args) (forward-message-to joint1-virtual_jt args))
  (:joint1 (&rest args) (forward-message-to joint1_jt args))
  (:joint2-virtual (&rest args) (forward-message-to joint2-virtual_jt args))
  (:joint2 (&rest args) (forward-message-to joint2_jt args))
  (:joint3-virtual (&rest args) (forward-message-to joint3-virtual_jt args))
  (:joint3 (&rest args) (forward-message-to joint3_jt args))
  (:joint4-virtual (&rest args) (forward-message-to joint4-virtual_jt args))
  (:joint4 (&rest args) (forward-message-to joint4_jt args))
  (:joint5-virtual (&rest args) (forward-message-to joint5-virtual_jt args))
  (:joint5 (&rest args) (forward-message-to joint5_jt args))
  (:joint6-virtual (&rest args) (forward-message-to joint6-virtual_jt args))
  (:joint6 (&rest args) (forward-message-to joint6_jt args))
  (:joint7-virtual (&rest args) (forward-message-to joint7-virtual_jt args))
  (:joint7 (&rest args) (forward-message-to joint7_jt args))
  (:joint8-virtual (&rest args) (forward-message-to joint8-virtual_jt args))
  (:joint8 (&rest args) (forward-message-to joint8_jt args))
  (:joint9-virtual (&rest args) (forward-message-to joint9-virtual_jt args))
  (:joint9 (&rest args) (forward-message-to joint9_jt args))

  ;; non-default limbs

  (:tail (&rest args) (unless args (setq args (list nil))) (send* self :limb :tail args))
  (:tail-end-coords () tail-end-coords)
  (:tail-root-link () tail-root-link)
  (:_make_instance_base_link_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i(0 1 2 2 1 3 4 5 6 6 5 7 7 8 6 6 8 9 6 9 10 10 11 6 6 11 12 6 12 13 13 14 6 6 14 15 6 15 16 16 15 17 16 17 18 18 19 16 16 19 20 16 20 21 21 22 16 16 22 23 16 23 24 24 25 16 16 25 26 16 26 27 27 28 16 16 28 29 16 29 30 31 32 33 33 32 34 35 36 37 37 36 38 37 38 39 39 40 37 37 40 41 37 41 42 42 43 37 37 43 44 37 44 45 45 44 46 45 46 47 47 48 45 45 48 49 45 49 50 50 51 45 45 51 52 45 52 53 53 54 45 45 54 55 45 55 56 56 57 45 45 57 58 45 58 59 59 60 45 45 60 61 45 61 62 0 2 63 63 2 64 63 64 65 65 64 66 65 66 67 67 66 68 67 68 69 69 68 70 69 70 71 71 70 72 71 72 73 73 72 74 73 74 75 74 76 75 75 76 77 75 77 78 78 77 79 79 77 80 79 80 81 81 80 82 81 82 83 83 82 84 83 84 85 84 86 85 85 86 87 85 87 88 88 87 89 88 89 90 90 89 91 90 91 92 92 91 93 92 93 94 94 93 95 96 97 98 98 97 99 98 99 100 100 99 101 100 101 102 102 101 103 102 103 95 95 103 104 95 104 94 31 33 105 105 33 106 105 106 107 107 106 108 107 108 109 109 108 110 109 110 111 111 110 112 111 112 113 113 112 114 113 114 115 115 114 116 115 116 117 117 116 118 117 118 119 119 118 120 119 120 121 121 120 122 121 122 123 123 122 124 123 124 125 125 124 126 125 126 127 127 126 128 127 128 129 129 128 130 129 130 131 131 130 132 132 130 133 132 133 134 135 136 137 137 136 138 137 138 139 139 138 140 139 140 141 141 140 142 141 142 143 143 142 144 143 144 145 145 144 134 145 134 146 146 134 133 136 135 147 147 135 148 147 148 149 149 148 150 149 150 151 151 150 152 151 152 153 153 152 154 153 154 155 155 154 156 155 156 157 157 156 158 157 158 159 159 158 160 158 161 160 160 161 162 160 162 163 163 162 164 163 164 165 165 164 166 165 166 167 167 166 168 167 168 169 169 168 170 169 170 171 171 170 172 171 172 173 173 172 174 173 174 175 175 174 176 175 176 177 177 176 178 177 178 179 179 178 180 97 96 181 181 96 182 181 182 183 183 182 184 183 184 185 185 184 186 185 186 187 187 186 188 187 188 189 189 188 190 189 190 191 191 190 192 191 192 180 180 192 193 180 193 179 194 195 196 197 198 199 198 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 105 107 218 219 220 221 222 223 224 225 226 226 225 227 226 227 228 229 230 231 231 230 232 231 232 233 234 235 236 237 238 239 240 241 242 242 241 237 242 237 243 243 237 239 244 245 246 246 245 247 246 247 248 248 247 249 248 249 250 246 251 244 244 251 252 244 252 228 228 252 253 228 253 226 254 255 256 256 255 257 256 257 258 257 259 258 258 259 260 258 260 261 261 260 262 261 262 263 263 262 264 263 264 265 265 264 266 265 266 267 267 266 268 267 268 269 269 268 270 269 270 271 271 270 272 271 272 273 273 272 274 273 274 254 254 274 275 254 275 255 276 277 278 277 276 279 279 276 280 279 280 281 221 223 282 283 284 285 285 284 286 285 286 287 287 286 288 287 288 289 289 288 290 289 290 291 292 293 294 294 293 295 295 293 296 296 293 297 296 297 298 298 297 299 298 299 278 278 299 300 278 300 276 301 302 303 302 304 303 303 304 305 303 305 306 307 308 309 310 311 243 243 311 312 305 313 306 306 313 314 306 314 315 316 317 318 318 317 319 320 321 322 323 324 325 324 326 325 325 326 327 325 327 220 220 327 328 220 328 218 329 330 331 331 330 332 333 334 335 335 334 336 335 336 337 332 338 331 331 338 339 331 339 340 340 339 341 340 341 342 343 344 345 345 344 346 345 346 347 347 346 348 347 348 349 349 348 350 351 352 353 353 352 354 353 354 239 239 354 355 239 355 356 350 357 349 349 357 358 349 358 351 351 358 359 351 359 352 360 361 220 362 363 364 365 366 367 367 366 368 364 363 369 369 363 370 369 370 371 371 360 369 369 360 220 369 220 202 202 220 219 202 219 372 372 219 373 374 375 269 376 377 263 378 379 380 381 382 383 383 384 381 381 384 385 381 385 376 386 387 388 388 387 389 388 389 390 390 389 391 390 391 382 382 391 392 382 392 383 393 394 395 62 61 396 396 61 397 396 397 398 398 397 399 400 401 402 403 404 405 214 406 215 215 406 407 215 407 408 408 407 409 408 409 410 411 412 413 414 415 416 416 415 417 418 419 420 421 422 119 119 422 423 119 423 117 117 423 424 117 424 425 426 427 428 428 427 429 430 431 129 129 431 432 129 432 127 127 432 433 127 433 434 429 435 428 428 435 436 428 436 437 437 436 438 437 438 439 440 441 442 440 442 443 443 442 444 443 444 445 446 447 448 448 447 449 448 449 450 450 449 451 450 451 452 453 454 171 455 456 169 169 456 457 169 457 440 440 457 458 440 458 459 171 454 169 169 454 460 169 460 455 453 171 461 461 171 450 461 450 462 462 450 452 462 452 463 441 440 464 464 440 459 464 459 465 465 459 466 465 466 463 463 466 467 463 467 462 468 192 469 469 192 190 207 468 470 188 471 190 190 471 472 190 472 469 473 408 404 404 408 410 404 410 405 473 474 408 408 474 475 408 475 186 186 475 476 186 476 188 188 476 477 188 477 471 207 470 403 403 470 478 403 478 404 404 478 479 404 479 473 480 481 482 483 484 485 484 486 485 485 486 487 485 487 488 488 487 489 488 489 490 491 492 493 493 492 494 494 492 490 490 492 495 490 495 488 496 497 58 58 497 59 498 499 500 497 501 59 59 501 502 59 502 60 500 499 503 499 504 503 503 504 505 503 505 506 506 505 507 506 507 496 502 508 60 60 508 509 60 509 500 500 509 510 500 510 498 511 512 513 514 515 516 515 517 516 516 517 518 516 518 519 519 518 520 70 521 522 521 70 523 523 70 68 523 68 524 525 526 527 527 526 528 527 528 529 530 531 532 533 534 535 535 534 536 537 538 539 540 541 542 542 541 543 544 545 546 547 548 549 544 546 550 550 546 551 550 551 552 209 208 553 552 551 554 554 551 555 554 555 556 557 151 558 558 151 559 559 151 560 560 151 153 560 153 561 562 563 564 565 566 567 566 568 567 567 568 569 567 569 561 561 569 570 561 570 560 571 572 573 574 575 576 576 575 577 576 577 578 578 577 579 578 579 580 573 581 571 571 581 582 571 582 583 582 584 583 583 584 585 583 585 160 576 159 574 574 159 160 574 160 586 586 160 585 587 588 492 492 588 589 590 591 592 592 591 593 592 593 594 594 593 595 594 595 596 596 595 597 596 597 598 598 597 599 598 599 600 589 601 602 602 601 603 602 603 590 604 605 606 606 605 607 607 608 609 609 608 610 609 610 194 194 610 611 611 612 194 194 612 613 194 613 614 613 615 614 614 615 616 614 616 617 604 618 619 619 618 617 619 617 620 620 617 616 621 622 623 624 625 626 626 625 621 627 628 629 629 628 630 629 630 631 622 632 623 623 632 633 623 633 634 634 633 635 634 635 627 627 635 636 627 636 628 149 151 637 637 151 557 637 557 638 638 557 558 468 207 192 192 207 206 192 206 193 639 640 641 642 643 644 643 645 644 644 645 646 644 646 402 402 646 647 402 647 648 405 649 403 403 649 400 403 400 207 207 400 402 207 402 205 205 402 648 205 648 650 650 651 205 205 651 652 205 652 639 639 652 653 639 653 640 157 159 654 654 159 576 654 576 655 655 576 578 655 578 656 656 578 657 656 657 224 224 657 236 224 236 225 225 236 235 580 572 578 578 572 571 578 571 657 657 571 658 657 658 236 236 658 233 236 233 234 234 233 232 351 659 660 661 662 659 659 662 663 659 663 660 664 661 665 665 661 659 665 659 666 666 659 667 666 667 668 668 667 669 668 669 167 167 669 165 660 670 351 351 670 671 351 671 349 349 671 672 349 672 673 673 674 349 349 674 675 349 675 665 665 675 676 665 676 664 445 446 443 443 446 448 443 448 677 677 448 678 677 678 280 280 678 679 280 679 281 171 173 450 450 173 680 450 680 448 448 680 681 448 681 678 678 681 682 678 682 679 679 682 683 679 683 281 281 683 684 173 175 680 680 175 685 680 685 681 681 685 686 681 686 682 682 686 687 682 687 683 683 687 223 683 223 684 684 223 222 175 177 685 685 177 688 685 688 686 686 688 689 686 689 687 687 689 690 687 690 223 223 690 691 223 691 282 177 179 688 688 179 692 688 692 689 689 692 693 689 693 690 690 693 694 690 694 691 691 694 283 691 283 282 282 283 285 695 696 543 697 698 699 696 700 543 543 700 701 543 701 702 702 701 703 702 703 704 147 149 705 705 149 637 705 637 706 706 637 707 706 707 708 708 707 709 708 709 710 710 709 702 710 702 711 711 702 704 711 712 710 710 712 713 710 713 699 699 713 714 699 714 697 638 715 637 637 715 563 637 563 707 707 563 562 707 562 709 709 562 716 709 716 702 702 716 717 702 717 543 543 717 547 543 547 542 542 547 549 564 565 562 562 565 567 562 567 716 716 567 718 716 718 717 717 718 719 717 719 547 547 719 546 547 546 548 548 546 545 160 163 583 583 163 720 583 720 571 571 720 721 571 721 658 658 721 722 658 722 233 233 722 723 233 723 231 231 723 724 231 724 229 229 724 725 163 165 720 720 165 669 720 669 721 721 669 667 721 667 722 722 667 659 722 659 723 723 659 351 723 351 724 724 351 353 724 353 725 725 353 239 725 239 726 726 239 238 727 728 729 730 731 732 733 734 735 735 734 736 735 736 737 737 736 738 737 738 739 739 738 740 739 740 741 741 740 742 741 742 182 182 742 184 732 743 730 730 743 744 730 744 735 735 744 745 735 745 733 734 746 736 736 746 747 736 747 729 729 747 748 729 748 727 356 343 239 239 343 345 239 345 243 243 345 307 243 307 310 310 307 309 167 169 668 668 169 440 668 440 666 666 440 443 666 443 665 665 443 677 665 677 349 349 677 280 349 280 347 347 280 276 347 276 345 345 276 300 345 300 307 307 300 299 307 299 308 308 299 297 308 297 749 749 297 314 136 147 138 138 147 705 138 705 140 140 705 706 140 706 142 142 706 708 142 708 144 144 708 710 144 710 134 134 710 699 134 699 132 132 699 750 132 750 131 131 750 751 131 751 129 129 751 437 129 437 430 430 437 439 250 240 248 248 240 242 248 242 752 752 242 243 752 243 753 753 243 312 753 312 301 301 303 753 753 303 754 753 754 752 752 754 755 752 755 248 248 755 204 248 204 246 246 204 203 246 203 251 314 297 315 315 297 293 315 293 756 756 293 292 756 292 757 202 204 369 369 204 755 369 755 364 364 755 754 364 754 758 758 754 303 758 303 759 759 303 306 759 306 760 760 306 315 760 315 381 381 315 756 381 756 382 382 756 757 382 757 390 761 291 762 762 291 290 762 290 763 763 290 764 763 764 329 329 764 765 329 765 330 330 765 766 330 766 767 208 556 553 553 556 555 553 555 768 768 555 769 768 769 770 770 769 771 770 771 772 772 771 773 772 773 485 485 773 480 485 480 483 483 480 482 153 155 561 561 155 774 561 774 567 567 774 775 567 775 718 718 775 776 718 776 719 719 776 777 719 777 546 546 777 778 546 778 551 551 778 779 551 779 555 555 779 780 555 780 769 769 780 781 769 781 771 771 781 782 771 782 773 773 782 783 773 783 480 480 783 318 480 318 481 481 318 319 481 319 784 784 319 785 155 157 774 774 157 654 774 654 775 775 654 655 775 655 776 776 655 656 776 656 777 777 656 224 777 224 778 778 224 226 778 226 779 779 226 253 779 253 780 780 253 252 780 252 781 781 252 251 781 251 782 782 251 203 782 203 783 783 203 202 783 202 318 318 202 372 318 372 316 316 372 373 376 263 381 381 263 265 381 265 760 760 265 267 760 267 759 759 267 269 759 269 758 758 269 375 758 375 364 364 375 786 364 786 362 179 193 692 692 193 206 692 206 693 693 206 205 693 205 694 694 205 639 694 639 283 283 639 787 283 787 284 284 787 788 284 788 286 286 788 789 286 789 288 288 789 790 288 790 290 290 790 791 290 791 764 764 791 792 764 792 765 765 792 793 765 793 766 766 793 794 531 525 532 532 525 527 532 527 795 795 527 796 795 796 797 797 796 798 797 798 799 799 798 800 799 800 801 801 800 802 801 802 803 803 802 804 803 804 805 805 804 806 805 806 807 807 806 808 807 808 413 413 808 809 413 809 411 411 809 810 411 810 811 412 214 413 413 214 216 413 216 807 807 216 812 807 812 805 805 812 813 805 813 803 803 813 814 803 814 801 801 814 815 801 815 799 799 815 816 799 816 797 797 816 817 797 817 795 795 817 818 795 818 532 532 818 819 532 819 530 530 819 820 186 184 408 408 184 742 408 742 215 215 742 740 215 740 216 216 740 738 216 738 812 812 738 736 812 736 813 813 736 729 813 729 814 814 729 821 814 821 815 815 821 822 815 822 816 816 822 823 816 823 817 817 823 824 817 824 818 818 824 825 818 825 819 819 825 536 819 536 820 820 536 534 434 826 127 127 826 427 127 427 125 125 427 426 125 426 123 123 426 827 123 827 121 121 827 828 121 828 119 119 828 420 119 420 421 421 420 419 698 695 699 699 695 543 699 543 750 750 543 541 750 541 751 751 541 829 751 829 437 437 829 830 437 830 428 428 830 831 428 831 426 426 831 832 426 832 827 827 832 833 827 833 828 828 833 834 828 834 420 420 834 835 540 210 541 541 210 209 541 209 829 829 209 553 829 553 830 830 553 768 830 768 831 831 768 770 831 770 832 832 770 772 832 772 833 833 772 485 833 485 834 834 485 488 834 488 835 835 488 495 493 785 491 491 785 319 491 319 492 492 319 598 492 598 587 587 598 600 361 365 220 220 365 367 220 367 325 325 367 836 325 836 837 837 836 838 837 838 200 368 374 367 367 374 269 367 269 836 836 269 271 836 271 838 838 271 273 589 602 492 492 602 839 492 839 495 495 839 840 495 840 835 835 840 415 835 415 420 420 415 414 420 414 418 200 838 201 201 838 273 201 273 841 841 273 254 841 254 842 842 254 256 842 256 843 843 256 258 843 258 844 845 846 847 848 849 850 850 851 848 848 851 852 848 852 853 853 852 854 853 854 855 855 856 853 853 856 857 853 857 858 858 857 859 858 859 860 860 859 794 860 794 861 861 794 793 861 793 862 862 793 792 862 792 863 863 792 791 863 791 864 864 791 790 864 790 865 865 790 789 865 789 866 866 789 788 866 788 867 867 788 787 867 787 644 644 787 639 644 639 642 642 639 641 856 868 857 857 868 869 857 869 845 845 869 870 845 870 846 198 201 199 199 201 841 199 841 871 871 841 842 871 842 872 872 842 843 872 843 873 873 843 844 873 844 874 197 199 875 875 199 871 875 871 876 876 871 872 876 872 877 877 872 873 877 873 878 878 873 874 878 874 626 377 378 263 263 378 380 263 380 261 261 380 879 261 879 258 258 879 880 258 880 844 844 880 881 844 881 874 874 881 882 874 882 626 626 882 883 626 883 624 624 883 884 379 386 380 380 386 388 380 388 879 879 388 885 879 885 880 880 885 886 880 886 881 881 886 887 881 887 882 882 887 888 882 888 883 883 888 889 883 889 884 884 889 890 294 891 292 292 891 892 292 892 757 757 892 893 757 893 390 390 893 894 390 894 388 388 894 895 388 895 885 885 895 896 885 896 886 886 896 897 886 897 887 887 897 898 887 898 888 888 898 899 888 899 889 889 899 631 889 631 890 890 631 630 621 623 626 626 623 900 626 900 878 878 900 901 878 901 877 877 901 902 877 902 876 876 902 196 876 196 875 875 196 195 875 195 197 728 731 729 729 731 730 729 730 821 821 730 903 821 903 822 822 903 904 822 904 823 823 904 905 823 905 824 824 905 906 824 906 825 825 906 907 825 907 536 536 907 908 536 908 535 535 908 909 535 909 910 910 909 911 910 911 912 912 911 913 912 913 914 914 913 915 914 915 916 916 915 917 916 917 516 516 917 918 516 918 514 514 918 919 182 96 741 741 96 98 741 98 739 739 98 100 739 100 737 737 100 102 737 102 735 735 102 95 735 95 730 730 95 93 730 93 903 903 93 91 903 91 904 904 91 89 904 89 905 905 89 87 905 87 906 906 87 86 906 86 907 907 86 84 907 84 908 908 84 82 908 82 909 909 82 80 909 80 911 911 80 77 911 77 913 913 77 76 913 76 915 915 76 74 915 74 917 917 74 72 917 72 918 918 72 70 918 70 919 919 70 522 194 196 609 609 196 902 609 902 920 920 902 901 920 901 921 921 901 900 921 900 922 922 900 623 922 623 923 923 623 634 923 634 924 924 634 627 924 627 925 925 627 629 925 629 926 891 761 892 892 761 762 892 762 893 893 762 763 893 763 894 894 763 329 894 329 895 895 329 331 895 331 896 896 331 340 896 340 897 897 340 927 897 927 898 898 927 928 898 928 899 899 928 929 899 929 631 631 929 930 631 930 629 629 930 931 629 931 926 926 931 932 425 933 117 117 933 934 117 934 115 115 934 935 115 935 113 113 935 936 113 936 111 111 936 937 111 937 109 109 937 938 109 938 107 107 938 393 107 393 217 217 393 395 607 609 606 606 609 920 606 920 939 939 920 921 939 921 940 940 921 922 940 922 941 941 922 923 941 923 942 942 923 924 942 924 943 943 924 925 943 925 944 944 925 926 944 926 945 932 946 926 926 946 947 926 947 948 948 949 926 926 949 950 926 950 945 945 950 951 952 953 954 954 953 945 954 945 955 955 945 951 952 956 953 953 956 957 953 957 932 932 957 958 932 958 946 342 333 340 340 333 335 340 335 927 927 335 959 927 959 928 928 959 960 928 960 929 929 960 961 929 961 930 930 961 962 930 962 931 931 962 963 931 963 932 932 963 964 932 964 953 953 964 965 966 965 967 967 965 964 967 964 968 968 964 963 968 963 969 969 963 962 969 962 970 970 962 961 970 961 845 845 961 960 845 960 857 857 960 959 857 959 859 859 959 335 859 335 794 794 335 337 794 337 766 766 337 971 766 971 767 847 849 845 845 849 848 845 848 970 970 848 972 970 972 969 969 972 973 969 973 968 968 973 974 968 974 967 967 974 975 967 975 966 966 975 976 401 811 402 402 811 810 402 810 644 644 810 809 644 809 867 867 809 808 867 808 866 866 808 806 866 806 865 865 806 804 865 804 864 864 804 802 864 802 863 863 802 800 863 800 862 862 800 798 862 798 861 861 798 796 861 796 860 860 796 527 860 527 858 858 527 529 858 529 853 853 529 977 853 977 848 848 977 978 848 978 972 972 978 979 972 979 973 973 979 980 973 980 974 974 980 981 974 981 975 975 981 982 975 982 976 976 982 983 528 211 529 529 211 213 529 213 977 977 213 984 977 984 978 978 984 985 978 985 979 979 985 986 979 986 980 980 986 987 980 987 981 981 987 988 981 988 982 982 988 989 982 989 983 983 989 990 212 537 213 213 537 539 213 539 984 984 539 991 984 991 985 985 991 992 985 992 986 986 992 993 986 993 987 987 993 994 987 994 988 988 994 995 988 995 989 989 995 996 989 996 990 990 996 997 538 533 539 539 533 535 539 535 991 991 535 910 991 910 992 992 910 912 992 912 993 993 912 914 993 914 994 994 914 916 994 916 995 995 916 516 995 516 996 996 516 519 996 519 997 997 519 998 512 524 513 513 524 68 513 68 399 399 68 66 399 66 398 398 66 64 935 999 936 936 999 1000 936 1000 937 937 1000 1001 937 1001 938 938 1001 1002 938 1002 393 393 1002 1003 393 1003 394 394 1003 1004 999 1005 1000 1000 1005 1006 1000 1006 1001 1001 1006 1007 1001 1007 1002 1002 1007 1008 1002 1008 1003 1003 1008 1009 1003 1009 1004 1004 1009 1010 1005 1011 1006 1006 1011 1012 1006 1012 1007 1007 1012 1013 1007 1013 1008 1008 1013 1014 1008 1014 1009 1009 1014 1015 1009 1015 1010 1010 1015 1016 1017 1016 1018 1018 1016 1015 1018 1015 1019 1019 1015 1014 1019 1014 1020 1020 1014 1013 1020 1013 592 592 1013 1012 592 1012 590 590 1012 1011 590 1011 602 602 1011 1005 602 1005 839 839 1005 999 839 999 840 840 999 935 840 935 415 415 935 934 415 934 417 317 321 319 319 321 320 319 320 598 598 320 1021 598 1021 596 596 1021 1022 596 1022 594 594 1022 1023 594 1023 592 592 1023 1024 592 1024 1020 1020 1024 1025 1020 1025 1019 1019 1025 1026 1019 1026 1018 1018 1026 1027 1018 1027 1017 1017 1027 1028 322 323 320 320 323 325 320 325 1021 1021 325 837 1021 837 1022 1022 837 200 1022 200 1023 1023 200 198 1023 198 1024 1024 198 197 1024 197 1025 1025 197 195 1025 195 1026 1026 195 194 1026 194 1027 1027 194 614 1027 614 1028 1028 614 617 604 606 618 618 606 939 618 939 1029 1029 939 940 1029 940 1030 1030 940 941 1030 941 1031 1031 941 942 1031 942 1032 1032 942 943 1032 943 1033 1033 943 944 1033 944 1034 1034 944 945 1034 945 1035 1035 945 953 1035 953 1036 1036 953 965 1036 965 1037 1037 965 966 1037 966 1038 1038 966 976 1038 976 1039 1039 976 983 1039 983 1040 1040 983 990 1040 990 506 506 990 997 506 997 503 503 997 998 503 998 500 496 58 506 506 58 57 506 57 1040 1040 57 56 1040 56 1039 1039 56 55 1039 55 1038 1038 55 54 1038 54 1037 1037 54 53 1037 53 1036 1036 53 52 1036 52 1035 1035 52 51 1035 51 1034 1034 51 50 1034 50 1033 1033 50 49 1033 49 1032 1032 49 48 1032 48 1031 1031 48 47 1031 47 1030 1030 47 46 1030 46 1029 1029 46 44 1029 44 618 618 44 43 618 43 617 617 43 42 617 42 1028 1028 42 41 1028 41 1017 1017 41 40 1017 40 1016 1016 40 39 1016 39 1010 1010 39 38 1010 38 1004 1004 38 36 1004 36 394 394 36 35 394 35 395 520 511 519 519 511 513 519 513 998 998 513 399 998 399 500 500 399 397 500 397 60 60 397 61 1041 1042 1043 1044 1045 1046 1047 1048 1044 1049 1050 1051 12 11 1052 14 13 1053 19 18 1054 20 19 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 30 29 1089 108 106 1090 1091 1092 1093 1093 1094 1091 1091 1094 5 1091 5 4 1095 1096 1097 1097 1096 1098 1097 1098 1099 1099 1098 1100 1099 1100 1101 1101 1100 1102 1102 1100 1103 1102 1103 1104 1104 1103 1105 1105 1103 1047 1105 1047 1106 1107 1108 1109 1110 1111 1112 1113 1114 1112 1112 1114 1115 1112 1115 1110 1116 1117 1118 1118 1117 1119 1118 1119 1120 1120 1119 1111 1121 1122 1049 1049 1122 1123 1049 1123 1113 1113 1123 1124 1113 1124 1114 1125 1126 1127 1128 1129 1125 1126 1130 1127 1127 1130 1131 1127 1131 1132 1086 1133 1087 1087 1133 1134 1087 1134 1128 1128 1134 1135 1128 1135 1129 1136 1137 1138 1138 1137 1132 1138 1132 1139 1139 1132 1131 1140 1141 1142 1142 1141 1143 1144 1145 1146 1147 1148 1149 1149 1148 1150 1149 1150 1151 1151 1150 1152 1153 1154 1155 1155 1154 1156 1155 1156 1157 1157 1156 1152 1157 1152 1158 1158 1152 1150 1049 1159 1160 1161 1162 1163 1163 1164 1165 1165 1164 1166 1165 1166 1167 1168 1169 1170 1170 1169 1162 1049 1160 1050 1050 1160 1171 1050 1171 1172 1173 1174 1175 1175 1174 1176 1176 1177 1178 1178 1177 1179 1178 1179 1180 1180 1179 1181 1180 1181 1182 1182 1183 1180 1180 1183 1184 1180 1184 1185 1185 1184 1186 1185 1186 1187 1173 1188 1189 1189 1188 1187 1189 1187 1190 1190 1187 1186 1191 1192 1193 1194 1195 1196 1196 1195 1197 1198 1199 1200 1198 1201 1199 1199 1201 1194 1199 1194 1202 1203 1204 1205 1205 1204 1206 1205 1206 1200 1200 1206 1207 1200 1207 1198 1076 1208 1203 1209 1210 1211 1212 1213 118 118 1213 1214 118 1214 120 120 1214 1215 1210 1216 1211 1211 1216 1217 1211 1217 1218 1218 1217 1219 1218 1219 1220 1220 1221 1218 1218 1221 1222 1218 1222 1223 1224 1225 128 128 1225 130 1225 1226 130 130 1226 1227 130 1227 1228 1228 1229 1230 1230 1229 1231 1230 1231 1232 1232 1231 1233 1232 1233 1234 1234 1235 1232 1232 1235 1236 1232 1236 1237 1238 1239 1240 1240 1239 1241 1080 1242 1081 1081 1242 1243 1081 1243 1244 1244 1243 1245 1244 1245 1246 1247 1248 1249 1249 1248 1250 1251 1252 1253 1254 1255 1256 1251 1253 1257 1254 1256 1258 1259 1260 1261 1262 1263 172 172 1263 1264 1078 1265 1266 1266 1265 1267 1267 1265 1268 1267 1268 1269 1269 1268 1259 1269 1259 1270 1270 1259 1261 1270 1261 1271 1078 1266 1079 1079 1266 1272 1079 1272 1273 1262 172 1274 1274 172 170 1274 170 1275 1208 1076 1276 1276 1076 1075 1276 1075 1277 1203 1205 1076 1076 1205 1278 1076 1278 1074 185 187 1279 1279 1280 185 185 1280 1281 185 1281 1200 1200 1281 1282 1200 1282 1205 1205 1282 1283 1205 1283 1278 191 1284 189 189 1284 1285 189 1285 187 187 1285 1286 187 1286 1279 1287 1288 1289 1289 1288 1290 1289 1290 1291 1291 1290 1292 1293 1294 1295 1295 1294 1296 1295 1296 1297 1287 1298 1288 1288 1298 1299 1288 1299 1300 1299 1301 1302 1302 1301 1303 1302 1303 1293 1293 1303 1304 1293 1304 1294 9 1305 1306 1306 1305 1307 1308 1309 1310 8 7 1311 1311 1312 8 8 1312 1313 8 1313 9 9 1313 1314 9 1314 1305 1315 1316 1317 1317 1316 1318 1317 1318 7 7 1318 1319 7 1319 1311 1320 1321 1322 1322 1321 1323 1324 1325 1326 1326 1325 1071 1323 1327 1328 1328 1327 1329 1328 1329 1326 1326 1329 1330 1326 1330 1324 1072 1331 69 69 1331 1332 69 1332 67 67 1332 1320 1333 1334 1335 1336 1337 1041 1041 1337 1338 1041 1338 1042 1042 1338 1339 1339 1340 1042 1042 1340 1341 1042 1341 1342 1341 1343 1342 1342 1343 1344 1342 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1354 1353 1355 1349 1351 1170 1170 1351 1356 1170 1356 1352 1355 1357 1354 1354 1357 1358 1354 1358 1359 1359 1358 1360 1359 1360 1361 1361 1360 1362 1361 1362 1363 1350 1349 1364 1364 1349 1365 1364 1365 1363 1366 1367 1368 1368 1367 1369 1368 1369 1069 1370 1371 1372 1066 1373 1374 1374 1373 1375 1374 1375 1376 1376 1375 1377 1065 1067 1378 1379 1366 1378 1380 1381 1382 1382 1381 1383 1382 1383 1384 1384 1383 1385 1384 1385 1386 1386 1387 1388 1388 1387 1389 1388 1389 1390 1391 1392 1393 1394 1395 1396 1396 1395 1397 1063 1062 1398 1399 1400 1401 1401 1400 1402 1401 1402 1403 1403 1402 1404 1405 1406 1407 1408 1409 1410 1410 1409 1411 1412 1413 1414 1414 1413 1415 1414 1415 1416 1417 1418 1419 1420 1421 1422 1422 1421 1423 1424 1425 1426 1426 1425 1427 1426 1427 1428 1429 162 1430 1430 162 161 1431 1432 1300 1433 1434 1435 1435 1434 1436 1435 1436 1437 1438 1439 1440 1440 1439 1441 1440 1441 1442 1442 1441 1443 1442 1443 1444 1444 1443 1445 1444 1445 1300 1300 1445 1446 1300 1446 1431 1433 1447 1434 1434 1447 1438 1434 1438 1448 1448 1438 1449 1450 1451 1452 1453 1454 1450 1450 1454 1455 1450 1455 1451 1456 1457 1458 1456 1458 1459 1458 1460 1459 1459 1460 1461 1459 1461 1462 1462 1461 1463 1463 1464 1465 1465 1464 1466 1465 1466 1453 1453 1466 1467 1453 1467 1454 1468 1469 1470 1470 1469 1471 1057 1472 1473 1472 1474 1473 1473 1474 1475 1473 1475 1476 1476 1475 1477 1476 1477 1478 1479 1471 1056 1463 1465 1462 1462 1465 24 1462 24 23 14 1053 1480 1480 1053 1481 1480 1481 1482 1483 1484 1485 1485 1484 1486 1485 1486 1481 1481 1486 1487 1487 1488 1481 1481 1488 1489 1481 1489 1482 1482 1489 1490 1491 1492 1493 1490 1494 1482 1482 1494 1495 1482 1495 1491 1491 1495 1496 1491 1496 1492 1323 1328 1322 1322 1328 1497 1322 1497 1093 1093 1497 1317 1093 1317 1094 1094 1317 7 1094 7 5 1320 1322 67 67 1322 1093 67 1093 65 65 1093 1092 65 1092 63 1057 1473 1058 1058 1473 1498 1058 1498 1499 1499 1498 1500 1499 1500 1501 1501 1500 1054 1501 1054 1502 1502 1054 18 1502 18 17 1056 1058 1479 1479 1058 1499 1479 1499 1503 1503 1499 1501 1503 1501 1504 1504 1501 1502 1504 1502 1505 1505 1502 17 1505 17 15 1471 1479 1470 1470 1479 1503 1470 1503 1491 1491 1503 1504 1491 1504 1482 1482 1504 1505 1482 1505 1480 1480 1505 15 1480 15 14 1438 1440 1449 1449 1440 1506 1449 1506 1507 1507 1506 1508 1507 1508 1509 1509 1508 1510 1509 1510 1511 1511 1510 1512 1511 1512 1513 1513 1512 26 1513 26 25 1212 118 1222 1222 118 116 1222 116 1223 1223 116 114 1223 114 1514 1514 114 112 1514 112 1515 1515 112 110 1515 110 1516 1516 110 108 1516 108 1517 1517 108 1090 1517 1090 1089 1089 1090 1518 1089 1518 30 1519 1211 1520 1520 1211 1218 1520 1218 1521 1521 1218 1223 1521 1223 1522 1522 1223 1514 1522 1514 1523 1523 1514 1515 1523 1515 1524 1524 1515 1516 1524 1516 1525 1525 1516 1517 1525 1517 1526 1526 1517 1089 1526 1089 1527 1527 1089 29 1527 29 28 1299 1302 1300 1300 1302 1528 1300 1528 1444 1444 1528 1529 1444 1529 1442 1442 1529 1530 1442 1530 1440 1440 1530 1531 1440 1531 1506 1506 1531 1532 1506 1532 1508 1508 1532 1533 1508 1533 1510 1510 1533 1534 1510 1534 1512 1512 1534 27 1512 27 26 1363 1365 1361 1361 1365 1535 1361 1535 1536 1536 1535 1537 1536 1537 1538 1538 1537 1539 1538 1539 1540 1540 1539 1541 1540 1541 1542 1542 1541 1543 1542 1543 1544 1544 1543 1545 1544 1545 1546 1546 1545 1547 1546 1547 1548 1548 1547 21 1548 21 20 1549 1550 1551 1551 1550 1552 12 1052 1553 1553 1052 1554 1553 1554 1555 1555 1554 1556 1555 1556 1557 1557 1556 1558 1557 1558 1559 1559 1558 1560 1559 1560 1561 1561 1560 1562 1561 1562 1563 1563 1562 1550 1563 1550 1564 1564 1550 1549 1564 1549 1565 1565 1566 1564 1564 1566 1567 1564 1567 1568 1568 1567 1569 1568 1569 1570 1571 1572 1573 1573 1572 1574 1573 1574 1550 1550 1574 1575 1550 1575 1552 1576 122 120 1295 1519 1293 1293 1519 1520 1293 1520 1302 1302 1520 1521 1302 1521 1528 1528 1521 1522 1528 1522 1529 1529 1522 1523 1529 1523 1530 1530 1523 1524 1530 1524 1531 1531 1524 1525 1531 1525 1532 1532 1525 1526 1532 1526 1533 1533 1526 1527 1533 1527 1534 1534 1527 28 1534 28 27 1111 1119 1112 1112 1119 1436 1112 1436 1577 1577 1436 1434 1577 1434 1578 1578 1434 1448 1578 1448 1579 1579 1448 1449 1579 1449 1580 1580 1449 1507 1580 1507 1581 1581 1507 1509 1581 1509 1450 1450 1509 1511 1450 1511 1453 1453 1511 1513 1453 1513 1465 1465 1513 25 1465 25 24 1125 1127 1128 1128 1127 1582 1128 1582 1568 1568 1582 1583 1568 1583 1564 1564 1583 1584 1564 1584 1563 1563 1584 1585 1563 1585 1561 1561 1585 1586 1561 1586 1559 1559 1586 1485 1559 1485 1557 1557 1485 1481 1557 1481 1555 1555 1481 1053 1555 1053 1553 1553 1053 13 1553 13 12 1066 1374 1067 1067 1374 1587 1067 1587 1588 1588 1587 1589 1588 1589 1590 1590 1589 1591 1590 1591 1592 1592 1591 1593 1592 1593 1594 1594 1593 1595 1594 1595 1596 1596 1595 1597 1596 1597 1598 1598 1597 1599 1598 1599 1600 1600 1599 1601 1600 1601 1306 1306 1601 10 1306 10 9 1378 1067 1379 1379 1067 1588 1379 1588 1602 1602 1588 1590 1602 1590 1603 1603 1590 1592 1603 1592 1604 1604 1592 1594 1604 1594 1605 1605 1594 1596 1605 1596 1606 1606 1596 1598 1606 1598 1607 1607 1598 1600 1607 1600 1608 1608 1600 1306 1608 1306 1308 1308 1306 1307 1308 1307 1309 1366 1379 1367 1367 1379 1602 1367 1602 1609 1609 1602 1603 1609 1603 1610 1610 1603 1604 1610 1604 1611 1611 1604 1605 1611 1605 1612 1612 1605 1606 1612 1606 1326 1326 1606 1607 1326 1607 1328 1328 1607 1608 1328 1608 1497 1497 1608 1308 1497 1308 1317 1317 1308 1310 1317 1310 1315 1613 1290 1117 1117 1290 1288 1117 1288 1119 1119 1288 1300 1119 1300 1436 1436 1300 1432 1436 1432 1437 1159 1049 1167 1167 1049 1113 1167 1113 1165 1165 1113 1112 1165 1112 1614 1614 1112 1577 1614 1577 1615 1615 1577 1578 1615 1578 1616 1616 1578 1579 1616 1579 1617 1617 1579 1580 1617 1580 1618 1618 1580 1581 1618 1581 1619 1619 1581 1450 1619 1450 1456 1456 1450 1452 1456 1452 1457 1163 1165 1161 1161 1165 1614 1161 1614 1620 1620 1614 1615 1620 1615 1621 1621 1615 1616 1621 1616 1622 1622 1616 1617 1622 1617 1623 1623 1617 1618 1623 1618 1624 1624 1618 1619 1624 1619 1625 1625 1619 1456 1625 1456 1626 1626 1456 1459 1626 1459 1627 1627 1459 1462 1627 1462 1628 1628 1462 23 1628 23 22 1162 1161 1170 1170 1161 1620 1170 1620 1349 1349 1620 1621 1349 1621 1365 1365 1621 1622 1365 1622 1535 1535 1622 1623 1535 1623 1537 1537 1623 1624 1537 1624 1539 1539 1624 1625 1539 1625 1541 1541 1625 1626 1541 1626 1543 1543 1626 1627 1543 1627 1545 1545 1627 1628 1545 1628 1547 1547 1628 22 1547 22 21 1176 1178 1175 1175 1178 1629 1175 1629 1630 1630 1629 1631 1630 1631 1632 1632 1631 1633 1632 1633 1634 1634 1633 1635 1634 1635 1636 1636 1635 1476 1636 1476 1637 1637 1476 1478 1637 1478 1638 1173 1175 1188 1188 1175 1630 1188 1630 1639 1639 1630 1632 1639 1632 1640 1640 1632 1634 1640 1634 1641 1641 1634 1636 1641 1636 1642 1642 1636 1637 1642 1637 1061 1061 1637 1638 1061 1638 1059 124 1237 126 126 1237 1236 126 1236 128 128 1236 1643 128 1643 1224 1352 1354 1170 1170 1354 1644 1170 1644 1168 20 1055 1548 1548 1055 1645 1548 1645 1546 1546 1645 1646 1546 1646 1544 1544 1646 1647 1544 1647 1542 1542 1647 1648 1542 1648 1540 1540 1648 1649 1540 1649 1538 1538 1649 1650 1538 1650 1536 1536 1650 1651 1536 1651 1361 1361 1651 1652 1361 1652 1359 1359 1652 1653 1359 1653 1354 1354 1653 1654 1354 1654 1644 19 1054 1055 1055 1054 1500 1055 1500 1645 1645 1500 1498 1645 1498 1646 1646 1498 1473 1646 1473 1647 1647 1473 1476 1647 1476 1648 1648 1476 1635 1648 1635 1649 1649 1635 1633 1649 1633 1650 1650 1633 1631 1650 1631 1651 1651 1631 1629 1651 1629 1652 1652 1629 1178 1652 1178 1653 1653 1178 1180 1653 1180 1654 1345 1051 1655 1655 1051 1050 1655 1050 1085 1085 1050 1172 1085 1172 1083 1187 1656 1185 1185 1656 1048 1185 1048 1180 1180 1048 1047 1180 1047 1654 1654 1047 1103 1654 1103 1644 1644 1103 1100 1644 1100 1168 1168 1100 1098 1657 1045 1658 1658 1045 1044 1658 1044 1659 1659 1044 1048 1659 1048 1390 1390 1048 1656 1390 1656 1388 1388 1656 1187 1388 1187 1660 1660 1187 1188 1660 1188 1661 1661 1188 1639 1661 1639 1662 1662 1639 1640 1662 1640 1663 1663 1640 1641 1663 1641 1664 1664 1641 1642 1664 1642 1665 1665 1642 1061 1665 1061 1468 1468 1061 1060 1468 1060 1469 1386 1388 1384 1384 1388 1660 1384 1660 1137 1137 1660 1661 1137 1661 1132 1132 1661 1662 1132 1662 1127 1127 1662 1663 1127 1663 1582 1582 1663 1664 1582 1664 1583 1583 1664 1665 1583 1665 1584 1584 1665 1468 1584 1468 1585 1585 1468 1470 1585 1470 1586 1586 1470 1491 1586 1491 1485 1485 1491 1493 1485 1493 1483 1400 1666 1667 1297 1292 1295 1295 1292 1290 1295 1290 1668 1668 1290 1613 1668 1613 1669 1669 1613 1670 1669 1670 1671 1671 1670 1348 1671 1348 1333 1333 1348 1347 1333 1347 1334 1116 1672 1117 1117 1672 1121 1117 1121 1613 1613 1121 1049 1613 1049 1670 1670 1049 1051 1670 1051 1348 1348 1051 1345 1348 1345 1346 1346 1345 1344 1399 1064 1400 1400 1064 1063 1400 1063 1666 1666 1063 1398 1215 1209 120 120 1209 1211 120 1211 1576 1576 1211 1519 1576 1519 1673 1673 1519 1295 1673 1295 1674 1674 1295 1668 1674 1668 1675 1675 1668 1669 1675 1669 1676 1676 1669 1671 1676 1671 1677 1677 1671 1333 1677 1333 1041 1041 1333 1335 1041 1335 1336 1678 1142 1155 1155 1142 1143 1155 1143 1153 1679 1046 1680 1680 1046 1045 1680 1045 1681 1681 1045 1657 1681 1657 1682 1237 1667 1232 1232 1667 1666 1232 1666 1230 1230 1666 1398 1230 1398 1683 1683 1398 1684 1683 1684 1082 1082 1684 1685 1082 1685 1080 1686 1679 1687 1687 1679 1680 1687 1680 1688 1688 1680 1681 1688 1681 1382 1382 1681 1682 1382 1682 1380 1689 1043 1690 1690 1043 1042 1690 1042 1691 1691 1042 1342 1691 1342 1692 1692 1342 1345 1692 1345 1096 1096 1345 1655 1096 1655 1098 1098 1655 1085 1098 1085 1168 1168 1085 1084 1168 1084 1169 1693 1686 1694 1694 1686 1687 1694 1687 1695 1695 1687 1688 1695 1688 1696 1696 1688 1382 1696 1382 1697 1697 1382 1384 1697 1384 1698 1698 1384 1137 1698 1137 1088 1088 1137 1136 1088 1136 1086 1228 1230 130 130 1230 1683 130 1683 133 133 1683 1082 133 1082 146 146 1082 1081 146 1081 145 145 1081 1244 145 1244 143 1699 1689 1150 1150 1689 1690 1150 1690 1158 1158 1690 1691 1158 1691 1157 1157 1691 1692 1157 1692 1155 1155 1692 1096 1155 1096 1678 1678 1096 1095 1678 1095 1700 1701 1693 1702 1702 1693 1694 1702 1694 1703 1703 1694 1695 1703 1695 1704 1704 1695 1696 1704 1696 1705 1705 1696 1697 1705 1697 1706 1706 1697 1698 1706 1698 1707 1707 1698 1088 1707 1088 1708 1708 1088 1087 1708 1087 1709 1709 1087 1128 1709 1128 1710 1710 1128 1568 1710 1568 1573 1573 1568 1570 1573 1570 1571 1711 1712 1713 1714 1715 1716 1716 1715 1717 1071 1073 1326 1326 1073 1718 1326 1718 1612 1612 1718 1719 1612 1719 1611 1611 1719 1720 1611 1720 1610 1610 1720 1721 1610 1721 1609 1609 1721 1722 1609 1722 1367 1367 1722 1723 1367 1723 1369 1369 1723 1724 1369 1724 1725 1725 1724 1726 1725 1726 1727 1727 1726 1728 1727 1728 1729 1729 1728 1730 1729 1730 1731 1731 1730 1732 1731 1732 1733 1733 1732 1713 1733 1713 1734 1734 1713 1712 1734 1712 1735 1735 1736 1734 1734 1736 1737 1734 1737 1738 1738 1737 1739 1738 1739 1714 1717 1740 1716 1716 1740 1741 1716 1741 1713 1713 1741 1742 1713 1742 1711 141 143 1743 1743 143 1244 1743 1244 1744 1745 1746 1747 1747 1746 1748 1747 1748 1749 1150 1750 1751 1750 1150 1752 1752 1150 1148 1752 1148 1753 1751 1754 1150 1150 1754 1755 1150 1755 1699 1699 1755 1756 1699 1756 1757 1108 1758 1109 1109 1758 1759 1109 1759 1760 1760 1759 1761 1760 1761 1762 1762 1761 1763 1762 1763 1764 1764 1763 1765 1764 1765 1766 1766 1765 1767 1766 1767 1768 1768 1767 1769 1768 1769 1770 1191 1771 1197 1197 1771 1772 1197 1772 1196 1196 1772 1773 1196 1773 1774 1774 1773 1775 1774 1775 1776 1776 1775 1777 1776 1777 1778 1778 1777 1779 1778 1779 1780 1780 1779 1781 1780 1781 1782 1782 1781 1783 1782 1783 1784 1784 1783 1785 1784 1785 1786 1786 1785 1376 1786 1376 1370 1370 1376 1377 1370 1377 1371 1194 1196 1202 1202 1196 1774 1202 1774 1787 1787 1774 1776 1787 1776 1788 1788 1776 1778 1788 1778 1789 1789 1778 1780 1789 1780 1790 1790 1780 1782 1790 1782 1791 1791 1782 1784 1791 1784 1792 1792 1784 1786 1792 1786 1793 1793 1786 1370 1793 1370 1070 1070 1370 1372 1070 1372 1068 139 141 1794 1794 141 1743 1794 1743 1795 1795 1743 1744 1795 1744 1796 1246 1247 1244 1244 1247 1249 1244 1249 1744 1744 1249 1797 1744 1797 1796 1796 1797 1410 1796 1410 1798 1798 1410 1411 1062 1799 1398 1398 1799 1392 1398 1392 1684 1684 1392 1391 1684 1391 1800 1800 1391 1801 1800 1801 1802 1802 1801 1803 1802 1803 1804 1804 1803 1805 1804 1805 1806 1806 1805 1426 1806 1426 1807 1807 1426 1428 1807 1428 1808 1393 1394 1391 1391 1394 1396 1391 1396 1801 1801 1396 1809 1801 1809 1803 1803 1809 1810 1803 1810 1805 1805 1810 1811 1805 1811 1426 1426 1811 1422 1426 1422 1424 1424 1422 1423 1757 1745 1699 1699 1745 1747 1699 1747 1812 1812 1747 1256 1812 1256 1079 1079 1256 1255 1079 1255 1077 1252 1258 1253 1253 1258 1256 1253 1256 1813 1813 1256 1747 1813 1747 1148 1148 1747 1749 1148 1749 1753 1701 1814 1815 1769 1816 1817 1815 1816 1701 1701 1816 1769 1701 1769 1693 1693 1769 1767 1693 1767 1686 1686 1767 1765 1686 1765 1679 1679 1765 1763 1679 1763 1046 1046 1763 1761 1046 1761 1044 1044 1761 1759 1044 1759 1047 1047 1759 1758 1047 1758 1106 1818 1819 1770 1770 1819 1193 1770 1193 1276 1276 1193 1192 1276 1192 1208 1817 1820 1769 1769 1820 1821 1769 1821 1770 1770 1821 1822 1770 1822 1818 1819 1823 1193 1193 1823 1824 1193 1824 1701 1701 1824 1825 1701 1825 1814 1191 1193 1771 1771 1193 1701 1771 1701 1772 1772 1701 1702 1772 1702 1773 1773 1702 1703 1773 1703 1775 1775 1703 1704 1775 1704 1777 1777 1704 1705 1777 1705 1779 1779 1705 1706 1779 1706 1781 1781 1706 1707 1781 1707 1783 1783 1707 1708 1783 1708 1785 1785 1708 1709 1785 1709 1376 1376 1709 1710 1376 1710 1374 1374 1710 1573 1374 1573 1587 1587 1573 1550 1587 1550 1589 1589 1550 1562 1589 1562 1591 1591 1562 1560 1591 1560 1593 1593 1560 1558 1593 1558 1595 1595 1558 1556 1595 1556 1597 1597 1556 1554 1597 1554 1599 1599 1554 1052 1599 1052 1601 1601 1052 11 1601 11 10 1798 1826 1796 1796 1826 1412 1796 1412 1795 1795 1412 1414 1795 1414 1794 1794 1414 1827 1794 1827 139 139 1827 137 1407 1408 1405 1405 1408 1410 1405 1410 1828 1829 1828 1830 1830 1828 1410 1830 1410 1831 1831 1410 1797 1831 1797 1832 1832 1797 1249 1832 1249 1239 1239 1249 1250 1239 1250 1241 1807 1829 1806 1806 1829 1830 1806 1830 1804 1804 1830 1831 1804 1831 1802 1802 1831 1832 1802 1832 1800 1800 1832 1239 1800 1239 1684 1684 1239 1238 1684 1238 1685 1419 1420 1417 1417 1420 1422 1417 1422 1833 122 1576 1834 1834 1576 1673 1834 1673 1835 1835 1673 1674 1835 1674 1836 1836 1674 1675 1836 1675 1837 1837 1675 1676 1837 1676 1838 1838 1676 1677 1838 1677 1839 1839 1677 1041 1839 1041 1840 1840 1041 1043 1840 1043 1841 1841 1043 1689 1841 1689 1842 1842 1689 1699 1842 1699 1843 1843 1699 1812 1843 1812 1844 1844 1812 1079 1844 1079 170 170 1079 1273 170 1273 1275 1260 1257 1261 1261 1257 1253 1261 1253 1845 1700 1107 1678 1678 1107 1109 1678 1109 1142 1142 1109 1760 1142 1760 1846 1846 1760 1762 1846 1762 1847 1847 1762 1764 1847 1764 1848 1848 1764 1766 1848 1766 1849 1849 1766 1768 1849 1768 1850 1850 1768 1770 1850 1770 1851 1851 1770 1276 1851 1276 191 191 1276 1277 191 1277 1284 1415 1852 1416 1416 1852 152 1416 152 1414 1414 152 150 1414 150 1827 1827 150 148 1827 148 137 137 148 135 1808 1430 1807 1807 1430 161 1807 161 1829 1829 161 158 1829 158 1828 1828 158 156 1828 156 1405 1405 156 154 1405 154 1406 1406 154 152 1406 152 1853 1853 152 1852 1429 1418 162 162 1418 1417 162 1417 164 164 1417 1833 164 1833 166 168 166 1854 1854 166 1833 1854 1833 1855 1855 1833 1422 1855 1422 1856 1856 1422 1811 1856 1811 1857 1857 1811 1810 1857 1810 1858 1858 1810 1809 1858 1809 1859 1859 1809 1396 1859 1396 1402 1402 1396 1397 1402 1397 1404 170 168 1844 1844 168 1854 1844 1854 1843 1843 1854 1855 1843 1855 1842 1842 1855 1856 1842 1856 1841 1841 1856 1857 1841 1857 1840 1840 1857 1858 1840 1858 1839 1839 1858 1859 1839 1859 1838 1838 1859 1402 1838 1402 1837 1837 1402 1400 1837 1400 1836 1836 1400 1667 1836 1667 1835 1835 1667 1237 1835 1237 1834 1834 1237 124 1834 124 122 1264 1271 172 172 1271 1261 172 1261 174 174 1261 1845 174 1845 176 178 176 1860 1860 176 1845 1860 1845 1861 1861 1845 1253 1861 1253 1862 1862 1253 1813 1862 1813 1863 1863 1813 1148 1863 1148 1144 1144 1148 1147 1144 1147 1145 1146 1864 1144 1144 1864 1865 1144 1865 1863 1863 1865 1866 1863 1866 1862 1862 1866 1867 1862 1867 1861 1861 1867 1868 1861 1868 1860 1860 1868 1869 1860 1869 178 178 1869 180 191 180 1851 1851 180 1869 1851 1869 1850 1850 1869 1868 1850 1868 1849 1849 1868 1867 1849 1867 1848 1848 1867 1866 1848 1866 1847 1847 1866 1865 1847 1865 1846 1846 1865 1864 1846 1864 1142 1142 1864 1146 1142 1146 1140 1069 1369 1070 1070 1369 1725 1070 1725 1793 1793 1725 1727 1793 1727 1792 1792 1727 1729 1792 1729 1791 1791 1729 1731 1791 1731 1790 1790 1731 1733 1790 1733 1789 1789 1733 1734 1789 1734 1788 1788 1734 1738 1788 1738 1787 1787 1738 1870 1787 1870 1202 1202 1870 1871 1202 1871 1199 1199 1871 1872 1199 1872 1200 1200 1872 183 1200 183 185 1714 1716 1738 1738 1716 1873 1738 1873 1870 1870 1873 1874 1870 1874 1871 1871 1874 1875 1871 1875 1872 1872 1875 181 1872 181 183 1072 69 1073 1073 69 71 1073 71 1718 1718 71 73 1718 73 1719 1719 73 75 1719 75 1720 1720 75 78 1720 78 1721 1721 78 79 1721 79 1722 1722 79 81 1722 81 1723 1723 81 83 1723 83 1724 1724 83 85 1724 85 1726 1726 85 88 1726 88 1728 1728 88 90 1728 90 1730 1730 90 92 1730 92 1732 1732 92 94 1732 94 1713 1713 94 104 1713 104 1716 1716 104 103 1716 103 1873 1873 103 101 1873 101 1874 1874 101 99 1874 99 1875 1875 99 97 1875 97 181 726 238 1876 1876 238 237 1876 237 1877 1877 237 241 1877 241 240 240 250 1877 1877 250 249 1877 249 1878 1878 249 247 1878 247 1879 1879 247 245 1879 245 1880 1880 245 244 1880 244 1881 1881 244 228 1881 228 1882 1882 228 227 1882 227 1883 1883 227 225 1883 225 1884 1884 225 235 1884 235 1885 1885 235 234 1885 234 1886 1886 234 232 1886 232 1887 232 230 1887 1887 230 229 1887 229 1876 1876 229 725 1876 725 726 260 1888 262 262 1888 1889 262 1889 264 264 1889 1890 264 1890 266 266 1890 1891 266 1891 268 268 1891 1892 268 1892 270 270 1892 1893 270 1893 272 272 1893 1894 272 1894 274 274 1894 1895 274 1895 275 275 1895 1896 275 1896 255 255 1896 1897 255 1897 257 257 1897 1898 257 1898 259 259 1898 1899 259 1899 260 260 1899 1888 295 296 1900 1900 296 298 1900 298 1901 1901 298 278 1901 278 1902 1902 278 277 1902 277 1903 1903 277 279 1903 279 1904 1904 279 281 281 684 1904 1904 684 222 1904 222 1905 222 221 1905 1905 221 282 1905 282 1906 1906 282 285 1906 285 1907 1907 285 287 1907 287 1908 1908 287 289 1908 289 1909 1909 289 291 1909 291 1910 1910 291 761 1910 761 1911 1911 761 891 1911 891 1900 1900 891 294 1900 294 295 1912 1913 1914 1914 1913 1915 1916 1917 1918 1918 1917 1919 1918 1919 1920 1920 1919 1921 1920 1921 1922 1922 1921 1923 1922 1923 1912 1912 1923 1924 1912 1924 1913 1925 1926 1927 1926 1928 1927 1927 1928 1929 1927 1929 1916 1916 1929 1930 1916 1930 1917 1931 1932 1933 1933 1932 1934 1933 1934 1935 1935 1934 1936 1935 1936 1937 1937 1936 1938 1937 1938 1939 1939 1938 1940 1939 1940 1941 1941 1940 1942 1941 1942 1943 1943 1942 1944 1943 1944 1945 1945 1944 1925 1945 1925 1946 1946 1925 1927 1947 1948 1931 1931 1948 1949 1949 1950 1931 1931 1950 1951 1931 1951 1932 1931 1952 1947 1947 1952 1953 1947 1953 1954 1954 1953 1955 1954 1955 1956 1956 1955 1957 1956 1957 1958 1958 1957 1959 1957 1960 1959 1959 1960 1961 1959 1961 1962 1915 1963 1914 1914 1963 1964 1914 1964 1965 1965 1964 1966 1965 1966 1967 1967 1966 1959 1967 1959 1968 1968 1959 1962 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1947 1944 1942 1980 1981 1940 1982 1982 1940 1938 1983 1942 1984 1984 1942 1940 1984 1940 1985 1983 1986 1942 1942 1986 1987 1942 1987 1980 1987 1988 1980 1980 1988 1989 1980 1989 1990 1991 1992 1981 1981 1992 1993 1981 1993 1940 1940 1993 1994 1940 1994 1985 1944 1980 1925 1925 1980 1995 1925 1995 1926 1926 1995 1996 1926 1996 1928 1997 1998 1999 2000 2001 2002 1999 1924 1997 1997 1924 1923 1997 1923 1921 2003 2004 2005 2000 2002 2006 1999 2007 1924 1924 2007 2008 1924 2008 1913 2004 2009 2005 2005 2009 2010 2005 2010 1997 1997 2010 2011 1997 2011 1998 2008 2006 1913 1913 2006 2002 1913 2002 1915 1915 2002 2012 1915 2012 1963 1963 2012 2013 1963 2013 1964 1964 2013 2014 1964 2014 1966 1966 2014 2015 1966 2015 1959 1978 1947 2016 1979 2017 2018 2017 2019 2018 2018 2019 2020 2018 2020 2021 2021 2020 2022 2023 2024 1956 1956 2024 2025 1956 2025 1954 1954 2025 2026 1954 2026 1947 1947 2026 2027 1947 2027 2016 1979 2018 1947 1947 2018 2028 1947 2028 1948 1948 2028 2029 1948 2029 1949 1949 2029 2030 1949 2030 1950 2031 2032 2033 2033 2032 2034 2033 2034 2035 2036 2037 2038 2038 2037 2039 2037 2040 2039 2039 2040 2041 2039 2041 2042 2042 2041 2043 2042 2043 2031 2031 2043 2044 2031 2044 2032 2036 2038 2045 2045 2038 2046 2045 2046 1976 2047 1982 2048 2048 1982 2049 2048 2049 2050 2051 1981 2052 2052 1981 2053 2047 2054 1982 1982 2054 2055 1982 2055 1981 1981 2055 2056 1981 2056 2053 2050 2049 2057 2057 2049 2058 2057 2058 2059 2059 2060 2061 2061 2060 2051 2061 2051 2062 2062 2051 2052 2063 2064 2065 2065 2064 2066 2067 2068 2030 2067 2030 2063 2068 2069 2030 2030 2069 2070 2030 2070 1950 1950 2070 1951 2069 2071 2070 2070 2071 2072 2070 2072 1974 1974 2072 2073 1974 2073 1972 2074 2075 2066 2075 2074 1973 1973 2074 2076 1973 2076 1974 2077 2078 1969 1969 2078 2079 1969 2079 1970 2079 2080 1970 1970 2080 2081 1970 2081 2082 2082 2081 2083 2082 2083 2060 2060 2083 2084 2060 2084 2085 2086 2087 2088 2087 2089 2088 2088 2089 2090 2088 2090 2091 2090 2092 2091 2091 2092 2093 2091 2093 2094 2094 2093 2095 2094 2095 2031 2031 2095 2096 2097 2042 2098 2098 2042 2031 2098 2031 2099 2099 2031 2096 2063 2030 2064 2064 2030 2029 2064 2029 2100 2100 2029 2028 2100 2028 2101 2101 2028 2018 2101 2018 2102 2103 2104 2018 2018 2104 2105 2018 2105 2102 2102 2105 2106 2107 2108 2021 2021 2108 2109 2021 2109 2018 2018 2109 2110 2018 2110 2103 2106 2111 2102 2102 2111 2112 2102 2112 2113 2112 2114 2113 2113 2114 2115 2113 2115 2107 2107 2021 2113 2113 2021 2116 2113 2116 2117 2117 2116 2118 2117 2118 2119 2066 2064 2074 2074 2064 2100 2074 2100 2120 2120 2100 2101 2120 2101 2121 2121 2101 2102 2121 2102 2033 2033 2102 2113 2033 2113 2031 2031 2113 2117 2031 2117 2094 2094 2117 2119 2094 2119 2091 2035 1975 2033 2033 1975 1977 2033 1977 2121 2121 1977 2122 2121 2122 2120 2120 2122 2123 2120 2123 2074 2074 2123 2124 2074 2124 2076 1976 2046 1977 1977 2046 2058 1977 2058 2122 2122 2058 2049 2122 2049 2123 2123 2049 1982 2123 1982 2124 2124 1982 1938 2124 1938 2076 2076 1938 1936 2076 1936 1974 1974 1936 1934 1974 1934 2070 2070 1934 1932 2070 1932 1951 2059 2058 2060 2060 2058 2046 2060 2046 2082 2082 2046 2038 2082 2038 1970 1970 2038 2039 1970 2039 1971 2125 2126 2127 2128 2129 2039 2127 2130 2125 2125 2130 2131 2125 2131 2132 2132 2131 2133 2132 2133 2134 2134 2128 2132 2132 2128 2039 2132 2039 2135 2135 2039 2042 2135 2042 2136 2136 2042 2097 2129 2137 2039 2039 2137 2138 2039 2138 1971 1971 2138 2139 1971 2139 2140 2022 2023 2021 2021 2023 1956 2021 1956 2116 2116 1956 1958 2116 1958 2118 2118 1958 1959 2118 1959 2119 2119 1959 2015 2119 2015 2091 2091 2015 2014 2091 2014 2088 2088 2014 2013 2088 2013 2141 2141 2013 2012 2141 2012 2005 2005 2012 2002 2005 2002 2003 2003 2002 2001 2085 1996 2060 2060 1996 1995 2060 1995 2051 2051 1995 1980 2051 1980 1981 1981 1980 1990 1981 1990 1991 2085 2142 1996 1996 2142 2143 1996 2143 1928 1928 2143 2144 1928 2144 1929 1929 2144 2145 1929 2145 1930 1930 2145 2077 1930 2077 1917 1917 2077 1969 1917 1969 2146 2146 1969 1971 2140 2126 1971 1971 2126 2125 1971 2125 2146 2146 2125 2147 2146 2147 1917 1917 2147 1919 2136 2086 2135 2135 2086 2088 2135 2088 2132 2132 2088 2141 2132 2141 2125 2125 2141 2005 2125 2005 2147 2147 2005 1997 2147 1997 1919 1919 1997 1921 2148 2149 2150 1877 2151 1876 1910 1911 2150 1946 2152 1945 1922 2153 1920 1961 1960 2154 1953 2155 2154 2156 2157 1953 1935 1884 1885 1884 1935 1883 1883 1935 1882 1882 1935 1937 1882 1937 1881 2158 1931 1933 2159 1952 2160 2160 1952 1931 2160 1931 2161 2161 1931 2158 2155 1953 2162 2162 1953 2157 2162 2157 2163 2163 2164 2162 2162 2164 2165 2162 2165 2159 2159 2165 2166 2166 2167 2159 2159 2167 2168 2159 2168 1952 1952 2168 2169 2169 2170 1952 1952 2170 2171 1952 2171 1953 1953 2171 2172 1953 2172 2156 1960 1957 2154 2154 1957 1955 2154 1955 1953 2173 1914 1965 2174 2175 2173 1912 1914 2176 2176 1914 2173 2176 2173 2177 2177 2173 2175 2176 2178 1912 1912 2178 2179 1912 2179 1922 1922 2179 2180 1922 2180 2153 2153 2180 2181 2153 2181 2182 2182 2183 2184 2184 2183 2185 2184 2185 2186 2186 2174 2184 2184 2174 2173 2184 2173 2187 2187 2173 1965 2187 1965 2188 2188 1965 1967 2188 1967 2189 2189 1967 1968 2189 1968 2190 2182 2184 2153 2153 2184 2191 2153 2191 1920 1920 2191 1898 1920 1898 1918 1918 1898 1897 1918 1897 1916 1897 1896 1916 1916 1896 1895 1916 1895 1927 1927 1895 1946 2192 2193 2194 1941 2195 2196 2193 2197 2194 2194 2197 2198 2194 2198 2152 1943 2199 1941 1941 2199 2200 1941 2200 2195 2198 2201 2152 2152 2201 2202 2152 2202 1945 1945 2202 2203 1945 2203 1943 1943 2203 2204 1943 2204 2199 2205 1939 2206 2206 1939 1941 2207 2208 1902 1902 2208 1901 1901 2208 2209 1901 2209 1900 1900 2209 1911 1911 2209 2210 1911 2210 2150 1902 1903 2207 2207 1903 1904 2207 1904 2211 2211 1904 1905 2211 1905 2190 2190 1905 1906 1892 2212 1893 1893 2212 2213 1893 2213 1894 1889 1888 2214 2214 1888 1899 2215 1891 2216 2216 1891 1890 2216 1890 2217 2151 1877 2218 2218 1877 1878 2218 1878 1879 1887 2219 1886 1886 2219 1885 2220 2221 2222 2222 2221 2223 2222 2223 2224 2224 2223 2225 2225 2223 2226 2225 2226 2227 2228 2229 2230 2230 2229 2231 2230 2231 2232 2232 2231 2233 2232 2233 2234 2235 2236 2194 2237 2238 2212 1895 1894 1946 1946 1894 2213 1946 2213 2152 2152 2213 2212 2152 2212 2194 2194 2212 2238 2194 2238 2235 2196 2192 1941 1941 2192 2194 1941 2194 2206 2206 2194 2236 2206 2236 2239 2240 2241 2242 2242 2241 2243 2242 2243 2212 2212 2243 2244 2212 2244 2237 2239 2245 2206 2206 2245 2246 2206 2246 2247 2221 2215 2223 2223 2215 2216 2223 2216 2226 2226 2216 2217 2226 2217 2210 2248 2249 2214 2214 2249 2250 2214 2250 2251 2184 2252 2253 1890 1889 2217 2217 1889 2214 2217 2214 2210 2210 2214 2251 2210 2251 2254 2253 2248 2184 2184 2248 2214 2184 2214 2191 2191 2214 1899 2191 1899 1898 2254 2255 2210 2210 2255 2256 2210 2256 2150 2150 2256 2257 2150 2257 2148 1906 1907 2190 2190 1907 1908 2190 1908 2189 2189 1908 1909 2189 1909 2188 2188 1909 1910 2188 1910 2187 2187 1910 2150 2187 2150 2184 2184 2150 2149 2184 2149 2252 1881 1937 1880 1880 1937 1939 1880 1939 1879 1879 1939 2205 1879 2205 2218 2218 2205 2206 2218 2206 2242 2242 2206 2247 2242 2247 2240 1876 2151 2258 2258 2151 2218 2258 2218 2220 2220 2218 2242 2220 2242 2221 2221 2242 2212 2221 2212 2215 2215 2212 1892 2215 1892 1891 1887 1876 2219 2219 1876 2258 2219 2258 2259 2259 2258 2260 2230 2261 2262 2222 2263 2220 2220 2263 2228 2220 2228 2258 2258 2228 2230 2258 2230 2260 2260 2230 2262 2260 2262 2264 2265 2232 2266 2266 2232 2267 2266 2267 2268 2265 2269 2232 2232 2269 2270 2232 2270 2230 2230 2270 2271 2230 2271 2261 2264 2272 2260 2260 2272 2273 2260 2273 2267 2267 2273 2274 2267 2274 2268 2227 2226 2275 2275 2226 2210 2275 2210 2276 2276 2210 2209 2276 2209 2234 2234 2209 2208 2234 2208 2232 2232 2208 2207 2232 2207 2267 1968 1962 2190 2190 1962 1961 2190 1961 2211 2211 1961 2154 2211 2154 2207 2207 2154 2155 2207 2155 2267 2267 2155 2162 2267 2162 2260 2260 2162 2159 2260 2159 2259 2259 2159 2160 2259 2160 2219 2219 2160 2161 2219 2161 1885 1885 2161 2158 1885 2158 1935 1935 2158 1933 2263 1976 2228 2228 1976 1975 2228 1975 2229 2229 1975 2035 2229 2035 2231 2231 2035 2034 2231 2034 2233 2233 2034 2032 2233 2032 2234 2234 2032 2044 2234 2044 2276 2276 2044 2043 2276 2043 2275 2275 2043 2041 2275 2041 2227 2227 2041 2040 2227 2040 2225 2225 2040 2037 2225 2037 2224 2224 2037 2036 2224 2036 2222 2222 2036 2045 2222 2045 2263 2263 2045 1976 2200 1984 2195 2195 1984 1985 2195 1985 2196 2196 1985 1994 2196 1994 2192 2192 1994 1993 2192 1993 2193 2193 1993 1992 2193 1992 2197 2197 1992 1991 2197 1991 2198 2198 1991 1990 2198 1990 2201 2201 1990 1989 2201 1989 2202 2202 1989 1988 2202 1988 2203 2203 1988 1987 2203 1987 2204 2204 1987 1986 2204 1986 2199 2199 1986 1983 2199 1983 2200 2200 1983 1984 2183 2010 2185 2185 2010 2009 2185 2009 2186 2186 2009 2004 2186 2004 2174 2174 2004 2003 2174 2003 2175 2175 2003 2001 2175 2001 2177 2177 2001 2000 2177 2000 2176 2176 2000 2006 2176 2006 2178 2178 2006 2008 2178 2008 2179 2179 2008 2007 2179 2007 2180 2180 2007 1999 2180 1999 2181 2181 1999 1998 2181 1998 2182 2182 1998 2011 2182 2011 2183 2183 2011 2010 2262 2105 2264 2264 2105 2104 2264 2104 2272 2272 2104 2103 2272 2103 2273 2273 2103 2110 2273 2110 2274 2274 2110 2109 2274 2109 2268 2268 2109 2108 2268 2108 2266 2266 2108 2107 2266 2107 2265 2265 2107 2115 2265 2115 2269 2269 2115 2114 2269 2114 2270 2270 2114 2112 2270 2112 2271 2271 2112 2111 2271 2111 2261 2261 2111 2106 2261 2106 2262 2262 2106 2105 2239 2055 2245 2245 2055 2054 2245 2054 2246 2246 2054 2047 2246 2047 2247 2247 2047 2048 2247 2048 2240 2240 2048 2050 2240 2050 2241 2241 2050 2057 2241 2057 2243 2243 2057 2059 2243 2059 2244 2244 2059 2061 2244 2061 2237 2237 2061 2062 2237 2062 2238 2238 2062 2052 2238 2052 2235 2235 2052 2053 2235 2053 2236 2236 2053 2056 2236 2056 2239 2239 2056 2055 2251 2138 2254 2254 2138 2137 2254 2137 2255 2255 2137 2129 2255 2129 2256 2256 2129 2128 2256 2128 2257 2257 2128 2134 2257 2134 2148 2148 2134 2133 2148 2133 2149 2149 2133 2131 2149 2131 2252 2252 2131 2130 2252 2130 2253 2253 2130 2127 2253 2127 2248 2248 2127 2126 2248 2126 2249 2249 2126 2140 2249 2140 2250 2250 2140 2139 2250 2139 2251 2251 2139 2138 2168 1979 2169 2169 1979 1978 2169 1978 2170 2170 1978 2016 2170 2016 2171 2171 2016 2027 2171 2027 2172 2172 2027 2026 2172 2026 2156 2156 2026 2025 2156 2025 2157 2157 2025 2024 2157 2024 2163 2163 2024 2023 2163 2023 2164 2164 2023 2022 2164 2022 2165 2165 2022 2020 2165 2020 2166 2166 2020 2019 2166 2019 2167 2167 2019 2017 2167 2017 2168 2168 2017 1979 1097 301 1095 1095 301 312 1095 312 1700 1700 312 311 1700 311 1107 1107 311 310 1107 310 1108 1108 310 309 1108 309 1758 1758 309 308 1758 308 1106 1106 308 749 1106 749 1105 1105 749 314 1105 314 1104 1104 314 313 1104 313 1102 1102 313 305 1102 305 1101 1101 305 304 1101 304 1099 1099 304 302 1099 302 1097 1097 302 301 1116 317 1672 1672 317 316 1672 316 1121 1121 316 373 1121 373 1122 1122 373 219 1122 219 1123 1123 219 218 1123 218 1124 1124 218 328 1124 328 1114 1114 328 327 1114 327 1115 1115 327 326 1115 326 1110 1110 326 324 1110 324 1111 1111 324 323 1111 323 1120 1120 323 322 1120 322 1118 1118 322 321 1118 321 1116 1116 321 317 1131 339 1139 1139 339 338 1139 338 1138 1138 338 332 1138 332 1136 1136 332 330 1136 330 1086 1086 330 767 1086 767 1133 1133 767 971 1133 971 1134 1134 971 337 1134 337 1135 1135 337 336 1135 336 1129 1129 336 334 1129 334 1125 1125 334 333 1125 333 1126 1126 333 342 1126 342 1130 1130 342 341 1130 341 1131 1131 341 339 1156 354 1152 1152 354 352 1152 352 1151 1151 352 359 1151 359 1149 1149 359 358 1149 358 1147 1147 358 357 1147 357 1145 1145 357 350 1145 350 1146 1146 350 348 1146 348 1140 1140 348 346 1140 346 1141 1141 346 344 1141 344 1143 1143 344 343 1143 343 1153 1153 343 356 1153 356 1154 1154 356 355 1154 355 1156 1156 355 354 1159 360 1160 1160 360 371 1160 371 1171 1171 371 370 1171 370 1172 1172 370 363 1172 363 1083 1083 363 362 1083 362 1084 1084 362 786 1084 786 1169 1169 786 375 1169 375 1162 1162 375 374 1162 374 1163 1163 374 368 1163 368 1164 1164 368 366 1164 366 1166 1166 366 365 1166 365 1167 1167 365 361 1167 361 1159 1159 361 360 1181 376 1182 1182 376 385 1182 385 1183 1183 385 384 1183 384 1184 1184 384 383 1184 383 1186 1186 383 392 1186 392 1190 1190 392 391 1190 391 1189 1189 391 389 1189 389 1173 1173 389 387 1173 387 1174 1174 387 386 1174 386 1176 1176 386 379 1176 379 1177 1177 379 378 1177 378 1179 1179 378 377 1179 377 1181 1181 377 376 1755 660 1756 1756 660 663 1756 663 1757 1757 663 662 1757 662 1745 1745 662 661 1745 661 1746 1746 661 664 1746 664 1748 1748 664 676 1748 676 1749 1749 676 675 1749 675 1753 1753 675 674 1753 674 1752 1752 674 673 1752 673 1750 1750 673 672 1750 672 1751 1751 672 671 1751 671 1754 1754 671 670 1754 670 1755 1755 670 660 2277 2278 1 1 2278 3 33 34 2279 1 0 2277 2277 0 6 2277 6 2279 2279 6 16 2279 16 33 2280 2279 32 32 2279 34 2 3 2278 32 31 2280 2280 31 37 2280 37 2278 2278 37 45 2278 45 2 2279 2280 2277 2277 2280 2278 217 37 105 105 37 31 35 37 395 395 37 217 16 1090 33 33 1090 106 1090 16 1518 1518 16 30 1092 6 63 63 6 0 4 6 1091 1091 6 1092 45 398 2 2 398 64 398 45 396 396 45 62 1192 401 1208 1208 401 400 1208 400 1203 1203 400 649 1203 649 1204 1204 649 405 1204 405 1206 1206 405 410 1206 410 1207 1207 410 409 1207 409 1198 1198 409 407 1198 407 1201 1201 407 406 1201 406 1194 1194 406 214 1194 214 1195 1195 214 412 1195 412 1197 1197 412 411 1197 411 1191 1191 411 811 1191 811 1192 1192 811 401 1567 870 1569 1569 870 869 1569 869 1570 1570 869 868 1570 868 1571 1571 868 856 1571 856 1572 1572 856 855 1572 855 1574 1574 855 854 1574 854 1575 1575 854 852 1575 852 1552 1552 852 851 1552 851 1551 1551 851 850 1551 850 1549 1549 850 849 1549 849 1565 1565 849 847 1565 847 1566 1566 847 846 1566 846 1567 1567 846 870 1214 424 1215 1215 424 423 1215 423 1209 1209 423 422 1209 422 1210 1210 422 421 1210 421 1216 1216 421 419 1216 419 1217 1217 419 418 1217 418 1219 1219 418 414 1219 414 1220 1220 414 416 1220 416 1221 1221 416 417 1221 417 1222 1222 417 934 1222 934 1212 1212 934 933 1212 933 1213 1213 933 425 1213 425 1214 1214 425 424 1225 433 1226 1226 433 432 1226 432 1227 1227 432 431 1227 431 1228 1228 431 430 1228 430 1229 1229 430 439 1229 439 1231 1231 439 438 1231 438 1233 1233 438 436 1233 436 1234 1234 436 435 1234 435 1235 1235 435 429 1235 429 1236 1236 429 427 1236 427 1643 1643 427 826 1643 826 1224 1224 826 434 1224 434 1225 1225 434 433 1243 714 1245 1245 714 713 1245 713 1246 1246 713 712 1246 712 1247 1247 712 711 1247 711 1248 1248 711 704 1248 704 1250 1250 704 703 1250 703 1241 1241 703 701 1241 701 1240 1240 701 700 1240 700 1238 1238 700 696 1238 696 1685 1685 696 695 1685 695 1080 1080 695 698 1080 698 1242 1242 698 697 1242 697 1243 1243 697 714 1077 442 1078 1078 442 441 1078 441 1265 1265 441 464 1265 464 1268 1268 464 465 1268 465 1259 1259 465 463 1259 463 1260 1260 463 452 1260 452 1257 1257 452 451 1257 451 1251 1251 451 449 1251 449 1252 1252 449 447 1252 447 1258 1258 447 446 1258 446 1254 1254 446 445 1254 445 1255 1255 445 444 1255 444 1077 1077 444 442 1273 457 1275 1275 457 456 1275 456 1274 1274 456 455 1274 455 1262 1262 455 460 1262 460 1263 1263 460 454 1263 454 1264 1264 454 453 1264 453 1271 1271 453 461 1271 461 1270 1270 461 462 1270 462 1269 1269 462 467 1269 467 1267 1267 467 466 1267 466 1266 1266 466 459 1266 459 1272 1272 459 458 1272 458 1273 1273 458 457 1277 468 1284 1284 468 469 1284 469 1285 1285 469 472 1285 472 1286 1286 472 471 1286 471 1279 1279 471 477 1279 477 1280 1280 477 476 1280 476 1281 1281 476 475 1281 475 1282 1282 475 474 1282 474 1283 1283 474 473 1283 473 1278 1278 473 479 1278 479 1074 1074 479 478 1074 478 1075 1075 478 470 1075 470 1277 1277 470 468 1294 487 1296 1296 487 486 1296 486 1297 1297 486 484 1297 484 1292 1292 484 483 1292 483 1291 1291 483 482 1291 482 1289 1289 482 481 1289 481 1287 1287 481 784 1287 784 1298 1298 784 785 1298 785 1299 1299 785 493 1299 493 1301 1301 493 494 1301 494 1303 1303 494 490 1303 490 1304 1304 490 489 1304 489 1294 1294 489 487 1495 950 1496 1496 950 949 1496 949 1492 1492 949 948 1492 948 1493 1493 948 947 1493 947 1483 1483 947 946 1483 946 1484 1484 946 958 1484 958 1486 1486 958 957 1486 957 1487 1487 957 956 1487 956 1488 1488 956 952 1488 952 1489 1489 952 954 1489 954 1490 1490 954 955 1490 955 1494 1494 955 951 1494 951 1495 1495 951 950 1305 496 1307 1307 496 507 1307 507 1309 1309 507 505 1309 505 1310 1310 505 504 1310 504 1315 1315 504 499 1315 499 1316 1316 499 498 1316 498 1318 1318 498 510 1318 510 1319 1319 510 509 1319 509 1311 1311 509 508 1311 508 1312 1312 508 502 1312 502 1313 1313 502 501 1313 501 1314 1314 501 497 1314 497 1305 1305 497 496 1330 518 1324 1324 518 517 1324 517 1325 1325 517 515 1325 515 1071 1071 515 514 1071 514 1072 1072 514 919 1072 919 1331 1331 919 522 1331 522 1332 1332 522 521 1332 521 1320 1320 521 523 1320 523 1321 1321 523 524 1321 524 1323 1323 524 512 1323 512 1327 1327 512 511 1327 511 1329 1329 511 520 1329 520 1330 1330 520 518 2063 1341 2067 2067 1341 1340 2067 1340 2068 2068 1340 1339 2068 1339 2069 2069 1339 1338 2069 1338 2071 2071 1338 1337 2071 1337 2072 2072 1337 1336 2072 1336 2073 2073 1336 1335 2073 1335 1972 1972 1335 1334 1972 1334 1973 1973 1334 1347 1973 1347 2075 2075 1347 1346 2075 1346 2066 2066 1346 1344 2066 1344 2065 2065 1344 1343 2065 1343 2063 2063 1343 1341 2079 1358 2080 2080 1358 1357 2080 1357 2081 2081 1357 1355 2081 1355 2083 2083 1355 1353 2083 1353 2084 2084 1353 1352 2084 1352 2085 2085 1352 1356 2085 1356 2142 2142 1356 1351 2142 1351 2143 2143 1351 1350 2143 1350 2144 2144 1350 1364 2144 1364 2145 2145 1364 1363 2145 1363 2077 2077 1363 1362 2077 1362 2078 2078 1362 1360 2078 1360 2079 2079 1360 1358 2090 1383 2092 2092 1383 1381 2092 1381 2093 2093 1381 1380 2093 1380 2095 2095 1380 1682 2095 1682 2096 2096 1682 1657 2096 1657 2099 2099 1657 1658 2099 1658 2098 2098 1658 1659 2098 1659 2097 2097 1659 1390 2097 1390 2136 2136 1390 1389 2136 1389 2086 2086 1389 1387 2086 1387 2087 2087 1387 1386 2087 1386 2089 2089 1386 1385 2089 1385 2090 2090 1385 1383 646 1825 647 647 1825 1824 647 1824 648 648 1824 1823 648 1823 650 650 1823 1819 650 1819 651 651 1819 1818 651 1818 652 652 1818 1822 652 1822 653 653 1822 1821 653 1821 640 640 1821 1820 640 1820 641 641 1820 1817 641 1817 642 642 1817 1816 642 1816 643 643 1816 1815 643 1815 645 645 1815 1814 645 1814 646 646 1814 1825 744 1741 745 745 1741 1740 745 1740 733 733 1740 1717 733 1717 734 734 1717 1715 734 1715 746 746 1715 1714 746 1714 747 747 1714 1739 747 1739 748 748 1739 1737 748 1737 727 727 1737 1736 727 1736 728 728 1736 1735 728 1735 731 731 1735 1712 731 1712 732 732 1712 1711 732 1711 743 743 1711 1742 743 1742 744 744 1742 1741 534 1368 820 820 1368 1069 820 1069 530 530 1069 1068 530 1068 531 531 1068 1372 531 1372 525 525 1372 1371 525 1371 526 526 1371 1377 526 1377 528 528 1377 1375 528 1375 211 211 1375 1373 211 1373 212 212 1373 1066 212 1066 537 537 1066 1065 537 1065 538 538 1065 1378 538 1378 533 533 1378 1366 533 1366 534 534 1366 1368 550 1404 544 544 1404 1397 544 1397 545 545 1397 1395 545 1395 548 548 1395 1394 548 1394 549 549 1394 1393 549 1393 542 542 1393 1392 542 1392 540 540 1392 1799 540 1799 210 210 1799 1062 210 1062 208 208 1062 1064 208 1064 556 556 1064 1399 556 1399 554 554 1399 1401 554 1401 552 552 1401 1403 552 1403 550 550 1403 1404 569 1408 570 570 1408 1407 570 1407 560 560 1407 1406 560 1406 559 559 1406 1853 559 1853 558 558 1853 1852 558 1852 638 638 1852 1415 638 1415 715 715 1415 1413 715 1413 563 563 1413 1412 563 1412 564 564 1412 1826 564 1826 565 565 1826 1798 565 1798 566 566 1798 1411 566 1411 568 568 1411 1409 568 1409 569 569 1409 1408 582 1420 584 584 1420 1419 584 1419 585 585 1419 1418 585 1418 586 586 1418 1429 586 1429 574 574 1429 1430 574 1430 575 575 1430 1808 575 1808 577 577 1808 1428 577 1428 579 579 1428 1427 579 1427 580 580 1427 1425 580 1425 572 572 1425 1424 572 1424 573 573 1424 1423 573 1423 581 581 1423 1421 581 1421 582 582 1421 1420 597 1433 599 599 1433 1435 599 1435 600 600 1435 1437 600 1437 587 587 1437 1432 587 1432 588 588 1432 1431 588 1431 589 589 1431 1446 589 1446 601 601 1446 1445 601 1445 603 603 1445 1443 603 1443 590 590 1443 1441 590 1441 591 591 1441 1439 591 1439 593 593 1439 1438 593 1438 595 595 1438 1447 595 1447 597 597 1447 1433 607 1460 608 608 1460 1458 608 1458 610 610 1458 1457 610 1457 611 611 1457 1452 611 1452 612 612 1452 1451 612 1451 613 613 1451 1455 613 1455 615 615 1455 1454 615 1454 616 616 1454 1467 616 1467 620 620 1467 1466 620 1466 619 619 1466 1464 619 1464 604 604 1464 1463 604 1463 605 605 1463 1461 605 1461 607 607 1461 1460 630 1469 890 890 1469 1060 890 1060 884 884 1060 1059 884 1059 624 624 1059 1638 624 1638 625 625 1638 1478 625 1478 621 621 1478 1477 621 1477 622 622 1477 1475 622 1475 632 632 1475 1474 632 1474 633 633 1474 1472 633 1472 635 635 1472 1057 635 1057 636 636 1057 1056 636 1056 628 628 1056 1471 628 1471 630 630 1471 1469))
                   (list :vertices (let ((mat (make-matrix 2281 3))) (fvector-replace (array-entity mat) #f(-84.6 20.0 -64.3 -85.3 20.0 -64.3 -84.6 -25.0 -64.3 -85.3 -25.0 -64.3 -80.6 -0.0 -64.3 -64.4 -0.0 -64.3 -80.6 20.0 -64.3 -58.1 -0.0 -64.3 -52.9 -0.0 -64.3 -51.9 -0.0 -64.3 -50.9 -0.0 -64.3 -48.7 -0.0 -64.3 -41.8 -0.0 -64.3 -36.5 -0.0 -64.3 -33.7 -0.0 -64.3 -33.2 -0.0 -64.3 31.4 20.0 -64.3 -32.3 -0.0 -64.3 -28.1 -0.0 -64.3 -26.4 -0.0 -64.3 -23.0 -0.0 -64.3 -20.1 -0.0 -64.3 -19.0 -0.0 -64.3 -16.5 -0.0 -64.3 -12.7 -0.0 -64.3 -7.0 -0.0 -64.3 -0.5 -0.0 -64.3 3.9 -0.0 -64.3 8.0 -0.0 -64.3 16.8 -0.0 -64.3 31.4 -0.0 -64.3 35.4 -25.0 -64.3 35.6 -25.0 -64.3 35.4 20.0 -64.3 35.6 20.0 -64.3 31.4 -5.0 -64.3 16.8 -5.0 -64.3 31.4 -25.0 -64.3 8.0 -5.0 -64.3 3.9 -5.0 -64.3 1.9 -5.0 -64.3 -7.0 -5.0 -64.3 -9.4 -5.0 -64.3 -12.7 -5.0 -64.3 -19.0 -5.0 -64.3 -80.6 -25.0 -64.3 -19.3 -5.0 -64.3 -21.1 -5.0 -64.3 -26.4 -5.0 -64.3 -29.5 -5.0 -64.3 -32.3 -5.0 -64.3 -33.2 -5.0 -64.3 -33.7 -5.0 -64.3 -36.5 -5.0 -64.3 -39.9 -5.0 -64.3 -41.8 -5.0 -64.3 -48.7 -5.0 -64.3 -50.9 -5.0 -64.3 -51.9 -5.0 -64.3 -52.9 -5.0 -64.3 -58.1 -5.0 -64.3 -64.4 -5.0 -64.3 -80.6 -5.0 -64.3 -84.6 -0.0 -43.3 -84.6 -5.0 -43.3 -84.6 -0.0 -42.9 -84.6 -5.0 -42.9 -84.6 -0.0 -37.8 -84.6 -5.0 -37.8 -84.6 -0.0 -32.9 -84.6 -5.0 -32.9 -84.6 -0.0 -28.0 -84.6 -5.0 -28.0 -84.6 -0.0 -24.9 -84.6 -5.0 -24.9 -84.6 -0.0 -24.6 -84.6 -5.0 -24.6 -84.6 -5.0 -21.8 -84.6 -0.0 -18.6 -84.6 -0.0 -14.0 -84.6 -5.0 -14.0 -84.6 -0.0 -11.2 -84.6 -5.0 -10.9 -84.6 -0.0 -6.6 -84.6 -5.0 -6.6 -84.6 -0.0 -6.4 -84.6 -5.0 -6.4 -84.6 -5.0 -4.1 -84.6 -0.0 0.3 -84.6 -5.0 -0.3 -84.6 -0.0 1.9 -84.6 -5.0 1.9 -84.6 -0.0 4.0 -84.6 -5.0 4.0 -84.6 -0.0 4.5 -84.6 -5.0 8.4 -84.6 -5.0 55.7 -84.6 -0.0 55.7 -84.6 -5.0 24.5 -84.6 -0.0 24.5 -84.6 -5.0 22.5 -84.6 -0.0 22.5 -84.6 -5.0 14.2 -84.6 -0.0 14.2 -84.6 -0.0 8.4 35.4 -5.0 -43.3 35.4 -0.0 -43.3 35.4 -5.0 -42.9 35.4 -0.0 -42.9 35.4 -5.0 -37.8 35.4 -0.0 -37.8 35.4 -5.0 -32.9 35.4 -0.0 -32.9 35.4 -5.0 -28.0 35.4 -0.0 -28.0 35.4 -5.0 -24.9 35.4 -0.0 -24.9 35.4 -5.0 -24.6 35.4 -0.0 -24.6 35.4 -5.0 -21.8 35.4 -0.0 -18.6 35.4 -5.0 -14.0 35.4 -0.0 -14.0 35.4 -5.0 -10.9 35.4 -0.0 -11.2 35.4 -5.0 -6.6 35.4 -0.0 -6.6 35.4 -5.0 -6.4 35.4 -0.0 -6.4 35.4 -5.0 -4.1 35.4 -0.0 0.3 35.4 -5.0 -0.3 35.4 -5.0 1.9 35.4 -0.0 1.9 35.4 -5.0 4.0 35.4 -0.0 55.7 35.4 -5.0 55.7 35.4 -0.0 24.5 35.4 -5.0 24.5 35.4 -0.0 22.5 35.4 -5.0 22.5 35.4 -0.0 14.2 35.4 -5.0 14.2 35.4 -0.0 8.4 35.4 -5.0 8.4 35.4 -0.0 4.5 35.4 -0.0 4.0 16.8 -5.0 55.7 16.8 -0.0 55.7 8.0 -5.0 55.7 8.0 -0.0 55.7 3.9 -5.0 55.7 3.9 -0.0 55.7 1.9 -5.0 55.7 -0.5 -0.0 55.7 -7.0 -5.0 55.7 -7.0 -0.0 55.7 -9.4 -5.0 55.7 -12.7 -0.0 55.7 -12.7 -5.0 55.7 -19.0 -5.0 55.7 -16.5 -0.0 55.7 -19.0 -0.0 55.7 -19.3 -5.0 55.7 -20.1 -0.0 55.7 -21.1 -5.0 55.7 -23.0 -0.0 55.7 -26.4 -5.0 55.7 -26.4 -0.0 55.7 -29.5 -5.0 55.7 -28.1 -0.0 55.7 -32.3 -5.0 55.7 -32.3 -0.0 55.7 -33.2 -5.0 55.7 -33.2 -0.0 55.7 -33.7 -5.0 55.7 -33.7 -0.0 55.7 -36.5 -5.0 55.7 -36.5 -0.0 55.7 -39.9 -5.0 55.7 -41.8 -0.0 55.7 -64.4 -0.0 55.7 -64.4 -5.0 55.7 -58.1 -0.0 55.7 -58.1 -5.0 55.7 -52.9 -0.0 55.7 -52.9 -5.0 55.7 -51.9 -0.0 55.7 -51.9 -5.0 55.7 -50.9 -0.0 55.7 -50.9 -5.0 55.7 -48.7 -0.0 55.7 -48.7 -5.0 55.7 -41.8 -5.0 55.7 -12.7 -5.0 -37.8 -12.7 -5.0 -32.9 -19.0 -5.0 -32.9 -12.7 -5.0 -28.0 -12.7 -5.0 -24.9 -19.0 -5.0 -24.9 -12.7 -5.0 -24.6 -19.0 -5.0 -24.6 -9.4 -5.0 -6.6 -9.4 -5.0 -6.4 -12.7 -5.0 -6.4 -41.8 -5.0 22.5 -41.8 -5.0 24.5 -48.7 -5.0 24.5 3.6 -5.0 1.8 3.9 -5.0 1.9 4.0 -5.0 2.2 -51.4 -5.0 -13.0 -51.7 -5.0 -13.4 -51.9 -5.0 -14.0 -52.1 -5.0 22.4 -52.9 -5.0 22.5 -52.9 -5.0 14.2 31.4 -5.0 -43.3 -11.5 -5.0 -11.0 -10.8 -5.0 -10.8 -12.7 -5.0 -10.9 -34.8 -5.0 6.3 -33.7 -5.0 6.2 -33.7 -5.0 8.4 -9.4 -5.0 8.4 -12.1 -5.0 6.0 -9.4 -5.0 4.0 -10.3 -5.0 4.2 -9.6 -5.0 1.7 -19.0 -5.0 3.8 -19.0 -5.0 4.0 -19.0 -5.0 4.0 -18.9 -5.0 4.2 -19.0 -5.0 8.4 -17.1 -5.0 6.0 -14.6 -5.0 6.7 -12.7 -5.0 8.4 -19.5 -5.0 0.5 -19.6 -5.0 1.7 -21.1 -5.0 1.9 -19.1 -5.0 -0.5 -19.2 -5.0 -0.4 -19.3 -5.0 -0.3 -21.1 -5.0 -0.3 -10.3 -5.0 -0.8 -12.1 -5.0 -2.7 -12.7 -5.0 -4.1 -14.6 -5.0 -3.3 -19.0 -5.0 -4.1 -17.1 -5.0 -2.7 -18.9 -5.0 -0.8 -9.4 -5.0 -4.1 -9.4 -5.0 -0.3 -9.4 -5.0 1.9 -21.1 -5.0 -21.8 -24.4 -5.0 -21.0 -26.4 -5.0 -21.8 -26.9 -5.0 -20.3 -29.5 -5.0 -21.8 -28.8 -5.0 -18.5 -29.4 -5.0 -16.0 -29.5 -5.0 -14.0 -28.8 -5.0 -13.5 -29.5 -5.0 -10.9 -26.9 -5.0 -11.7 -26.4 -5.0 -10.9 -24.4 -5.0 -11.0 -21.1 -5.0 -10.9 -21.9 -5.0 -11.7 -19.3 -5.0 -10.9 -20.1 -5.0 -13.5 -19.3 -5.0 -14.0 -19.4 -5.0 -16.0 -19.3 -5.0 -21.8 -20.1 -5.0 -18.5 -21.9 -5.0 -20.3 -29.5 -5.0 4.0 -30.5 -5.0 3.8 -29.8 -5.0 1.3 -32.3 -5.0 5.7 -29.5 -5.0 8.4 -32.3 -5.0 5.7 -37.3 -5.0 5.7 -39.9 -5.0 8.4 -39.9 -5.0 4.0 -39.1 -5.0 3.8 -39.9 -5.0 1.9 -39.8 -5.0 1.3 -39.9 -5.0 -0.3 -39.1 -5.0 -1.2 -39.9 -5.0 -4.1 -37.3 -5.0 -3.0 -33.2 -5.0 -4.1 -32.3 -5.0 -4.1 -33.2 -5.0 -3.4 -32.3 -5.0 -3.0 -32.3 -5.0 -3.0 -29.5 -5.0 -4.1 -30.5 -5.0 -1.2 -29.5 -5.0 -0.3 -29.5 -5.0 1.9 -22.6 -5.0 -4.3 -22.9 -5.0 -5.3 -21.1 -5.0 -6.4 -23.6 -5.0 -6.1 -24.6 -5.0 -6.3 -26.4 -5.0 -6.4 -26.4 -5.0 -0.3 -26.3 -5.0 -3.3 -25.6 -5.0 -2.6 -24.6 -5.0 -2.3 -23.6 -5.0 -2.6 -22.9 -5.0 -3.3 -25.6 -5.0 -6.1 -26.3 -5.0 -5.3 -29.5 -5.0 -6.4 -9.5 -5.0 -11.6 -9.3 -5.0 -12.3 -7.0 -5.0 -10.9 -7.0 -5.0 -14.0 -9.4 -5.0 -14.0 -9.5 -5.0 -13.1 -10.0 -5.0 -13.6 -10.8 -5.0 -13.8 -11.5 -5.0 -13.6 -12.7 -5.0 -14.0 -12.1 -5.0 -13.1 -12.3 -5.0 -12.3 -12.1 -5.0 -11.6 -36.5 -5.0 -6.6 -38.5 -5.0 -10.8 -36.5 -5.0 -10.9 -37.7 -5.0 -11.0 -38.5 -5.0 -13.8 -39.2 -5.0 -13.6 -39.9 -5.0 -14.0 -39.8 -5.0 -13.1 -40.0 -5.0 -12.3 -37.2 -5.0 -11.6 -37.0 -5.0 -12.3 -36.5 -5.0 -14.0 -37.2 -5.0 -13.1 -37.7 -5.0 -13.6 -24.6 -5.0 2.2 -25.4 -5.0 2.4 -26.4 -5.0 1.9 -25.9 -5.0 2.9 -26.4 -5.0 4.0 -26.1 -5.0 3.7 -26.4 -5.0 8.4 -25.9 -5.0 4.4 -21.1 -5.0 8.4 -23.3 -5.0 4.4 -21.1 -5.0 4.0 -23.1 -5.0 3.7 -23.3 -5.0 2.9 -23.9 -5.0 2.4 -25.4 -5.0 5.0 -24.6 -5.0 5.2 -23.9 -5.0 5.0 -16.2 -5.0 -8.3 -16.4 -5.0 -9.1 -18.4 -5.0 -7.0 -17.7 -5.0 -6.8 -19.0 -5.0 -6.6 -16.9 -5.0 -9.6 -17.7 -5.0 -9.8 -19.0 -5.0 -10.9 -18.4 -5.0 -9.6 -12.7 -5.0 -6.6 -16.9 -5.0 -7.0 -16.4 -5.0 -7.6 -9.4 -5.0 -10.9 -10.0 -5.0 -11.0 -19.0 -5.0 -9.1 -19.2 -5.0 -8.3 -30.0 -5.0 -8.3 -30.2 -5.0 -9.1 -30.8 -5.0 -9.6 -31.5 -5.0 -9.8 -32.3 -5.0 -10.9 -29.5 -5.0 -6.6 -32.3 -5.0 -6.6 -31.5 -5.0 -6.8 -30.8 -5.0 -7.0 -30.2 -5.0 -7.6 -32.3 -5.0 -9.6 -32.8 -5.0 -9.1 -33.2 -5.0 -10.9 -33.0 -5.0 -8.3 -33.2 -5.0 -6.6 -32.8 -5.0 -7.6 -32.3 -5.0 -7.0 16.8 -5.0 -42.9 16.8 -5.0 -47.3 31.4 -5.0 -47.3 -80.6 -5.0 -47.3 -64.4 -5.0 -47.3 -80.6 -5.0 -43.3 -64.4 -5.0 -42.9 -50.8 -5.0 23.8 -50.6 -5.0 23.3 -48.7 -5.0 22.5 -50.9 -5.0 24.5 -51.9 -5.0 24.5 -51.6 -5.0 24.3 -52.5 -5.0 22.8 -52.6 -5.0 23.3 -52.9 -5.0 24.5 -52.5 -5.0 23.8 -52.1 -5.0 24.2 -51.1 -5.0 22.4 -51.6 -5.0 22.3 -51.9 -5.0 14.2 19.8 -5.0 -23.6 16.8 -5.0 -24.6 20.0 -5.0 -24.1 20.3 -5.0 -24.5 20.0 -5.0 -23.1 20.3 -5.0 -22.8 16.8 -5.0 -21.8 20.8 -5.0 -22.6 21.3 -5.0 -22.8 21.7 -5.0 -23.1 21.8 -5.0 -23.6 21.7 -5.0 -24.1 16.8 -5.0 -6.6 31.3 -5.0 -6.4 16.8 -5.0 -6.4 30.8 -5.0 -6.3 31.3 -5.0 -4.4 31.8 -5.0 -4.6 32.2 -5.0 -4.9 32.3 -5.0 -5.4 32.2 -5.0 -5.9 30.5 -5.0 -5.9 30.3 -5.0 -5.4 16.8 -5.0 -4.1 30.5 -5.0 -4.9 30.8 -5.0 -4.6 -29.5 -5.0 24.5 -29.8 -5.0 24.2 -29.6 -5.0 23.7 -29.5 -5.0 22.5 -29.8 -5.0 23.2 -30.1 -5.0 22.8 -30.6 -5.0 22.7 -31.1 -5.0 22.8 -32.3 -5.0 22.5 -31.5 -5.0 23.2 -32.3 -5.0 24.5 -31.6 -5.0 23.7 -31.5 -5.0 24.2 -31.5 -5.0 45.2 -31.1 -5.0 45.5 -30.1 -5.0 45.5 -29.8 -5.0 45.2 -29.6 -5.0 44.7 -29.8 -5.0 44.2 -30.1 -5.0 43.8 -30.6 -5.0 45.7 -31.6 -5.0 44.7 -31.5 -5.0 44.2 -31.1 -5.0 24.5 -30.1 -5.0 24.5 -30.6 -5.0 24.7 -30.6 -5.0 43.7 -31.1 -5.0 43.8 -50.6 -5.0 44.7 -50.8 -5.0 45.2 -50.8 -5.0 44.2 -51.6 -5.0 45.7 -51.1 -5.0 45.5 -52.1 -5.0 43.8 -52.5 -5.0 44.2 -52.6 -5.0 44.7 -52.5 -5.0 45.2 -52.1 -5.0 45.5 -51.1 -5.0 43.8 -51.6 -5.0 43.7 1.9 -5.0 -10.9 1.8 -5.0 -12.6 2.1 -5.0 -12.3 2.6 -5.0 -12.1 3.1 -5.0 -12.3 3.9 -5.0 -10.9 3.5 -5.0 -12.6 3.6 -5.0 -13.1 3.9 -5.0 -14.0 3.5 -5.0 -13.6 3.1 -5.0 -14.0 1.9 -5.0 -14.0 1.9 -5.0 -21.8 2.1 -5.0 -14.0 2.6 -5.0 -14.1 3.9 -5.0 -21.8 -52.6 -5.0 -52.2 -52.7 -5.0 -52.7 -54.4 -5.0 -51.7 -54.1 -5.0 -51.3 -58.1 -5.0 -47.3 -53.1 -5.0 -53.1 -53.6 -5.0 -53.2 -52.9 -5.0 -47.3 -53.6 -5.0 -51.2 -53.1 -5.0 -51.3 -51.9 -5.0 -47.3 -52.7 -5.0 -51.7 -54.1 -5.0 -53.1 -54.4 -5.0 -52.7 -54.6 -5.0 -52.2 -63.6 -5.0 -34.9 -64.1 -5.0 -35.0 -64.4 -5.0 -37.8 -64.1 -5.0 -33.0 -63.6 -5.0 -33.2 -58.1 -5.0 -32.9 -63.2 -5.0 -33.5 -63.1 -5.0 -34.0 -58.1 -5.0 -37.8 -63.2 -5.0 -34.5 -65.1 -5.0 -34.0 -64.9 -5.0 -33.5 -64.9 -5.0 -34.5 -64.6 -5.0 -34.9 -51.7 -5.0 -11.6 -51.4 -5.0 -12.0 -50.9 -5.0 -10.9 -51.2 -5.0 -12.5 -50.9 -5.0 -14.0 -52.7 -5.0 -11.6 -52.2 -5.0 -11.5 -51.9 -5.0 -10.9 -53.1 -5.0 -13.0 -53.2 -5.0 -12.5 -58.1 -5.0 -14.0 -58.1 -5.0 -10.9 -52.2 -5.0 -13.5 -52.7 -5.0 -13.4 -52.9 -5.0 -14.0 4.1 -5.0 2.7 8.0 -5.0 1.9 4.0 -5.0 3.2 8.0 -5.0 4.0 2.2 -5.0 3.2 2.6 -5.0 3.5 1.9 -5.0 4.0 3.9 -5.0 4.0 3.1 -5.0 3.7 3.6 -5.0 3.5 2.1 -5.0 2.7 1.9 -5.0 1.9 2.2 -5.0 2.2 3.9 -5.0 -0.3 2.6 -5.0 1.8 1.9 -5.0 -0.3 3.1 -5.0 1.7 3.9 -5.0 24.5 3.6 -5.0 24.5 3.1 -5.0 24.7 2.6 -5.0 24.5 1.9 -5.0 24.5 3.9 -5.0 22.5 4.0 -5.0 23.2 3.6 -5.0 22.8 3.1 -5.0 22.7 2.6 -5.0 22.8 1.9 -5.0 22.5 2.2 -5.0 23.2 2.1 -5.0 23.7 2.2 -5.0 24.2 -19.0 -5.0 22.5 -17.9 -5.0 22.7 -18.4 -5.0 22.8 -17.4 -5.0 24.5 -17.0 -5.0 24.2 -12.7 -5.0 24.5 -16.9 -5.0 23.7 -12.7 -5.0 22.5 -17.0 -5.0 23.2 -17.4 -5.0 22.8 -18.8 -5.0 23.2 -18.9 -5.0 23.7 -19.0 -5.0 24.5 -18.8 -5.0 24.2 -18.4 -5.0 24.5 -17.9 -5.0 24.7 -3.7 -5.0 -23.1 -3.2 -5.0 -23.3 -2.9 -5.0 -23.6 -3.2 -5.0 -25.0 -3.7 -5.0 -25.1 -7.0 -5.0 -28.0 -4.2 -5.0 -25.0 -7.0 -5.0 -24.9 -4.6 -5.0 -24.6 -7.0 -5.0 -24.6 -4.7 -5.0 -24.1 -7.0 -5.0 -21.8 -4.6 -5.0 -23.6 -4.2 -5.0 -23.3 -2.7 -5.0 -24.1 1.9 -5.0 -24.6 -2.9 -5.0 -24.6 -14.7 -5.0 -43.2 -15.1 -5.0 -42.8 -19.0 -5.0 -42.9 -15.2 -5.0 -42.3 -15.1 -5.0 -41.8 -19.0 -5.0 -37.8 -14.7 -5.0 -41.5 -14.2 -5.0 -41.3 -13.7 -5.0 -41.5 -13.4 -5.0 -41.8 -12.7 -5.0 -42.9 -13.2 -5.0 -42.3 -13.4 -5.0 -42.8 -12.7 -5.0 -47.3 -19.0 -5.0 -47.3 -14.2 -5.0 -43.3 -13.7 -5.0 -43.2 -31.6 -5.0 -31.3 -31.4 -5.0 -31.8 -29.5 -5.0 -32.9 -32.4 -5.0 -30.8 -31.9 -5.0 -31.0 -29.5 -5.0 -28.0 -33.2 -5.0 -32.9 -33.3 -5.0 -32.3 -33.7 -5.0 -32.9 -33.4 -5.0 -31.8 -33.7 -5.0 -28.0 -31.6 -5.0 -32.3 -31.9 -5.0 -32.7 -32.3 -5.0 -32.9 -32.4 -5.0 -32.8 -32.9 -5.0 -32.7 8.0 -5.0 24.5 4.0 -5.0 24.2 -41.8 -5.0 14.2 -43.7 -5.0 15.7 -44.0 -5.0 15.3 -44.5 -5.0 15.2 -45.0 -5.0 15.3 -48.7 -5.0 14.2 -45.4 -5.0 15.7 -45.5 -5.0 16.2 -45.4 -5.0 16.7 -45.0 -5.0 17.1 -51.1 -5.0 24.2 -44.5 -5.0 17.2 -44.0 -5.0 17.1 -43.7 -5.0 16.7 -43.5 -5.0 16.2 -9.4 -5.0 24.5 -9.4 -5.0 22.5 -9.4 -5.0 14.2 -12.7 -5.0 14.2 -19.0 -5.0 14.2 -21.1 -5.0 14.2 -23.1 -5.0 11.7 -24.6 -5.0 13.2 -23.9 -5.0 13.0 -23.3 -5.0 12.4 -25.4 -5.0 13.0 -26.4 -5.0 14.2 -26.4 -5.0 22.5 -21.1 -5.0 22.5 -26.4 -5.0 24.5 -21.1 -5.0 24.5 -23.3 -5.0 10.9 -23.9 -5.0 10.4 -24.6 -5.0 10.2 -25.4 -5.0 10.4 -25.9 -5.0 10.9 -26.1 -5.0 11.7 -25.9 -5.0 12.4 -29.5 -5.0 14.2 -32.3 -5.0 14.2 -32.3 -5.0 8.4 -33.2 -5.0 24.5 -33.2 -5.0 22.5 -33.2 -5.0 14.2 -33.2 -5.0 8.4 -33.2 -5.0 6.1 -33.7 -5.0 24.5 -33.7 -5.0 22.5 -33.7 -5.0 14.2 -36.5 -5.0 24.5 -36.5 -5.0 22.5 -36.5 -5.0 14.2 -36.5 -5.0 8.4 -39.9 -5.0 24.5 -39.9 -5.0 22.5 -39.9 -5.0 14.2 12.8 -5.0 4.2 12.3 -5.0 4.4 13.7 -5.0 4.7 13.3 -5.0 4.4 16.8 -5.0 4.0 11.9 -5.0 4.7 11.8 -5.0 5.2 8.0 -5.0 8.4 11.9 -5.0 5.7 12.3 -5.0 6.1 16.8 -5.0 24.5 16.8 -5.0 22.5 8.0 -5.0 22.5 16.8 -5.0 14.2 8.0 -5.0 14.2 16.8 -5.0 8.4 12.8 -5.0 6.2 13.3 -5.0 6.1 13.7 -5.0 5.7 13.8 -5.0 5.2 4.1 -5.0 23.7 3.9 -5.0 14.2 3.9 -5.0 8.4 1.9 -5.0 14.2 1.9 -5.0 8.4 -19.3 -5.0 24.5 -19.3 -5.0 22.5 -19.3 -5.0 14.2 -19.3 -5.0 8.4 -19.3 -5.0 4.0 -19.3 -5.0 2.8 -19.5 -5.0 1.9 -61.9 -5.0 5.2 -62.2 -5.0 4.8 -58.1 -5.0 4.0 -64.4 -5.0 4.0 -62.7 -5.0 4.7 -63.2 -5.0 4.8 -63.2 -5.0 6.6 -62.7 -5.0 6.7 -64.4 -5.0 8.4 -58.1 -5.0 8.4 -64.4 -5.0 14.2 -58.1 -5.0 14.2 -64.4 -5.0 22.5 -58.1 -5.0 22.5 -64.4 -5.0 24.5 -58.1 -5.0 24.5 -63.6 -5.0 5.2 -63.7 -5.0 5.7 -63.6 -5.0 6.2 -62.2 -5.0 6.6 -61.9 -5.0 6.2 -61.7 -5.0 5.7 -26.6 -5.0 -4.3 16.8 -5.0 1.9 16.8 -5.0 -0.3 -19.3 -5.0 -4.1 -21.1 -5.0 -4.1 -19.3 -5.0 -6.4 -19.0 -5.0 -6.4 -32.3 -5.0 -6.4 -33.2 -5.0 -6.4 -19.3 -5.0 -6.6 -21.1 -5.0 -6.6 -26.4 -5.0 -6.6 -34.8 -5.0 -3.7 -36.5 -5.0 -4.1 -36.5 -5.0 -6.4 -39.9 -5.0 -6.4 -39.9 -5.0 -6.6 -39.9 -5.0 -10.9 -39.2 -5.0 -11.0 3.9 -5.0 -4.1 1.9 -5.0 -4.1 3.9 -5.0 -6.4 1.9 -5.0 -6.4 3.9 -5.0 -6.6 1.9 -5.0 -6.6 -7.0 -5.0 24.5 -7.0 -5.0 22.5 -7.0 -5.0 14.2 -7.0 -5.0 8.4 -7.0 -5.0 4.0 -7.0 -5.0 1.9 -7.0 -5.0 -0.3 -7.0 -5.0 -4.1 -7.0 -5.0 -6.4 -7.0 -5.0 -6.6 1.6 -5.0 -13.1 1.8 -5.0 -13.6 -19.0 -5.0 -7.6 -41.8 -5.0 8.4 -41.8 -5.0 4.0 -41.8 -5.0 1.9 -41.8 -5.0 -0.3 -41.8 -5.0 -4.1 -41.8 -5.0 -6.4 -41.8 -5.0 -6.6 -41.8 -5.0 -10.9 -51.9 -5.0 -6.6 -50.9 -5.0 -6.6 -51.9 -5.0 -6.4 -50.9 -5.0 -6.4 -51.9 -5.0 -4.1 -50.9 -5.0 -4.1 -51.9 -5.0 -0.3 -50.9 -5.0 -0.3 -51.9 -5.0 1.9 -50.9 -5.0 1.9 -51.9 -5.0 4.0 -50.9 -5.0 4.0 -51.9 -5.0 8.4 -50.9 -5.0 8.4 -50.9 -5.0 14.2 -50.9 -5.0 22.5 -50.8 -5.0 22.8 -52.9 -5.0 8.4 -52.9 -5.0 4.0 -52.9 -5.0 1.9 -52.9 -5.0 -0.3 -52.9 -5.0 -4.1 -52.9 -5.0 -6.4 -52.9 -5.0 -6.6 -52.9 -5.0 -10.9 -53.1 -5.0 -12.0 -58.1 -5.0 1.9 -58.1 -5.0 -0.3 -58.1 -5.0 -4.1 -58.1 -5.0 -6.4 -58.1 -5.0 -6.6 31.8 -5.0 -6.3 16.8 -5.0 -10.9 16.8 -5.0 -14.0 8.0 -5.0 -0.3 8.0 -5.0 -4.1 8.0 -5.0 -6.4 8.0 -5.0 -6.6 8.0 -5.0 -10.9 8.0 -5.0 -14.0 8.0 -5.0 -21.8 -19.0 -5.0 -14.0 -12.7 -5.0 -21.8 -19.0 -5.0 -21.8 3.9 -5.0 -24.6 8.0 -5.0 -24.6 -19.3 -5.0 -24.6 -21.1 -5.0 -24.6 -26.4 -5.0 -24.6 -29.5 -5.0 -24.6 -41.8 -5.0 -24.6 -45.0 -5.0 -24.0 -45.4 -5.0 -24.4 -48.7 -5.0 -24.6 -45.9 -5.0 -24.5 -46.4 -5.0 -24.4 -46.7 -5.0 -24.0 -46.9 -5.0 -23.5 -48.7 -5.0 -21.8 -46.7 -5.0 -23.0 -46.4 -5.0 -22.7 -45.9 -5.0 -22.5 -41.8 -5.0 -21.8 -48.7 -5.0 -14.0 -41.8 -5.0 -14.0 -48.7 -5.0 -10.9 -48.7 -5.0 -6.6 -48.7 -5.0 -6.4 -48.7 -5.0 -4.1 -48.7 -5.0 -0.3 -48.7 -5.0 1.9 -48.7 -5.0 4.0 -48.7 -5.0 8.4 -45.4 -5.0 -22.7 -45.0 -5.0 -23.0 -44.9 -5.0 -23.5 -19.3 -5.0 -24.9 -21.1 -5.0 -24.9 -26.4 -5.0 -24.9 -29.5 -5.0 -24.9 -19.0 -5.0 -28.0 -19.3 -5.0 -28.0 -21.1 -5.0 -28.0 -26.4 -5.0 -28.0 -32.3 -5.0 -14.0 -32.3 -5.0 -21.8 -32.3 -5.0 -24.6 -32.3 -5.0 -24.9 -32.3 -5.0 -28.0 -32.9 -5.0 -31.0 -33.2 -5.0 -14.0 -33.2 -5.0 -21.8 -33.2 -5.0 -24.6 -33.2 -5.0 -24.9 -33.2 -5.0 -28.0 -33.3 -5.0 -31.3 -33.7 -5.0 -3.5 -33.7 -5.0 -4.1 -33.7 -5.0 -6.4 -33.7 -5.0 -6.6 -33.7 -5.0 -10.9 -33.7 -5.0 -14.0 -33.7 -5.0 -21.8 -33.7 -5.0 -24.6 -33.7 -5.0 -24.9 -26.4 -5.0 -32.9 -21.1 -5.0 -32.9 -19.3 -5.0 -32.9 -64.4 -5.0 1.9 -64.4 -5.0 -0.3 -64.4 -5.0 -4.1 -64.4 -5.0 -6.4 -64.4 -5.0 -6.6 -64.4 -5.0 -10.9 -64.4 -5.0 -14.0 -58.1 -5.0 -21.8 -64.4 -5.0 -21.8 -58.1 -5.0 -24.6 -64.4 -5.0 -24.6 -58.1 -5.0 -24.9 -64.4 -5.0 -24.9 -58.1 -5.0 -28.0 -64.4 -5.0 -28.0 -64.4 -5.0 -32.9 -64.6 -5.0 -33.2 -19.3 -5.0 -37.8 -21.1 -5.0 -37.8 -26.4 -5.0 -37.8 -29.5 -5.0 -37.8 -32.3 -5.0 -37.8 -33.2 -5.0 -37.8 -33.7 -5.0 -37.8 -36.5 -5.0 -21.8 -36.5 -5.0 -24.6 -36.5 -5.0 -24.9 -36.5 -5.0 -28.0 -36.5 -5.0 -32.9 -36.5 -5.0 -37.8 21.3 -5.0 -24.5 20.8 -5.0 -24.6 16.8 -5.0 -24.9 16.8 -5.0 -28.0 16.8 -5.0 -32.9 16.8 -5.0 -37.8 -19.3 -5.0 -42.9 -21.1 -5.0 -42.9 -26.4 -5.0 -42.9 -29.5 -5.0 -42.9 -32.3 -5.0 -42.9 -33.2 -5.0 -42.9 -33.7 -5.0 -42.9 -35.5 -5.0 -40.7 -35.0 -5.0 -40.5 -34.5 -5.0 -40.7 -34.2 -5.0 -41.0 -34.0 -5.0 -41.5 -34.2 -5.0 -42.0 -35.5 -5.0 -42.4 -36.5 -5.0 -42.9 -35.0 -5.0 -42.5 -34.5 -5.0 -42.4 -35.9 -5.0 -42.0 -36.0 -5.0 -41.5 -35.9 -5.0 -41.0 -39.9 -5.0 -21.8 -39.9 -5.0 -24.6 -39.9 -5.0 -24.9 -39.9 -5.0 -28.0 -39.9 -5.0 -32.9 -39.9 -5.0 -37.8 -39.9 -5.0 -42.9 -41.8 -5.0 -42.9 -41.8 -5.0 -37.8 -41.8 -5.0 -32.9 -41.8 -5.0 -28.0 -41.8 -5.0 -24.9 -39.8 -5.0 -11.6 -48.7 -5.0 -24.9 -48.7 -5.0 -28.0 -48.7 -5.0 -32.9 -48.7 -5.0 -37.8 -48.7 -5.0 -42.9 -50.9 -5.0 -21.8 -50.9 -5.0 -24.6 -50.9 -5.0 -24.9 -50.9 -5.0 -28.0 -50.9 -5.0 -32.9 -50.9 -5.0 -37.8 -50.9 -5.0 -42.9 -51.9 -5.0 -21.8 -51.9 -5.0 -24.6 -51.9 -5.0 -24.9 -51.9 -5.0 -28.0 -51.9 -5.0 -32.9 -51.9 -5.0 -37.8 -51.9 -5.0 -42.9 -52.9 -5.0 -21.8 -52.9 -5.0 -24.6 -52.9 -5.0 -24.9 -52.9 -5.0 -28.0 -52.9 -5.0 -32.9 -52.9 -5.0 -37.8 -52.9 -5.0 -42.9 -58.1 -5.0 -42.9 8.0 -5.0 -24.9 8.0 -5.0 -28.0 8.0 -5.0 -32.9 8.0 -5.0 -37.8 8.0 -5.0 -42.9 8.0 -5.0 -47.3 3.9 -5.0 -24.9 3.9 -5.0 -28.0 3.9 -5.0 -32.9 3.9 -5.0 -37.8 3.9 -5.0 -42.9 3.9 -5.0 -47.3 1.9 -5.0 -24.9 1.9 -5.0 -28.0 1.9 -5.0 -32.9 1.9 -5.0 -37.8 1.9 -5.0 -42.9 1.9 -5.0 -47.3 -7.0 -5.0 -47.3 -7.0 -5.0 -42.9 -7.0 -5.0 -37.8 -7.0 -5.0 -32.9 -9.4 -5.0 -21.8 -9.4 -5.0 -24.6 -9.4 -5.0 -24.9 -9.4 -5.0 -28.0 -9.4 -5.0 -32.9 -9.4 -5.0 -37.8 -9.4 -5.0 -42.9 -9.4 -5.0 -47.3 -19.3 -5.0 -47.3 -21.1 -5.0 -47.3 -26.4 -5.0 -47.3 -29.5 -5.0 -47.3 -32.3 -5.0 -47.3 -33.2 -5.0 -47.3 -33.7 -5.0 -47.3 -36.5 -5.0 -47.3 -39.9 -5.0 -47.3 -41.8 -5.0 -47.3 -48.7 -5.0 -47.3 -50.9 -5.0 -47.3 -16.5 -0.0 4.0 -19.0 -0.0 4.0 -19.0 -0.0 4.5 -32.3 -0.0 0.3 -33.2 -0.0 0.3 -33.2 -0.0 1.9 -28.1 -0.0 -6.4 -32.3 -0.0 -6.4 -12.7 -0.0 -6.6 -16.5 -0.0 -6.6 -16.5 -0.0 -6.4 -48.7 -0.0 -47.3 -36.5 -0.0 -47.3 -28.1 -0.0 -47.3 -26.4 -0.0 -47.3 -32.9 -0.0 -32.7 -32.4 -0.0 -32.8 -32.3 -0.0 -32.9 -32.9 -0.0 -31.0 -33.3 -0.0 -31.3 -33.2 -0.0 -28.0 4.0 -0.0 2.2 3.9 -0.0 1.9 3.6 -0.0 1.8 -52.2 -0.0 -13.5 -51.7 -0.0 -13.4 -51.9 -0.0 -14.0 -52.7 -0.0 -11.6 -53.1 -0.0 -12.0 -52.9 -0.0 -11.2 -64.1 -0.0 -33.0 -64.6 -0.0 -33.2 -64.4 -0.0 -32.9 -51.1 -0.0 43.8 -50.8 -0.0 44.2 -50.9 -0.0 24.5 -29.6 -0.0 23.7 -29.8 -0.0 24.2 -28.1 -0.0 24.5 13.3 -0.0 4.4 16.8 -0.0 4.5 16.8 -0.0 4.0 -18.4 -0.0 -7.0 -19.0 -0.0 -7.6 -19.0 -0.0 -6.6 -39.2 -0.0 -11.0 -41.8 -0.0 -11.2 -41.8 -0.0 -6.6 16.8 -0.0 -47.3 31.4 -0.0 -43.3 -80.6 -0.0 -47.3 -80.6 -0.0 -43.3 -64.4 -0.0 -42.9 -64.4 -0.0 -47.3 -22.9 -0.0 -3.3 -20.1 -0.0 0.3 -22.6 -0.0 -4.3 -20.1 -0.0 -6.4 -22.9 -0.0 -5.3 -23.0 -0.0 -6.4 -23.6 -0.0 -6.1 -24.6 -0.0 -6.3 -26.4 -0.0 -6.4 -25.6 -0.0 -6.1 -26.3 -0.0 -5.3 -26.6 -0.0 -4.3 -24.6 -0.0 -2.3 -25.6 -0.0 -2.6 -26.4 -0.0 0.3 -11.5 -0.0 -13.6 -10.8 -0.0 -13.8 -12.7 -0.0 -14.0 -12.7 -0.0 -11.2 -12.3 -0.0 -12.3 -12.1 -0.0 -13.1 -9.3 -0.0 -12.3 -7.0 -0.0 -11.2 -9.5 -0.0 -13.1 -7.0 -0.0 -14.0 -10.0 -0.0 -13.6 -10.0 -0.0 -11.0 -10.8 -0.0 -10.8 -11.5 -0.0 -11.0 -12.1 -0.0 -11.6 -38.5 -0.0 -13.8 -37.7 -0.0 -13.6 -36.5 -0.0 -14.0 -41.8 -0.0 -14.0 -39.2 -0.0 -13.6 -37.2 -0.0 -13.1 -37.0 -0.0 -12.3 -36.5 -0.0 -11.2 -39.8 -0.0 -11.6 -40.0 -0.0 -12.3 -39.8 -0.0 -13.1 -38.5 -0.0 -10.8 -36.5 -0.0 -6.6 -37.7 -0.0 -11.0 -37.2 -0.0 -11.6 -25.9 -0.0 2.9 -25.4 -0.0 2.4 -26.4 -0.0 1.9 -24.6 -0.0 2.2 -26.4 -0.0 4.5 -25.9 -0.0 4.4 -26.1 -0.0 3.7 -25.4 -0.0 5.0 -26.4 -0.0 8.4 -24.6 -0.0 5.2 -23.0 -0.0 8.4 -23.9 -0.0 5.0 -23.3 -0.0 4.4 -23.9 -0.0 2.4 -23.3 -0.0 2.9 -23.0 -0.0 1.9 -23.1 -0.0 3.7 -23.0 -0.0 4.0 -23.0 -0.0 4.5 -16.2 -0.0 -8.3 -16.4 -0.0 -7.6 -19.0 -0.0 -11.2 -19.0 -0.0 -9.1 -18.4 -0.0 -9.6 -17.7 -0.0 -9.8 -16.5 -0.0 -11.2 -16.9 -0.0 -9.6 -16.4 -0.0 -9.1 -20.1 -0.0 -6.6 -19.2 -0.0 -8.3 -20.1 -0.0 -11.2 -16.9 -0.0 -7.0 -17.7 -0.0 -6.8 -32.8 -0.0 -9.1 -32.3 -0.0 -9.6 -32.3 -0.0 -11.2 -31.5 -0.0 -9.8 -30.8 -0.0 -9.6 -28.1 -0.0 -11.2 -30.2 -0.0 -9.1 -28.1 -0.0 -6.6 -30.0 -0.0 -8.3 -30.2 -0.0 -7.6 -30.8 -0.0 -7.0 -31.5 -0.0 -6.8 -32.3 -0.0 -6.6 -32.3 -0.0 -7.0 -33.2 -0.0 -6.6 -33.2 -0.0 -11.2 -33.0 -0.0 -8.3 -32.8 -0.0 -7.6 -50.8 -0.0 22.8 -50.6 -0.0 23.3 -48.7 -0.0 22.5 -52.1 -0.0 22.4 -51.6 -0.0 22.3 -51.9 -0.0 14.2 -51.1 -0.0 22.4 -52.6 -0.0 23.3 -52.9 -0.0 22.5 -52.9 -0.0 24.5 -52.5 -0.0 22.8 -52.9 -0.0 14.2 -51.1 -0.0 24.2 -51.6 -0.0 24.3 -51.9 -0.0 24.5 -52.1 -0.0 24.2 -52.5 -0.0 23.8 -50.8 -0.0 23.8 21.3 -0.0 -22.8 20.8 -0.0 -22.6 16.8 -0.0 -18.6 21.3 -0.0 -24.5 21.7 -0.0 -24.1 21.8 -0.0 -23.6 21.7 -0.0 -23.1 20.3 -0.0 -22.8 20.0 -0.0 -23.1 16.8 -0.0 -24.6 19.8 -0.0 -23.6 20.0 -0.0 -24.1 20.3 -0.0 -24.5 20.8 -0.0 -24.6 16.8 -0.0 -24.9 32.2 -0.0 -5.9 32.3 -0.0 -5.4 32.2 -0.0 -4.9 31.8 -0.0 -4.6 31.3 -0.0 -4.4 30.8 -0.0 -4.6 16.8 -0.0 0.3 30.5 -0.0 -4.9 16.8 -0.0 -6.4 30.3 -0.0 -5.4 30.5 -0.0 -5.9 30.8 -0.0 -6.3 31.3 -0.0 -6.4 16.8 -0.0 -6.6 12.3 -0.0 4.4 8.0 -0.0 4.5 11.9 -0.0 4.7 11.8 -0.0 5.2 13.7 -0.0 4.7 13.8 -0.0 5.2 16.8 -0.0 8.4 13.7 -0.0 5.7 13.3 -0.0 6.1 12.8 -0.0 6.2 12.3 -0.0 6.1 8.0 -0.0 8.4 11.9 -0.0 5.7 -31.5 -0.0 23.2 -31.1 -0.0 22.8 -32.3 -0.0 22.5 -30.1 -0.0 22.8 -29.8 -0.0 23.2 -28.1 -0.0 22.5 -31.6 -0.0 23.7 -30.6 -0.0 22.7 -31.1 -0.0 24.5 -31.5 -0.0 24.2 -32.3 -0.0 24.5 -30.6 -0.0 45.7 -31.1 -0.0 45.5 -31.5 -0.0 45.2 -30.1 -0.0 24.5 -30.1 -0.0 43.8 -30.6 -0.0 43.7 -30.6 -0.0 24.7 -31.1 -0.0 43.8 -31.5 -0.0 44.2 -31.6 -0.0 44.7 -29.8 -0.0 44.2 -29.6 -0.0 44.7 -30.1 -0.0 45.5 -29.8 -0.0 45.2 -48.7 -0.0 24.5 -50.6 -0.0 44.7 -51.6 -0.0 43.7 -52.1 -0.0 45.5 -52.5 -0.0 45.2 -52.6 -0.0 44.7 -52.5 -0.0 44.2 -52.1 -0.0 43.8 -50.8 -0.0 45.2 -51.1 -0.0 45.5 -51.6 -0.0 45.7 1.6 -0.0 -13.1 -0.5 -0.0 -14.0 1.8 -0.0 -12.6 -0.5 -0.0 -11.2 2.1 -0.0 -12.3 2.6 -0.0 -12.1 3.9 -0.0 -14.0 3.6 -0.0 -13.1 3.9 -0.0 -11.2 3.5 -0.0 -12.6 3.1 -0.0 -12.3 1.8 -0.0 -13.6 2.1 -0.0 -14.0 -0.5 -0.0 -18.6 2.6 -0.0 -14.1 3.9 -0.0 -18.6 3.1 -0.0 -14.0 3.5 -0.0 -13.6 -52.6 -0.0 -52.2 -51.9 -0.0 -47.3 -52.7 -0.0 -51.7 -52.9 -0.0 -47.3 -53.1 -0.0 -51.3 -53.6 -0.0 -51.2 -54.1 -0.0 -53.1 -53.6 -0.0 -53.2 -53.1 -0.0 -53.1 -52.7 -0.0 -52.7 -54.1 -0.0 -51.3 -54.4 -0.0 -51.7 -58.1 -0.0 -47.3 -54.6 -0.0 -52.2 -54.4 -0.0 -52.7 -64.9 -0.0 -34.5 -64.6 -0.0 -34.9 -64.4 -0.0 -37.8 -64.1 -0.0 -35.0 -63.2 -0.0 -33.5 -63.6 -0.0 -33.2 -58.1 -0.0 -32.9 -63.6 -0.0 -34.9 -58.1 -0.0 -37.8 -63.2 -0.0 -34.5 -63.1 -0.0 -34.0 -64.9 -0.0 -33.5 -65.1 -0.0 -34.0 -16.5 -0.0 1.9 -17.0 -0.0 2.2 -16.9 -0.0 2.7 -17.0 -0.0 3.2 -17.4 -0.0 3.5 -17.9 -0.0 3.7 -18.4 -0.0 3.5 -18.8 -0.0 3.2 -18.9 -0.0 2.7 -19.0 -0.0 1.9 -18.8 -0.0 2.2 -18.4 -0.0 1.8 -19.0 -0.0 0.3 -17.9 -0.0 1.7 -17.4 -0.0 1.8 -16.5 -0.0 0.3 -20.1 -0.0 -14.0 -21.1 -0.0 -14.1 -20.9 -0.0 -13.6 -21.4 -0.0 -12.8 -21.9 -0.0 -12.6 -23.0 -0.0 -11.2 -22.4 -0.0 -12.8 -21.1 -0.0 -13.1 -22.8 -0.0 -13.1 -22.9 -0.0 -13.6 -23.0 -0.0 -14.0 -22.8 -0.0 -14.1 -23.0 -0.0 -18.6 -22.4 -0.0 -14.5 -21.9 -0.0 -14.6 -21.4 -0.0 -14.5 -20.1 -0.0 -18.6 -53.1 -0.0 -13.0 -58.1 -0.0 -14.0 -53.2 -0.0 -12.5 -58.1 -0.0 -11.2 -51.9 -0.0 -11.2 -51.7 -0.0 -11.6 -52.2 -0.0 -11.5 -51.4 -0.0 -13.0 -50.9 -0.0 -14.0 -51.2 -0.0 -12.5 -50.9 -0.0 -11.2 -51.4 -0.0 -12.0 -52.7 -0.0 -13.4 -52.9 -0.0 -14.0 -34.5 -0.0 -1.1 -34.9 -0.0 -1.5 -36.5 -0.0 0.3 -35.0 -0.0 -2.0 -36.5 -0.0 -6.4 -34.9 -0.0 -2.5 -34.5 -0.0 -2.9 -34.0 -0.0 -3.0 -33.7 -0.0 -6.4 -33.5 -0.0 -2.9 -33.2 -0.0 -2.5 3.9 -0.0 4.0 4.0 -0.0 3.2 3.6 -0.0 3.5 3.1 -0.0 3.7 2.6 -0.0 3.5 -0.5 -0.0 4.0 2.2 -0.0 3.2 8.0 -0.0 1.9 3.1 -0.0 1.7 3.9 -0.0 0.3 2.6 -0.0 1.8 -0.5 -0.0 1.9 2.2 -0.0 2.2 2.1 -0.0 2.7 -0.5 -0.0 24.5 2.6 -0.0 24.5 2.2 -0.0 24.2 2.1 -0.0 23.7 2.2 -0.0 23.2 -0.5 -0.0 22.5 2.6 -0.0 22.8 4.0 -0.0 23.2 4.1 -0.0 23.7 8.0 -0.0 24.5 4.0 -0.0 24.2 3.9 -0.0 24.5 -19.0 -0.0 24.5 -18.4 -0.0 24.5 -18.8 -0.0 24.2 -18.9 -0.0 23.7 -18.8 -0.0 23.2 -19.0 -0.0 22.5 -18.4 -0.0 22.8 -17.9 -0.0 22.7 -17.4 -0.0 22.8 -16.5 -0.0 22.5 -17.0 -0.0 23.2 -16.9 -0.0 23.7 -17.9 -0.0 24.7 -17.4 -0.0 24.5 -3.2 -0.0 -23.3 -3.7 -0.0 -23.1 -4.7 -0.0 -24.1 -7.0 -0.0 -24.6 -4.6 -0.0 -23.6 -7.0 -0.0 -18.6 -4.2 -0.0 -23.3 -4.2 -0.0 -25.0 -3.7 -0.0 -25.1 -0.5 -0.0 -28.0 -3.2 -0.0 -25.0 -0.5 -0.0 -24.9 -2.9 -0.0 -24.6 -0.5 -0.0 -24.6 -2.7 -0.0 -24.1 -2.9 -0.0 -23.6 -4.6 -0.0 -24.6 -7.0 -0.0 -24.9 -7.0 -0.0 -28.0 -12.7 -0.0 -37.8 -13.7 -0.0 -41.5 -14.2 -0.0 -41.3 -12.7 -0.0 -42.9 -13.2 -0.0 -42.3 -13.4 -0.0 -41.8 -16.5 -0.0 -37.8 -14.7 -0.0 -41.5 -15.1 -0.0 -41.8 -16.5 -0.0 -42.9 -15.2 -0.0 -42.3 -15.1 -0.0 -42.8 -16.5 -0.0 -47.3 -14.7 -0.0 -43.2 -14.2 -0.0 -43.3 -12.7 -0.0 -47.3 -13.7 -0.0 -43.2 -13.4 -0.0 -42.8 -33.7 -0.0 -28.0 -33.4 -0.0 -31.8 -33.7 -0.0 -32.9 -33.3 -0.0 -32.3 -31.9 -0.0 -32.7 -28.1 -0.0 -32.9 -31.6 -0.0 -32.3 -31.4 -0.0 -31.8 -28.1 -0.0 -28.0 -31.6 -0.0 -31.3 -31.9 -0.0 -31.0 -33.2 -0.0 -32.9 -33.7 -0.0 -47.3 -36.5 -0.0 -42.9 -33.7 -0.0 -42.9 -35.5 -0.0 -40.7 -35.9 -0.0 -41.0 -36.5 -0.0 -37.8 -36.0 -0.0 -41.5 -35.9 -0.0 -42.0 -35.5 -0.0 -42.4 -35.0 -0.0 -42.5 -34.5 -0.0 -42.4 -33.7 -0.0 -37.8 -34.5 -0.0 -40.7 -35.0 -0.0 -40.5 -34.2 -0.0 -42.0 -34.0 -0.0 -41.5 -34.2 -0.0 -41.0 -58.1 -0.0 -42.9 -28.1 -0.0 -37.8 -32.3 -0.0 -37.8 -28.1 -0.0 -42.9 -32.3 -0.0 -42.9 -32.3 -0.0 -47.3 -33.2 -0.0 -37.8 -33.2 -0.0 -42.9 -33.2 -0.0 -47.3 -0.5 -0.0 -32.9 -7.0 -0.0 -32.9 -0.5 -0.0 -37.8 -7.0 -0.0 -37.8 -0.5 -0.0 -42.9 -7.0 -0.0 -42.9 -0.5 -0.0 -47.3 -7.0 -0.0 -47.3 16.8 -0.0 -28.0 16.8 -0.0 -32.9 16.8 -0.0 -37.8 16.8 -0.0 -42.9 31.4 -0.0 -47.3 8.0 -0.0 -14.0 8.0 -0.0 -18.6 8.0 -0.0 -24.6 8.0 -0.0 -24.9 8.0 -0.0 -28.0 8.0 -0.0 -32.9 8.0 -0.0 -37.8 8.0 -0.0 -42.9 8.0 -0.0 -47.3 3.9 -0.0 -24.6 3.9 -0.0 -24.9 3.9 -0.0 -28.0 3.9 -0.0 -32.9 3.9 -0.0 -37.8 3.9 -0.0 -42.9 3.9 -0.0 -47.3 -20.1 -0.0 -24.6 -23.0 -0.0 -24.6 -20.1 -0.0 -24.9 -23.0 -0.0 -24.9 -20.1 -0.0 -28.0 -23.0 -0.0 -28.0 -20.1 -0.0 -32.9 -23.0 -0.0 -32.9 -20.1 -0.0 -37.8 -23.0 -0.0 -37.8 -20.1 -0.0 -42.9 -23.0 -0.0 -42.9 -20.1 -0.0 -47.3 -23.0 -0.0 -47.3 -45.9 -0.0 -24.5 -48.7 -0.0 -24.6 -46.4 -0.0 -24.4 -46.7 -0.0 -24.0 -41.8 -0.0 -47.3 -48.7 -0.0 -42.9 -41.8 -0.0 -42.9 -48.7 -0.0 -37.8 -41.8 -0.0 -37.8 -48.7 -0.0 -32.9 -41.8 -0.0 -32.9 -48.7 -0.0 -28.0 -41.8 -0.0 -28.0 -48.7 -0.0 -24.9 -41.8 -0.0 -24.9 -41.8 -0.0 -24.6 -45.4 -0.0 -24.4 -45.0 -0.0 -24.0 -44.9 -0.0 -23.5 -41.8 -0.0 -18.6 -45.0 -0.0 -23.0 -45.4 -0.0 -22.7 -45.9 -0.0 -22.5 -46.4 -0.0 -22.7 -48.7 -0.0 -18.6 -46.7 -0.0 -23.0 -46.9 -0.0 -23.5 16.8 -0.0 -14.0 -12.7 -0.0 -18.6 -12.7 -0.0 -24.6 -12.7 -0.0 -24.9 -12.7 -0.0 -28.0 -12.7 -0.0 -32.9 -36.5 -0.0 -18.6 -36.5 -0.0 -24.6 -36.5 -0.0 -24.9 -36.5 -0.0 -28.0 -36.5 -0.0 -32.9 -50.9 -0.0 -18.6 -51.9 -0.0 -18.6 -50.9 -0.0 -24.6 -51.9 -0.0 -24.6 -50.9 -0.0 -24.9 -51.9 -0.0 -24.9 -50.9 -0.0 -28.0 -51.9 -0.0 -28.0 -50.9 -0.0 -32.9 -51.9 -0.0 -32.9 -50.9 -0.0 -37.8 -51.9 -0.0 -37.8 -50.9 -0.0 -42.9 -51.9 -0.0 -42.9 -50.9 -0.0 -47.3 -52.9 -0.0 -18.6 -52.9 -0.0 -24.6 -52.9 -0.0 -24.9 -52.9 -0.0 -28.0 -52.9 -0.0 -32.9 -52.9 -0.0 -37.8 -52.9 -0.0 -42.9 -58.1 -0.0 -18.6 -58.1 -0.0 -24.6 -58.1 -0.0 -24.9 -58.1 -0.0 -28.0 -7.0 -0.0 -6.6 -16.5 -0.0 -14.0 -16.5 -0.0 -18.6 -16.5 -0.0 -24.6 -16.5 -0.0 -24.9 -16.5 -0.0 -28.0 -16.5 -0.0 -32.9 -19.0 -0.0 -14.0 -19.0 -0.0 -18.6 -19.0 -0.0 -24.6 -19.0 -0.0 -24.9 -19.0 -0.0 -28.0 -19.0 -0.0 -32.9 -19.0 -0.0 -37.8 -19.0 -0.0 -42.9 -19.0 -0.0 -47.3 -28.1 -0.0 -14.0 -32.3 -0.0 -14.0 -28.1 -0.0 -18.6 -32.3 -0.0 -18.6 -28.1 -0.0 -24.6 -32.3 -0.0 -24.6 -28.1 -0.0 -24.9 -32.3 -0.0 -24.9 -32.3 -0.0 -28.0 -32.4 -0.0 -30.8 -33.2 -0.0 -14.0 -33.2 -0.0 -18.6 -33.2 -0.0 -24.6 -33.2 -0.0 -24.9 31.8 -0.0 -6.3 -23.0 -0.0 -6.6 -26.4 -0.0 -42.9 -26.4 -0.0 -37.8 -26.4 -0.0 -32.9 -26.4 -0.0 -28.0 -26.4 -0.0 -24.9 -26.4 -0.0 -24.6 -26.4 -0.0 -18.6 -26.4 -0.0 -14.0 -26.4 -0.0 -11.2 -26.4 -0.0 -6.6 -19.0 -0.0 -6.4 -33.2 -0.0 -6.4 -33.5 -0.0 -1.1 -33.2 -0.0 -1.5 -33.0 -0.0 -2.0 -33.7 -0.0 -6.6 -33.7 -0.0 -11.2 -33.7 -0.0 -14.0 -33.7 -0.0 -18.6 -33.7 -0.0 -24.6 -33.7 -0.0 -24.9 8.0 -0.0 0.3 8.0 -0.0 -6.4 -0.5 -0.0 -6.6 -7.0 -0.0 -6.4 -12.7 -0.0 -6.4 -12.7 -0.0 0.3 -9.5 -0.0 -11.6 8.0 -0.0 -11.2 3.9 -0.0 -6.6 -0.5 -0.0 -6.4 -7.0 -0.0 0.3 -12.7 -0.0 1.9 -23.0 -0.0 0.3 -33.7 -0.0 4.0 -33.7 -0.0 1.9 -33.7 -0.0 0.3 -34.0 -0.0 -1.0 16.8 -0.0 1.9 8.0 -0.0 4.0 12.8 -0.0 4.2 -36.5 -0.0 4.5 -36.5 -0.0 4.0 -36.5 -0.0 1.9 -20.1 -0.0 8.4 -20.1 -0.0 4.5 -20.1 -0.0 4.0 -20.1 -0.0 1.9 -41.8 -0.0 8.4 -41.8 -0.0 4.5 -41.8 -0.0 4.0 -41.8 -0.0 1.9 -41.8 -0.0 0.3 -41.8 -0.0 -6.4 -23.0 -0.0 14.2 -23.6 -0.0 -2.6 -48.7 -0.0 14.2 -48.7 -0.0 8.4 -48.7 -0.0 4.5 -48.7 -0.0 4.0 -48.7 -0.0 1.9 -48.7 -0.0 0.3 -48.7 -0.0 -6.4 -48.7 -0.0 -6.6 -48.7 -0.0 -11.2 -48.7 -0.0 -14.0 -63.2 -0.0 4.8 -62.7 -0.0 4.7 -64.4 -0.0 4.5 -62.2 -0.0 6.6 -62.7 -0.0 6.7 -64.4 -0.0 8.4 -63.2 -0.0 6.6 -64.4 -0.0 -28.0 -64.4 -0.0 -24.9 -64.4 -0.0 -24.6 -64.4 -0.0 -18.6 -64.4 -0.0 -14.0 -64.4 -0.0 -11.2 -64.4 -0.0 -6.6 -58.1 -0.0 -6.6 -64.4 -0.0 -6.4 -58.1 -0.0 -6.4 -64.4 -0.0 0.3 -58.1 -0.0 0.3 -64.4 -0.0 1.9 -58.1 -0.0 1.9 -64.4 -0.0 4.0 -58.1 -0.0 4.0 -58.1 -0.0 4.5 -62.2 -0.0 4.8 -61.9 -0.0 5.2 -61.7 -0.0 5.7 -58.1 -0.0 8.4 -61.9 -0.0 6.2 -63.6 -0.0 6.2 -63.7 -0.0 5.7 -63.6 -0.0 5.2 16.8 -0.0 14.2 8.0 -0.0 14.2 -24.6 -0.0 13.2 -25.4 -0.0 13.0 -26.4 -0.0 14.2 -25.9 -0.0 12.4 -26.1 -0.0 11.7 -24.6 -0.0 10.2 -23.9 -0.0 10.4 -25.4 -0.0 10.4 -25.9 -0.0 10.9 -23.3 -0.0 10.9 -23.1 -0.0 11.7 -23.3 -0.0 12.4 -23.9 -0.0 13.0 -26.3 -0.0 -3.3 -28.1 -0.0 0.3 -28.1 -0.0 1.9 -32.3 -0.0 1.9 -32.3 -0.0 4.0 -33.2 -0.0 4.0 -33.2 -0.0 4.5 -33.7 -0.0 4.5 -33.7 -0.0 8.4 -36.5 -0.0 8.4 -36.5 -0.0 14.2 -41.8 -0.0 14.2 -41.8 -0.0 22.5 -50.9 -0.0 22.5 -50.9 -0.0 14.2 -50.9 -0.0 8.4 -51.9 -0.0 8.4 -50.9 -0.0 4.5 -51.9 -0.0 4.5 -50.9 -0.0 4.0 -51.9 -0.0 4.0 -50.9 -0.0 1.9 -51.9 -0.0 1.9 -50.9 -0.0 0.3 -51.9 -0.0 0.3 -50.9 -0.0 -6.4 -51.9 -0.0 -6.4 -50.9 -0.0 -6.6 -51.9 -0.0 -6.6 -52.9 -0.0 8.4 -52.9 -0.0 4.5 -52.9 -0.0 4.0 -52.9 -0.0 1.9 -52.9 -0.0 0.3 -52.9 -0.0 -6.4 -52.9 -0.0 -6.6 16.8 -0.0 22.5 8.0 -0.0 22.5 3.9 -0.0 22.5 3.9 -0.0 14.2 3.1 -0.0 22.7 4.1 -0.0 2.7 3.9 -0.0 4.5 -0.5 -0.0 4.5 -0.5 -0.0 8.4 -7.0 -0.0 8.4 -7.0 -0.0 14.2 -12.7 -0.0 14.2 -12.7 -0.0 22.5 -16.5 -0.0 24.5 -17.0 -0.0 24.2 -7.0 -0.0 4.5 -12.7 -0.0 8.4 -16.5 -0.0 14.2 -26.4 -0.0 22.5 -28.1 -0.0 14.2 -45.4 -0.0 15.7 -45.0 -0.0 15.3 -44.5 -0.0 15.2 -44.0 -0.0 15.3 -44.0 -0.0 17.1 -44.5 -0.0 17.2 -43.7 -0.0 15.7 -43.5 -0.0 16.2 -43.7 -0.0 16.7 -45.0 -0.0 17.1 -45.4 -0.0 16.7 -45.5 -0.0 16.2 3.6 -0.0 22.8 16.8 -0.0 24.5 -7.0 -0.0 24.5 -12.7 -0.0 24.5 -7.0 -0.0 22.5 -0.5 -0.0 14.2 3.9 -0.0 8.4 -20.1 -0.0 24.5 16.8 -0.0 -11.2 8.0 -0.0 -6.6 3.9 -0.0 -6.4 -0.5 -0.0 0.3 -7.0 -0.0 1.9 -12.7 -0.0 4.0 -16.5 -0.0 4.5 -19.0 -0.0 8.4 -20.1 -0.0 14.2 -23.0 -0.0 22.5 -26.4 -0.0 24.5 -33.2 -0.0 24.5 -28.1 -0.0 4.0 -32.3 -0.0 4.5 -33.2 -0.0 8.4 -33.7 -0.0 14.2 -36.5 -0.0 22.5 -41.8 -0.0 24.5 3.6 -0.0 24.5 3.1 -0.0 24.7 -23.0 -0.0 24.5 -20.1 -0.0 22.5 -19.0 -0.0 14.2 -16.5 -0.0 8.4 -12.7 -0.0 4.5 -7.0 -0.0 4.0 -33.7 -0.0 24.5 -33.2 -0.0 22.5 -32.3 -0.0 14.2 -28.1 -0.0 8.4 -26.4 -0.0 4.0 -28.1 -0.0 4.5 -32.3 -0.0 8.4 -33.2 -0.0 14.2 -33.7 -0.0 22.5 -36.5 -0.0 24.5 -58.1 -0.0 14.2 -58.1 -0.0 22.5 -58.1 -0.0 24.5 -64.4 -0.0 14.2 -64.4 -0.0 22.5 -64.4 -0.0 24.5 -19.6 -33.0 1.7 -18.9 -33.0 -0.8 -17.1 -33.0 -2.7 -14.6 -33.0 -3.3 -12.1 -33.0 -2.7 -10.3 -33.0 -0.8 -9.6 -33.0 1.7 -10.3 -33.0 4.2 -12.1 -33.0 6.0 -14.6 -33.0 6.7 -17.1 -33.0 6.0 -18.9 -33.0 4.2 -28.8 -33.0 -13.5 -26.9 -33.0 -11.7 -24.4 -33.0 -11.0 -21.9 -33.0 -11.7 -20.1 -33.0 -13.5 -19.4 -33.0 -16.0 -20.1 -33.0 -18.5 -21.9 -33.0 -20.3 -24.4 -33.0 -21.0 -26.9 -33.0 -20.3 -28.8 -33.0 -18.5 -29.4 -33.0 -16.0 -32.3 -33.0 -3.0 -30.5 -33.0 -1.2 -29.8 -33.0 1.3 -30.5 -33.0 3.8 -32.3 -33.0 5.7 -34.8 -33.0 6.3 -37.3 -33.0 5.7 -39.1 -33.0 3.8 -39.8 -33.0 1.3 -39.1 -33.0 -1.2 -37.3 -33.0 -3.0 -34.8 -33.0 -3.7 -41.4 -33.0 -15.1 -42.5 -35.0 -13.3 -43.8 -33.0 -10.0 -43.7 -35.0 -10.3 -21.8 -33.0 -24.1 -27.5 -35.0 -24.1 -27.5 -33.0 -24.1 -32.9 -35.0 -22.5 -32.9 -33.0 -22.5 -37.7 -35.0 -19.4 -37.7 -33.0 -19.4 -41.4 -35.0 -15.1 -42.0 -35.0 -14.3 -16.3 -35.0 -22.5 -19.0 -35.0 -23.5 -21.1 -33.0 -24.0 -20.0 -35.0 -23.8 -21.8 -35.0 -24.1 -21.8 -35.0 -24.1 -16.3 -33.0 13.9 -11.5 -35.0 10.8 -11.5 -33.0 10.8 -7.8 -35.0 6.5 -7.8 -33.0 6.5 -5.4 -35.0 1.3 -5.4 -33.0 1.3 -4.6 -35.0 -4.3 -4.6 -33.0 -4.3 -5.4 -35.0 -10.0 -5.4 -33.0 -10.0 -7.8 -35.0 -15.1 -7.8 -33.0 -15.1 -11.5 -35.0 -19.4 -11.5 -33.0 -19.4 -16.3 -33.0 -22.5 -21.8 -35.0 15.5 -21.8 -35.0 15.5 -20.0 -35.0 15.1 -19.0 -35.0 14.9 -16.3 -35.0 13.9 -21.8 -33.0 15.5 -27.5 -33.0 15.5 -27.5 -35.0 15.5 -32.9 -33.0 13.9 -32.9 -35.0 13.9 -37.7 -33.0 10.8 -37.7 -35.0 10.8 -41.4 -35.0 6.5 -39.9 -33.0 8.6 -40.0 -33.0 8.4 -41.4 -33.0 6.5 -43.8 -35.0 -10.0 -44.6 -35.0 -4.3 -44.6 -33.0 -4.3 -43.8 -35.0 1.3 -43.8 -33.0 1.3 -41.4 -33.0 6.5 -23.0 -35.0 -14.2 -23.0 -35.0 -10.3 -28.3 -35.0 -10.3 -17.0 -35.0 2.2 -17.4 -35.0 1.8 -14.2 -35.0 1.9 -22.9 -35.0 -3.3 -22.6 -35.0 -4.3 -21.8 -35.0 -4.7 -23.3 -35.0 12.4 -23.1 -35.0 11.7 -14.2 -35.0 -14.2 -14.2 -35.0 -10.3 -14.2 -35.0 -6.6 -9.5 -35.0 -13.1 -9.3 -35.0 -12.3 -9.5 -35.0 -11.6 -10.0 -35.0 -13.6 -10.8 -35.0 -13.8 -11.5 -35.0 -13.6 -12.1 -35.0 -13.1 -12.3 -35.0 -12.3 -12.1 -35.0 -11.6 -11.5 -35.0 -11.0 -10.8 -35.0 -10.8 -10.0 -35.0 -11.0 -19.0 -35.0 -14.2 -20.1 -35.0 -14.2 -36.0 -35.0 -14.2 -37.7 -35.0 -13.6 -38.5 -35.0 -13.8 -39.8 -35.0 -11.6 -39.2 -35.0 -11.0 -42.3 -35.0 -10.3 -38.5 -35.0 -10.8 -37.7 -35.0 -11.0 -36.0 -35.0 -10.3 -40.0 -35.0 -12.3 -39.2 -35.0 -13.6 -39.8 -35.0 -13.1 -37.2 -35.0 -11.6 -37.0 -35.0 -12.3 -37.2 -35.0 -13.1 -42.3 -35.0 -6.6 -42.3 -35.0 -4.7 -42.3 -35.0 0.3 -42.3 -35.0 1.9 -23.9 -35.0 13.0 -23.3 -35.0 10.9 -23.0 -35.0 7.7 -23.9 -35.0 10.4 -24.6 -35.0 10.2 -28.3 -35.0 7.7 -25.4 -35.0 10.4 -25.9 -35.0 10.9 -26.1 -35.0 11.7 -25.9 -35.0 12.4 -25.4 -35.0 13.0 -24.6 -35.0 13.2 -21.8 -35.0 7.7 -20.1 -35.0 7.7 -19.0 -35.0 7.7 -28.3 -35.0 0.3 -25.6 -35.0 -2.6 -23.0 -35.0 0.3 -24.6 -35.0 -2.3 -23.6 -35.0 -2.6 -23.6 -35.0 -6.1 -24.6 -35.0 -6.3 -23.0 -35.0 -6.6 -28.3 -35.0 -6.6 -25.6 -35.0 -6.1 -26.3 -35.0 -5.3 -28.3 -35.0 -4.7 -26.6 -35.0 -4.3 -26.3 -35.0 -3.3 -22.9 -35.0 -5.3 -21.8 -35.0 -6.6 -16.9 -35.0 -7.0 -17.7 -35.0 -6.8 -19.0 -35.0 -6.6 -18.4 -35.0 -7.0 -19.0 -35.0 -10.3 -17.7 -35.0 -9.8 -16.9 -35.0 -9.6 -16.4 -35.0 -7.6 -16.2 -35.0 -8.3 -16.4 -35.0 -9.1 -19.0 -35.0 -7.6 -20.1 -35.0 -6.6 -19.2 -35.0 -8.3 -20.1 -35.0 -10.3 -19.0 -35.0 -9.1 -18.4 -35.0 -9.6 -18.9 -35.0 2.7 -19.0 -35.0 1.9 -18.8 -35.0 2.2 -18.4 -35.0 1.8 -18.8 -35.0 3.2 -18.4 -35.0 3.5 -17.9 -35.0 3.7 -14.2 -35.0 7.7 -17.4 -35.0 3.5 -17.0 -35.0 3.2 -16.9 -35.0 2.7 -19.0 -35.0 0.3 -17.9 -35.0 1.7 -14.2 -35.0 0.3 -22.4 -35.0 -14.5 -22.8 -35.0 -14.1 -22.9 -35.0 -13.6 -22.8 -35.0 -13.1 -22.4 -35.0 -12.8 -21.8 -35.0 -10.3 -21.9 -35.0 -12.6 -21.4 -35.0 -12.8 -21.1 -35.0 -13.1 -34.0 -35.0 -3.0 -34.5 -35.0 -2.9 -36.0 -35.0 -4.7 -34.9 -35.0 -2.5 -35.0 -35.0 -2.0 -36.0 -35.0 0.3 -34.9 -35.0 -1.5 -34.5 -35.0 -1.1 -34.0 -35.0 0.3 -34.0 -35.0 -1.0 -33.5 -35.0 -1.1 -33.2 -35.0 -2.5 -33.0 -35.0 -2.0 -33.2 -35.0 -1.5 -20.1 -35.0 1.9 -21.8 -35.0 1.9 -23.0 -35.0 1.9 -23.9 -35.0 5.0 -23.3 -35.0 4.4 -23.1 -35.0 3.7 -23.3 -35.0 2.9 -26.1 -35.0 3.7 -25.9 -35.0 4.4 -25.4 -35.0 5.0 -24.6 -35.0 5.2 -23.9 -35.0 2.4 -24.6 -35.0 2.2 -28.3 -35.0 1.9 -25.4 -35.0 2.4 -25.9 -35.0 2.9 -34.0 -35.0 7.7 -34.0 -35.0 1.9 -36.0 -35.0 7.7 -36.0 -35.0 1.9 -20.1 -35.0 0.3 -21.8 -35.0 0.3 -20.1 -35.0 -4.7 -19.0 -35.0 -4.7 -14.2 -35.0 -4.7 -34.0 -35.0 -10.3 -31.5 -35.0 -9.8 -32.3 -35.0 -9.6 -31.5 -35.0 -6.8 -30.8 -35.0 -7.0 -32.8 -35.0 -9.1 -33.0 -35.0 -8.3 -34.0 -35.0 -6.6 -32.8 -35.0 -7.6 -32.3 -35.0 -7.0 -34.0 -35.0 -4.7 -33.5 -35.0 -2.9 -30.2 -35.0 -7.6 -30.0 -35.0 -8.3 -30.2 -35.0 -9.1 -30.8 -35.0 -9.6 -36.0 -35.0 -6.6 -20.9 -35.0 -13.6 -21.1 -35.0 -14.1 -21.4 -35.0 -14.5 -21.9 -35.0 -14.6 -28.3 -35.0 -14.2 -34.0 -35.0 -14.2 -32.8 -33.0 -7.6 -33.0 -33.0 -8.3 -35.0 -33.0 -6.6 -19.3 -33.0 -0.1 -14.2 -33.0 -17.4 -35.0 -33.0 -17.4 -35.0 -33.0 8.4 -29.6 -33.0 8.4 -25.9 -33.0 12.4 -26.1 -33.0 11.7 -14.2 -33.0 8.4 -22.9 -33.0 8.4 -21.1 -33.0 8.4 -19.3 -33.0 8.4 -26.4 -33.0 8.4 -25.9 -33.0 10.9 -25.4 -33.0 10.4 -24.6 -33.0 10.2 -23.9 -33.0 10.4 -23.3 -33.0 10.9 -23.1 -33.0 11.7 -23.3 -33.0 12.4 -23.9 -33.0 13.0 -24.6 -33.0 13.2 -25.4 -33.0 13.0 -39.9 -33.0 -10.3 -38.5 -33.0 -10.8 -39.2 -33.0 -11.0 -40.0 -33.0 -12.3 -39.8 -33.0 -11.6 -39.8 -33.0 -13.1 -39.2 -33.0 -13.6 -38.5 -33.0 -13.8 -37.7 -33.0 -13.6 -37.2 -33.0 -13.1 -37.0 -33.0 -12.3 -35.0 -33.0 -10.3 -37.2 -33.0 -11.6 -37.7 -33.0 -11.0 -39.9 -33.0 -6.6 -39.9 -33.0 -3.5 -39.9 -33.0 -0.1 -39.9 -33.0 6.5 -29.6 -33.0 -17.4 -10.8 -33.0 -10.8 -11.5 -33.0 -11.0 -14.2 -33.0 -10.3 -9.5 -33.0 -11.6 -10.0 -33.0 -11.0 -12.1 -33.0 -11.6 -12.3 -33.0 -12.3 -9.5 -33.0 -13.1 -9.3 -33.0 -12.3 -12.1 -33.0 -13.1 -11.5 -33.0 -13.6 -10.8 -33.0 -13.8 -10.0 -33.0 -13.6 -14.2 -33.0 -3.5 -14.2 -33.0 -6.6 -29.6 -33.0 6.5 -29.6 -33.0 -0.1 -29.6 -33.0 -3.5 -29.6 -33.0 -6.6 -35.0 -33.0 6.5 -19.3 -33.0 -10.3 -19.3 -33.0 -17.4 -29.6 -33.0 -10.3 -21.1 -33.0 -10.3 -22.9 -33.0 -10.3 -26.4 -33.0 -10.3 -19.3 -33.0 -3.5 -19.3 -33.0 6.5 -21.1 -33.0 -3.5 -21.1 -33.0 -6.6 -22.9 -33.0 -5.3 -22.9 -33.0 -6.6 -23.6 -33.0 -6.1 -24.6 -33.0 -6.3 -26.4 -33.0 -6.6 -25.6 -33.0 -6.1 -22.9 -33.0 -3.3 -23.6 -33.0 -2.6 -22.9 -33.0 -0.1 -24.6 -33.0 -2.3 -26.4 -33.0 -0.1 -25.6 -33.0 -2.6 -26.3 -33.0 -3.3 -16.9 -33.0 -9.6 -16.4 -33.0 -9.1 -18.4 -33.0 -9.6 -17.7 -33.0 -9.8 -16.2 -33.0 -8.3 -18.4 -33.0 -7.0 -19.0 -33.0 -7.6 -19.3 -33.0 -6.6 -19.2 -33.0 -8.3 -19.0 -33.0 -9.1 -16.4 -33.0 -7.6 -16.9 -33.0 -7.0 -17.7 -33.0 -6.8 -31.5 -33.0 -9.8 -30.8 -33.0 -9.6 -30.2 -33.0 -9.1 -30.0 -33.0 -8.3 -32.8 -33.0 -9.1 -32.3 -33.0 -9.6 -30.2 -33.0 -7.6 -30.8 -33.0 -7.0 -31.5 -33.0 -6.8 -32.3 -33.0 -7.0 -21.1 -33.0 -0.1 -21.1 -33.0 6.5 -22.9 -33.0 6.5 -23.3 -33.0 2.9 -23.1 -33.0 3.7 -22.6 -33.0 -4.3 -23.3 -33.0 4.4 -25.9 -33.0 2.9 -26.1 -33.0 3.7 -26.4 -33.0 6.5 -25.9 -33.0 4.4 -25.4 -33.0 2.4 -24.6 -33.0 2.2 -23.9 -33.0 2.4 -23.9 -33.0 5.0 -24.6 -33.0 5.2 -25.4 -33.0 5.0 -26.3 -33.0 -5.3 -26.6 -33.0 -4.3 -85.3 20.0 -68.3 -85.3 -25.0 -68.3 35.6 20.0 -68.3 35.6 -25.0 -68.3)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "base_link"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link1-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link1-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link1_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i(0 1 2 2 1 3 2 4 0 0 4 5 0 5 6 6 5 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 14 15 16 16 15 17 16 17 18 18 17 19 18 19 20 20 19 21 21 19 22 21 22 23 1 24 3 3 24 25 3 25 26 26 25 27 26 27 28 28 27 29 28 29 30 30 29 31 30 31 32 32 31 33 32 33 34 34 33 35 34 35 36 36 35 37 36 37 38 38 37 39 38 39 40 40 39 41 40 41 42 42 41 43 42 43 44 44 43 45 44 45 46 46 45 47 46 47 48 48 47 49 48 49 50 50 49 51 50 51 52 52 51 53 52 53 54 54 53 55 54 55 56 56 55 57 56 57 58 58 57 59 58 59 60 60 59 61 60 61 62 62 61 63 62 63 64 64 63 65 64 65 66 66 65 67 66 67 68 68 67 69 68 69 70 70 69 71 70 71 72 72 71 73 72 73 74 74 73 75 74 75 76 76 75 77 76 77 78 78 77 79 78 79 80 80 79 23 80 23 81 81 23 22 82 83 84 85 86 87 88 89 90 91 92 93 14 16 94 95 96 21 75 73 97 33 98 35 6 99 0 0 99 84 0 84 1 1 84 24 100 25 24 101 102 100 25 103 27 27 103 104 27 104 29 29 104 105 29 105 31 31 105 106 31 106 33 33 106 107 33 107 98 98 107 108 98 108 109 102 110 100 100 110 111 100 111 25 25 111 112 25 112 103 35 98 37 37 98 113 37 113 39 39 113 114 39 114 41 41 114 115 41 115 43 116 117 118 118 117 119 118 119 120 51 49 121 121 49 47 121 47 115 115 47 45 115 45 43 122 55 123 123 55 53 123 53 124 124 53 51 124 51 125 125 51 121 125 121 126 126 121 120 127 128 129 129 128 130 122 127 55 55 127 129 55 129 57 57 129 131 57 131 59 67 65 132 132 65 63 132 63 131 131 63 61 131 61 59 73 71 97 97 71 69 97 69 133 134 79 77 87 135 136 136 137 134 134 137 138 79 139 23 23 139 140 23 140 21 21 140 141 21 141 95 138 142 134 134 142 143 134 143 79 79 143 144 79 144 139 18 20 86 86 20 21 86 21 87 87 21 96 87 96 135 6 8 99 99 8 10 99 10 94 94 10 12 94 12 14 145 146 147 147 146 148 147 148 90 90 148 149 90 149 88 150 151 152 152 151 92 152 92 153 153 92 91 154 155 87 154 87 156 155 157 87 87 157 90 87 90 85 85 90 89 85 89 93 93 89 158 93 158 91 157 159 90 90 159 160 90 160 147 147 160 161 147 161 162 136 134 87 87 134 163 87 163 156 162 164 147 147 164 165 147 165 134 134 165 166 134 166 163 77 75 134 134 75 97 134 97 147 147 97 133 147 133 145 145 133 167 145 167 168 168 167 151 168 151 169 169 151 150 16 18 94 94 18 86 94 86 99 99 86 85 99 85 84 84 85 93 24 84 100 100 84 83 100 83 170 171 172 93 93 172 173 170 174 100 100 174 175 100 175 176 176 175 177 176 177 171 173 178 93 93 178 179 93 179 84 84 179 180 84 180 82 171 93 176 176 93 92 176 92 181 181 92 151 181 151 182 118 182 183 183 182 184 183 185 118 118 185 186 118 186 167 167 186 187 167 187 188 189 151 190 190 151 167 190 167 191 191 167 188 189 192 151 151 192 193 151 193 182 182 193 194 182 194 184 69 67 133 133 67 132 133 132 167 167 132 131 167 131 118 118 131 129 118 129 116 116 129 130 120 121 118 118 121 115 118 115 182 182 115 114 182 114 181 181 114 113 181 113 176 176 113 98 176 98 100 100 98 109 100 109 101 195 196 197 198 199 200 201 202 203 38 40 204 46 48 205 62 64 206 13 11 207 7 5 208 4 2 209 7 208 9 210 19 211 211 19 17 211 17 207 207 17 15 207 15 13 212 213 214 215 216 210 210 216 22 210 22 19 213 217 214 214 217 218 214 218 210 210 218 219 210 219 215 216 220 22 22 220 221 22 221 81 81 221 222 81 222 80 80 222 223 80 223 224 224 212 80 80 212 214 80 214 78 78 214 76 68 70 225 225 70 72 225 72 74 225 226 68 68 226 206 68 206 66 66 206 64 227 228 205 229 230 231 58 232 56 56 232 233 231 234 229 229 234 235 229 235 232 232 235 236 232 236 233 237 52 238 238 52 54 238 54 239 239 54 56 239 56 240 240 56 233 237 227 52 52 227 205 52 205 50 50 205 48 44 46 241 241 46 205 241 205 229 229 205 228 229 228 230 38 204 36 201 203 242 243 26 244 244 26 245 245 26 246 246 26 28 246 28 247 247 28 30 247 30 248 248 30 32 248 32 249 249 32 34 249 34 250 250 34 251 250 251 252 2 3 209 209 3 26 209 26 203 203 26 243 203 243 242 198 200 253 254 255 256 257 258 259 258 257 260 260 257 261 260 261 262 262 261 263 262 263 264 198 265 199 199 265 266 199 266 263 263 266 267 263 267 264 40 42 204 204 42 268 204 268 269 269 268 270 269 270 257 271 272 273 272 274 273 273 274 203 273 203 251 251 203 202 251 202 252 274 275 203 203 275 276 203 276 209 209 276 277 209 277 278 278 279 209 209 279 280 209 280 197 197 280 281 197 281 195 255 282 256 256 282 197 256 197 273 273 197 196 273 196 271 34 36 251 251 36 204 251 204 273 273 204 269 273 269 256 256 269 257 256 257 254 254 257 259 283 284 229 229 284 285 285 286 229 229 286 270 229 270 241 241 270 268 241 268 44 44 268 42 286 287 270 270 287 288 270 288 257 257 288 289 257 289 290 290 291 257 257 291 292 257 292 261 261 292 293 261 293 294 58 60 232 232 60 295 232 295 229 229 295 261 229 261 283 283 261 294 282 253 197 197 253 200 197 200 209 209 200 208 209 208 4 4 208 5 296 263 297 297 263 214 297 214 298 299 300 210 296 301 263 263 301 302 263 302 199 199 302 303 199 303 304 304 299 199 199 299 210 199 210 200 200 210 211 200 211 208 208 211 207 208 207 9 9 207 11 300 305 210 210 305 306 210 306 214 214 306 307 214 307 298 60 62 295 295 62 206 295 206 261 261 206 226 261 226 263 263 226 225 263 225 214 214 225 74 214 74 76 289 193 290 290 193 192 290 192 291 291 192 189 291 189 292 292 189 190 292 190 293 293 190 191 293 191 294 294 191 188 294 188 283 283 188 187 283 187 284 284 187 186 284 186 285 285 186 185 285 185 286 286 185 183 286 183 287 287 183 184 287 184 288 288 184 194 288 194 289 289 194 193 230 120 231 231 120 119 231 119 234 234 119 117 234 117 235 235 117 116 235 116 236 236 116 130 236 130 233 233 130 128 233 128 240 240 128 127 240 127 239 239 127 122 239 122 238 238 122 123 238 123 237 237 123 124 237 124 227 227 124 125 227 125 228 228 125 126 228 126 230 230 126 120 277 83 278 278 83 82 278 82 279 279 82 180 279 180 280 280 180 179 280 179 281 281 179 178 281 178 195 195 178 173 195 173 196 196 173 172 196 172 271 271 172 171 271 171 272 272 171 177 272 177 274 274 177 175 274 175 275 275 175 174 275 174 276 276 174 170 276 170 277 277 170 83 246 104 245 245 104 103 245 103 244 244 103 112 244 112 243 243 112 111 243 111 242 242 111 110 242 110 201 201 110 102 201 102 202 202 102 101 202 101 252 252 101 109 252 109 250 250 109 108 250 108 249 249 108 107 249 107 248 248 107 106 248 106 247 247 106 105 247 105 246 246 105 104 253 158 198 198 158 89 198 89 265 265 89 88 265 88 266 266 88 149 266 149 267 267 149 148 267 148 264 264 148 146 264 146 262 262 146 145 262 145 260 260 145 168 260 168 258 258 168 169 258 169 259 259 169 150 259 150 254 254 150 152 254 152 255 255 152 153 255 153 282 282 153 91 282 91 253 253 91 158 299 157 300 300 157 155 300 155 305 305 155 154 305 154 306 306 154 156 306 156 307 307 156 163 307 163 298 298 163 166 298 166 297 297 166 165 297 165 296 296 165 164 296 164 301 301 164 162 301 162 302 302 162 161 302 161 303 303 161 160 303 160 304 304 160 159 304 159 299 299 159 157 216 96 220 220 96 95 220 95 221 221 95 141 221 141 222 222 141 140 222 140 223 223 140 139 223 139 224 224 139 144 224 144 212 212 144 143 212 143 213 213 143 142 213 142 217 217 142 138 217 138 218 218 138 137 218 137 219 219 137 136 219 136 215 215 136 135 215 135 216 216 135 96))
                   (list :vertices (let ((mat (make-matrix 308 3))) (fvector-replace (array-entity mat) #f(-10.1 1.6 2.0 -10.0 0.0 2.0 -10.0 0.0 0.0 -10.1 -1.6 0.0 -10.1 1.6 0.0 -10.6 4.8 0.0 -10.6 4.8 2.0 -11.6 7.8 0.0 -11.6 7.8 2.0 -13.1 10.7 0.0 -13.1 10.7 2.0 -15.0 13.3 0.0 -15.0 13.3 2.0 -17.4 15.5 0.0 -17.4 15.5 2.0 -20.0 17.3 0.0 -20.0 17.3 2.0 -22.9 18.7 0.0 -22.9 18.7 2.0 -26.0 19.6 0.0 -26.0 19.6 2.0 -28.2 19.9 2.0 -28.2 19.9 0.0 -29.2 20.0 2.0 -10.1 -1.6 2.0 -10.6 -4.8 2.0 -10.6 -4.8 0.0 -11.6 -7.8 2.0 -11.6 -7.8 0.0 -13.1 -10.7 2.0 -13.1 -10.7 0.0 -15.0 -13.3 2.0 -15.0 -13.3 0.0 -17.4 -15.5 2.0 -17.4 -15.5 0.0 -20.0 -17.3 2.0 -20.0 -17.3 0.0 -22.9 -18.7 2.0 -22.9 -18.7 0.0 -26.0 -19.6 2.0 -26.0 -19.6 0.0 -29.2 -20.0 2.0 -29.2 -20.0 0.0 -32.4 -19.9 2.0 -32.4 -19.9 0.0 -35.6 -19.2 2.0 -35.6 -19.2 0.0 -38.6 -18.1 2.0 -38.6 -18.1 0.0 -41.4 -16.5 2.0 -41.4 -16.5 0.0 -43.9 -14.4 2.0 -43.9 -14.4 0.0 -46.0 -12.0 2.0 -46.0 -12.0 0.0 -47.7 -9.3 2.0 -47.7 -9.3 0.0 -49.0 -6.3 2.0 -49.0 -6.3 0.0 -49.7 -3.2 2.0 -49.7 -3.2 0.0 -50.0 0.0 2.0 -50.0 0.0 0.0 -49.7 3.2 2.0 -49.7 3.2 0.0 -49.0 6.3 2.0 -49.0 6.3 0.0 -47.7 9.3 2.0 -47.7 9.3 0.0 -46.0 12.0 2.0 -46.0 12.0 0.0 -43.9 14.4 2.0 -43.9 14.4 0.0 -41.4 16.5 2.0 -41.4 16.5 0.0 -38.6 18.1 2.0 -38.6 18.1 0.0 -35.6 19.2 2.0 -35.6 19.2 0.0 -32.4 19.9 2.0 -32.4 19.9 0.0 -29.2 20.0 0.0 -21.8 -3.3 2.0 -21.6 -4.0 2.0 -19.6 -2.2 2.0 -26.3 4.3 2.0 -26.3 12.0 2.0 -28.2 12.0 2.0 -28.9 1.6 2.0 -28.2 0.9 2.0 -28.2 4.3 2.0 -28.2 -0.9 2.0 -28.2 -2.2 2.0 -26.3 -2.2 2.0 -19.6 12.0 2.0 -28.7 16.8 2.0 -28.5 16.0 2.0 -40.4 12.0 2.0 -19.6 -14.8 2.0 -19.6 4.3 2.0 -19.6 -6.0 2.0 -17.6 -8.0 2.0 -17.4 -7.2 2.0 -14.8 -7.2 2.0 -14.6 -8.0 2.0 -14.8 -8.8 2.0 -15.4 -9.3 2.0 -16.1 -9.5 2.0 -16.9 -9.3 2.0 -17.4 -8.8 2.0 -16.9 -6.7 2.0 -16.1 -6.5 2.0 -15.4 -6.7 2.0 -26.3 -14.8 2.0 -28.2 -14.8 2.0 -31.8 -14.8 2.0 -43.9 -6.5 2.0 -43.1 -6.7 2.0 -40.4 -6.0 2.0 -42.6 -7.2 2.0 -42.4 -8.0 2.0 -40.4 -14.8 2.0 -45.2 -8.8 2.0 -44.6 -9.3 2.0 -43.9 -9.5 2.0 -43.1 -9.3 2.0 -42.6 -8.8 2.0 -45.4 -8.0 2.0 -45.2 -7.2 2.0 -47.7 -6.0 2.0 -44.6 -6.7 2.0 -47.7 -2.2 2.0 -47.7 4.3 2.0 -40.4 4.3 2.0 -31.8 12.0 2.0 -28.7 15.3 2.0 -29.2 14.7 2.0 -30.0 14.5 2.0 -30.8 14.7 2.0 -30.8 17.3 2.0 -30.0 17.5 2.0 -29.2 17.3 2.0 -31.3 15.3 2.0 -31.5 16.0 2.0 -31.3 16.8 2.0 -31.9 0.5 2.0 -31.5 1.3 2.0 -31.8 4.3 2.0 -30.7 1.9 2.0 -29.8 2.0 2.0 -30.7 -1.9 2.0 -31.8 -2.2 2.0 -29.8 -2.0 2.0 -28.9 -1.6 2.0 -29.2 9.3 2.0 -28.7 8.8 2.0 -30.0 9.5 2.0 -28.5 8.0 2.0 -28.0 0.0 2.0 -28.7 7.2 2.0 -29.2 6.7 2.0 -30.0 6.5 2.0 -30.8 6.7 2.0 -30.8 9.3 2.0 -31.3 7.2 2.0 -31.5 8.0 2.0 -31.3 8.8 2.0 -40.4 -2.2 2.0 -31.9 -0.5 2.0 -31.5 -1.3 2.0 -21.8 -4.7 2.0 -24.4 -4.7 2.0 -24.6 -4.0 2.0 -24.4 -3.3 2.0 -22.3 -5.3 2.0 -23.1 -5.5 2.0 -26.3 -6.0 2.0 -23.8 -5.3 2.0 -23.8 -2.7 2.0 -23.1 -2.5 2.0 -22.3 -2.7 2.0 -28.2 -6.0 2.0 -31.8 -6.0 2.0 -36.9 -5.5 2.0 -36.2 -5.3 2.0 -37.7 -5.3 2.0 -38.2 -4.7 2.0 -38.4 -4.0 2.0 -38.2 -3.3 2.0 -36.2 -2.7 2.0 -36.9 -2.5 2.0 -37.7 -2.7 2.0 -35.6 -3.3 2.0 -35.4 -4.0 2.0 -35.6 -4.7 2.0 -24.4 -3.3 0.0 -24.6 -4.0 0.0 -26.3 -2.2 0.0 -28.2 0.9 0.0 -28.2 4.3 0.0 -26.3 4.3 0.0 -17.4 -7.2 0.0 -17.6 -8.0 0.0 -19.6 -6.0 0.0 -26.3 -14.8 0.0 -40.4 -14.8 0.0 -47.7 4.3 0.0 -19.6 12.0 0.0 -19.6 4.3 0.0 -19.6 -2.2 0.0 -28.2 12.0 0.0 -26.3 12.0 0.0 -31.5 16.0 0.0 -31.3 15.3 0.0 -31.8 12.0 0.0 -28.7 15.3 0.0 -28.5 16.0 0.0 -30.8 14.7 0.0 -30.0 14.5 0.0 -29.2 14.7 0.0 -28.7 16.8 0.0 -29.2 17.3 0.0 -30.0 17.5 0.0 -30.8 17.3 0.0 -31.3 16.8 0.0 -40.4 12.0 0.0 -40.4 4.3 0.0 -43.1 -9.3 0.0 -42.6 -8.8 0.0 -40.4 -6.0 0.0 -42.4 -8.0 0.0 -42.6 -7.2 0.0 -47.7 -6.0 0.0 -45.2 -7.2 0.0 -43.1 -6.7 0.0 -43.9 -6.5 0.0 -44.6 -6.7 0.0 -43.9 -9.5 0.0 -44.6 -9.3 0.0 -45.2 -8.8 0.0 -45.4 -8.0 0.0 -31.8 -14.8 0.0 -16.9 -6.7 0.0 -16.1 -6.5 0.0 -15.4 -6.7 0.0 -14.8 -7.2 0.0 -14.6 -8.0 0.0 -14.8 -8.8 0.0 -15.4 -9.3 0.0 -16.1 -9.5 0.0 -16.9 -9.3 0.0 -19.6 -14.8 0.0 -17.4 -8.8 0.0 -28.0 -0.0 0.0 -29.8 -2.0 0.0 -28.9 -1.6 0.0 -28.2 -2.2 0.0 -31.8 -2.2 0.0 -31.5 -1.3 0.0 -30.7 -1.9 0.0 -31.9 -0.5 0.0 -40.4 -2.2 0.0 -31.9 0.5 0.0 -31.8 4.3 0.0 -31.5 1.3 0.0 -28.9 1.6 0.0 -29.8 2.0 0.0 -30.7 1.9 0.0 -28.2 -14.8 0.0 -28.2 -6.0 0.0 -31.8 -6.0 0.0 -24.4 -4.7 0.0 -23.8 -5.3 0.0 -26.3 -6.0 0.0 -23.1 -5.5 0.0 -22.3 -5.3 0.0 -21.8 -4.7 0.0 -21.6 -4.0 0.0 -21.8 -3.3 0.0 -22.3 -2.7 0.0 -23.1 -2.5 0.0 -23.8 -2.7 0.0 -28.2 -0.9 0.0 -38.4 -4.0 0.0 -38.2 -4.7 0.0 -37.7 -5.3 0.0 -36.9 -5.5 0.0 -36.2 -5.3 0.0 -35.6 -4.7 0.0 -35.4 -4.0 0.0 -35.6 -3.3 0.0 -36.2 -2.7 0.0 -36.9 -2.5 0.0 -37.7 -2.7 0.0 -38.2 -3.3 0.0 -47.7 -2.2 0.0 -31.3 7.2 0.0 -31.5 8.0 0.0 -31.3 8.8 0.0 -28.5 8.0 0.0 -28.7 8.8 0.0 -30.8 6.7 0.0 -30.0 6.5 0.0 -29.2 6.7 0.0 -28.7 7.2 0.0 -29.2 9.3 0.0 -30.0 9.5 0.0 -30.8 9.3 0.0)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link1"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link2-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link2-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link2_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i(0 1 2 2 1 3 2 4 0 0 4 5 0 5 6 6 5 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 14 15 16 16 15 17 16 17 18 18 17 19 18 19 20 20 19 21 21 19 22 21 22 23 1 24 3 3 24 25 3 25 26 26 25 27 26 27 28 28 27 29 28 29 30 30 29 31 30 31 32 32 31 33 32 33 34 34 33 35 34 35 36 36 35 37 36 37 38 38 37 39 38 39 40 40 39 41 40 41 42 42 41 43 42 43 44 44 43 45 44 45 46 46 45 47 46 47 48 48 47 49 48 49 50 50 49 51 50 51 52 52 51 53 52 53 54 54 53 55 54 55 56 56 55 57 56 57 58 58 57 59 58 59 60 60 59 61 60 61 62 62 61 63 62 63 64 64 63 65 64 65 66 66 65 67 66 67 68 68 67 69 68 69 70 70 69 71 70 71 72 72 71 73 72 73 74 74 73 75 74 75 76 76 75 77 76 77 78 78 77 79 78 79 80 80 79 23 80 23 81 81 23 22 82 83 84 85 86 87 88 89 90 91 92 93 14 16 94 95 96 21 75 73 97 33 98 35 6 99 0 0 99 84 0 84 1 1 84 24 100 25 24 101 102 100 25 103 27 27 103 104 27 104 29 29 104 105 29 105 31 31 105 106 31 106 33 33 106 107 33 107 98 98 107 108 98 108 109 102 110 100 100 110 111 100 111 25 25 111 112 25 112 103 35 98 37 37 98 113 37 113 39 39 113 114 39 114 41 41 114 115 41 115 43 116 117 118 118 117 119 118 119 120 51 49 121 121 49 47 121 47 115 115 47 45 115 45 43 122 55 123 123 55 53 123 53 124 124 53 51 124 51 125 125 51 121 125 121 126 126 121 120 127 128 129 129 128 130 122 127 55 55 127 129 55 129 57 57 129 131 57 131 59 67 65 132 132 65 63 132 63 131 131 63 61 131 61 59 73 71 97 97 71 69 97 69 133 134 79 77 87 135 136 136 137 134 134 137 138 79 139 23 23 139 140 23 140 21 21 140 141 21 141 95 138 142 134 134 142 143 134 143 79 79 143 144 79 144 139 18 20 86 86 20 21 86 21 87 87 21 96 87 96 135 6 8 99 99 8 10 99 10 94 94 10 12 94 12 14 145 146 147 147 146 148 147 148 90 90 148 149 90 149 88 150 151 152 152 151 92 152 92 153 153 92 91 154 155 87 154 87 156 155 157 87 87 157 90 87 90 85 85 90 89 85 89 93 93 89 158 93 158 91 157 159 90 90 159 160 90 160 147 147 160 161 147 161 162 136 134 87 87 134 163 87 163 156 162 164 147 147 164 165 147 165 134 134 165 166 134 166 163 77 75 134 134 75 97 134 97 147 147 97 133 147 133 145 145 133 167 145 167 168 168 167 151 168 151 169 169 151 150 16 18 94 94 18 86 94 86 99 99 86 85 99 85 84 84 85 93 24 84 100 100 84 83 100 83 170 171 172 93 93 172 173 170 174 100 100 174 175 100 175 176 176 175 177 176 177 171 173 178 93 93 178 179 93 179 84 84 179 180 84 180 82 171 93 176 176 93 92 176 92 181 181 92 151 181 151 182 118 182 183 183 182 184 183 185 118 118 185 186 118 186 167 167 186 187 167 187 188 189 151 190 190 151 167 190 167 191 191 167 188 189 192 151 151 192 193 151 193 182 182 193 194 182 194 184 69 67 133 133 67 132 133 132 167 167 132 131 167 131 118 118 131 129 118 129 116 116 129 130 120 121 118 118 121 115 118 115 182 182 115 114 182 114 181 181 114 113 181 113 176 176 113 98 176 98 100 100 98 109 100 109 101 195 196 197 198 199 200 201 202 203 38 40 204 46 48 205 62 64 206 13 11 207 7 5 208 4 2 209 7 208 9 210 19 211 211 19 17 211 17 207 207 17 15 207 15 13 212 213 214 215 216 210 210 216 22 210 22 19 213 217 214 214 217 218 214 218 210 210 218 219 210 219 215 216 220 22 22 220 221 22 221 81 81 221 222 81 222 80 80 222 223 80 223 224 224 212 80 80 212 214 80 214 78 78 214 76 68 70 225 225 70 72 225 72 74 225 226 68 68 226 206 68 206 66 66 206 64 227 228 205 229 230 231 58 232 56 56 232 233 231 234 229 229 234 235 229 235 232 232 235 236 232 236 233 237 52 238 238 52 54 238 54 239 239 54 56 239 56 240 240 56 233 237 227 52 52 227 205 52 205 50 50 205 48 44 46 241 241 46 205 241 205 229 229 205 228 229 228 230 38 204 36 201 203 242 243 26 244 244 26 245 245 26 246 246 26 28 246 28 247 247 28 30 247 30 248 248 30 32 248 32 249 249 32 34 249 34 250 250 34 251 250 251 252 2 3 209 209 3 26 209 26 203 203 26 243 203 243 242 198 200 253 254 255 256 257 258 259 258 257 260 260 257 261 260 261 262 262 261 263 262 263 264 198 265 199 199 265 266 199 266 263 263 266 267 263 267 264 40 42 204 204 42 268 204 268 269 269 268 270 269 270 257 271 272 273 272 274 273 273 274 203 273 203 251 251 203 202 251 202 252 274 275 203 203 275 276 203 276 209 209 276 277 209 277 278 278 279 209 209 279 280 209 280 197 197 280 281 197 281 195 255 282 256 256 282 197 256 197 273 273 197 196 273 196 271 34 36 251 251 36 204 251 204 273 273 204 269 273 269 256 256 269 257 256 257 254 254 257 259 283 284 229 229 284 285 285 286 229 229 286 270 229 270 241 241 270 268 241 268 44 44 268 42 286 287 270 270 287 288 270 288 257 257 288 289 257 289 290 290 291 257 257 291 292 257 292 261 261 292 293 261 293 294 58 60 232 232 60 295 232 295 229 229 295 261 229 261 283 283 261 294 282 253 197 197 253 200 197 200 209 209 200 208 209 208 4 4 208 5 296 263 297 297 263 214 297 214 298 299 300 210 296 301 263 263 301 302 263 302 199 199 302 303 199 303 304 304 299 199 199 299 210 199 210 200 200 210 211 200 211 208 208 211 207 208 207 9 9 207 11 300 305 210 210 305 306 210 306 214 214 306 307 214 307 298 60 62 295 295 62 206 295 206 261 261 206 226 261 226 263 263 226 225 263 225 214 214 225 74 214 74 76 289 193 290 290 193 192 290 192 291 291 192 189 291 189 292 292 189 190 292 190 293 293 190 191 293 191 294 294 191 188 294 188 283 283 188 187 283 187 284 284 187 186 284 186 285 285 186 185 285 185 286 286 185 183 286 183 287 287 183 184 287 184 288 288 184 194 288 194 289 289 194 193 230 120 231 231 120 119 231 119 234 234 119 117 234 117 235 235 117 116 235 116 236 236 116 130 236 130 233 233 130 128 233 128 240 240 128 127 240 127 239 239 127 122 239 122 238 238 122 123 238 123 237 237 123 124 237 124 227 227 124 125 227 125 228 228 125 126 228 126 230 230 126 120 277 83 278 278 83 82 278 82 279 279 82 180 279 180 280 280 180 179 280 179 281 281 179 178 281 178 195 195 178 173 195 173 196 196 173 172 196 172 271 271 172 171 271 171 272 272 171 177 272 177 274 274 177 175 274 175 275 275 175 174 275 174 276 276 174 170 276 170 277 277 170 83 246 104 245 245 104 103 245 103 244 244 103 112 244 112 243 243 112 111 243 111 242 242 111 110 242 110 201 201 110 102 201 102 202 202 102 101 202 101 252 252 101 109 252 109 250 250 109 108 250 108 249 249 108 107 249 107 248 248 107 106 248 106 247 247 106 105 247 105 246 246 105 104 253 158 198 198 158 89 198 89 265 265 89 88 265 88 266 266 88 149 266 149 267 267 149 148 267 148 264 264 148 146 264 146 262 262 146 145 262 145 260 260 145 168 260 168 258 258 168 169 258 169 259 259 169 150 259 150 254 254 150 152 254 152 255 255 152 153 255 153 282 282 153 91 282 91 253 253 91 158 299 157 300 300 157 155 300 155 305 305 155 154 305 154 306 306 154 156 306 156 307 307 156 163 307 163 298 298 163 166 298 166 297 297 166 165 297 165 296 296 165 164 296 164 301 301 164 162 301 162 302 302 162 161 302 161 303 303 161 160 303 160 304 304 160 159 304 159 299 299 159 157 216 96 220 220 96 95 220 95 221 221 95 141 221 141 222 222 141 140 222 140 223 223 140 139 223 139 224 224 139 144 224 144 212 212 144 143 212 143 213 213 143 142 213 142 217 217 142 138 217 138 218 218 138 137 218 137 219 219 137 136 219 136 215 215 136 135 215 135 216 216 135 96))
                   (list :vertices (let ((mat (make-matrix 308 3))) (fvector-replace (array-entity mat) #f(-10.1 1.6 2.0 -10.0 0.0 2.0 -10.0 0.0 0.0 -10.1 -1.6 0.0 -10.1 1.6 0.0 -10.6 4.8 0.0 -10.6 4.8 2.0 -11.6 7.8 0.0 -11.6 7.8 2.0 -13.1 10.7 0.0 -13.1 10.7 2.0 -15.0 13.3 0.0 -15.0 13.3 2.0 -17.4 15.5 0.0 -17.4 15.5 2.0 -20.0 17.3 0.0 -20.0 17.3 2.0 -22.9 18.7 0.0 -22.9 18.7 2.0 -26.0 19.6 0.0 -26.0 19.6 2.0 -28.2 19.9 2.0 -28.2 19.9 0.0 -29.2 20.0 2.0 -10.1 -1.6 2.0 -10.6 -4.8 2.0 -10.6 -4.8 0.0 -11.6 -7.8 2.0 -11.6 -7.8 0.0 -13.1 -10.7 2.0 -13.1 -10.7 0.0 -15.0 -13.3 2.0 -15.0 -13.3 0.0 -17.4 -15.5 2.0 -17.4 -15.5 0.0 -20.0 -17.3 2.0 -20.0 -17.3 0.0 -22.9 -18.7 2.0 -22.9 -18.7 0.0 -26.0 -19.6 2.0 -26.0 -19.6 0.0 -29.2 -20.0 2.0 -29.2 -20.0 0.0 -32.4 -19.9 2.0 -32.4 -19.9 0.0 -35.6 -19.2 2.0 -35.6 -19.2 0.0 -38.6 -18.1 2.0 -38.6 -18.1 0.0 -41.4 -16.5 2.0 -41.4 -16.5 0.0 -43.9 -14.4 2.0 -43.9 -14.4 0.0 -46.0 -12.0 2.0 -46.0 -12.0 0.0 -47.7 -9.3 2.0 -47.7 -9.3 0.0 -49.0 -6.3 2.0 -49.0 -6.3 0.0 -49.7 -3.2 2.0 -49.7 -3.2 0.0 -50.0 0.0 2.0 -50.0 0.0 0.0 -49.7 3.2 2.0 -49.7 3.2 0.0 -49.0 6.3 2.0 -49.0 6.3 0.0 -47.7 9.3 2.0 -47.7 9.3 0.0 -46.0 12.0 2.0 -46.0 12.0 0.0 -43.9 14.4 2.0 -43.9 14.4 0.0 -41.4 16.5 2.0 -41.4 16.5 0.0 -38.6 18.1 2.0 -38.6 18.1 0.0 -35.6 19.2 2.0 -35.6 19.2 0.0 -32.4 19.9 2.0 -32.4 19.9 0.0 -29.2 20.0 0.0 -21.8 -3.3 2.0 -21.6 -4.0 2.0 -19.6 -2.2 2.0 -26.3 4.3 2.0 -26.3 12.0 2.0 -28.2 12.0 2.0 -28.9 1.6 2.0 -28.2 0.9 2.0 -28.2 4.3 2.0 -28.2 -0.9 2.0 -28.2 -2.2 2.0 -26.3 -2.2 2.0 -19.6 12.0 2.0 -28.7 16.8 2.0 -28.5 16.0 2.0 -40.4 12.0 2.0 -19.6 -14.8 2.0 -19.6 4.3 2.0 -19.6 -6.0 2.0 -17.6 -8.0 2.0 -17.4 -7.2 2.0 -14.8 -7.2 2.0 -14.6 -8.0 2.0 -14.8 -8.8 2.0 -15.4 -9.3 2.0 -16.1 -9.5 2.0 -16.9 -9.3 2.0 -17.4 -8.8 2.0 -16.9 -6.7 2.0 -16.1 -6.5 2.0 -15.4 -6.7 2.0 -26.3 -14.8 2.0 -28.2 -14.8 2.0 -31.8 -14.8 2.0 -43.9 -6.5 2.0 -43.1 -6.7 2.0 -40.4 -6.0 2.0 -42.6 -7.2 2.0 -42.4 -8.0 2.0 -40.4 -14.8 2.0 -45.2 -8.8 2.0 -44.6 -9.3 2.0 -43.9 -9.5 2.0 -43.1 -9.3 2.0 -42.6 -8.8 2.0 -45.4 -8.0 2.0 -45.2 -7.2 2.0 -47.7 -6.0 2.0 -44.6 -6.7 2.0 -47.7 -2.2 2.0 -47.7 4.3 2.0 -40.4 4.3 2.0 -31.8 12.0 2.0 -28.7 15.3 2.0 -29.2 14.7 2.0 -30.0 14.5 2.0 -30.8 14.7 2.0 -30.8 17.3 2.0 -30.0 17.5 2.0 -29.2 17.3 2.0 -31.3 15.3 2.0 -31.5 16.0 2.0 -31.3 16.8 2.0 -31.9 0.5 2.0 -31.5 1.3 2.0 -31.8 4.3 2.0 -30.7 1.9 2.0 -29.8 2.0 2.0 -30.7 -1.9 2.0 -31.8 -2.2 2.0 -29.8 -2.0 2.0 -28.9 -1.6 2.0 -29.2 9.3 2.0 -28.7 8.8 2.0 -30.0 9.5 2.0 -28.5 8.0 2.0 -28.0 0.0 2.0 -28.7 7.2 2.0 -29.2 6.7 2.0 -30.0 6.5 2.0 -30.8 6.7 2.0 -30.8 9.3 2.0 -31.3 7.2 2.0 -31.5 8.0 2.0 -31.3 8.8 2.0 -40.4 -2.2 2.0 -31.9 -0.5 2.0 -31.5 -1.3 2.0 -21.8 -4.7 2.0 -24.4 -4.7 2.0 -24.6 -4.0 2.0 -24.4 -3.3 2.0 -22.3 -5.3 2.0 -23.1 -5.5 2.0 -26.3 -6.0 2.0 -23.8 -5.3 2.0 -23.8 -2.7 2.0 -23.1 -2.5 2.0 -22.3 -2.7 2.0 -28.2 -6.0 2.0 -31.8 -6.0 2.0 -36.9 -5.5 2.0 -36.2 -5.3 2.0 -37.7 -5.3 2.0 -38.2 -4.7 2.0 -38.4 -4.0 2.0 -38.2 -3.3 2.0 -36.2 -2.7 2.0 -36.9 -2.5 2.0 -37.7 -2.7 2.0 -35.6 -3.3 2.0 -35.4 -4.0 2.0 -35.6 -4.7 2.0 -24.4 -3.3 0.0 -24.6 -4.0 0.0 -26.3 -2.2 0.0 -28.2 0.9 0.0 -28.2 4.3 0.0 -26.3 4.3 0.0 -17.4 -7.2 0.0 -17.6 -8.0 0.0 -19.6 -6.0 0.0 -26.3 -14.8 0.0 -40.4 -14.8 0.0 -47.7 4.3 0.0 -19.6 12.0 0.0 -19.6 4.3 0.0 -19.6 -2.2 0.0 -28.2 12.0 0.0 -26.3 12.0 0.0 -31.5 16.0 0.0 -31.3 15.3 0.0 -31.8 12.0 0.0 -28.7 15.3 0.0 -28.5 16.0 0.0 -30.8 14.7 0.0 -30.0 14.5 0.0 -29.2 14.7 0.0 -28.7 16.8 0.0 -29.2 17.3 0.0 -30.0 17.5 0.0 -30.8 17.3 0.0 -31.3 16.8 0.0 -40.4 12.0 0.0 -40.4 4.3 0.0 -43.1 -9.3 0.0 -42.6 -8.8 0.0 -40.4 -6.0 0.0 -42.4 -8.0 0.0 -42.6 -7.2 0.0 -47.7 -6.0 0.0 -45.2 -7.2 0.0 -43.1 -6.7 0.0 -43.9 -6.5 0.0 -44.6 -6.7 0.0 -43.9 -9.5 0.0 -44.6 -9.3 0.0 -45.2 -8.8 0.0 -45.4 -8.0 0.0 -31.8 -14.8 0.0 -16.9 -6.7 0.0 -16.1 -6.5 0.0 -15.4 -6.7 0.0 -14.8 -7.2 0.0 -14.6 -8.0 0.0 -14.8 -8.8 0.0 -15.4 -9.3 0.0 -16.1 -9.5 0.0 -16.9 -9.3 0.0 -19.6 -14.8 0.0 -17.4 -8.8 0.0 -28.0 -0.0 0.0 -29.8 -2.0 0.0 -28.9 -1.6 0.0 -28.2 -2.2 0.0 -31.8 -2.2 0.0 -31.5 -1.3 0.0 -30.7 -1.9 0.0 -31.9 -0.5 0.0 -40.4 -2.2 0.0 -31.9 0.5 0.0 -31.8 4.3 0.0 -31.5 1.3 0.0 -28.9 1.6 0.0 -29.8 2.0 0.0 -30.7 1.9 0.0 -28.2 -14.8 0.0 -28.2 -6.0 0.0 -31.8 -6.0 0.0 -24.4 -4.7 0.0 -23.8 -5.3 0.0 -26.3 -6.0 0.0 -23.1 -5.5 0.0 -22.3 -5.3 0.0 -21.8 -4.7 0.0 -21.6 -4.0 0.0 -21.8 -3.3 0.0 -22.3 -2.7 0.0 -23.1 -2.5 0.0 -23.8 -2.7 0.0 -28.2 -0.9 0.0 -38.4 -4.0 0.0 -38.2 -4.7 0.0 -37.7 -5.3 0.0 -36.9 -5.5 0.0 -36.2 -5.3 0.0 -35.6 -4.7 0.0 -35.4 -4.0 0.0 -35.6 -3.3 0.0 -36.2 -2.7 0.0 -36.9 -2.5 0.0 -37.7 -2.7 0.0 -38.2 -3.3 0.0 -47.7 -2.2 0.0 -31.3 7.2 0.0 -31.5 8.0 0.0 -31.3 8.8 0.0 -28.5 8.0 0.0 -28.7 8.8 0.0 -30.8 6.7 0.0 -30.0 6.5 0.0 -29.2 6.7 0.0 -28.7 7.2 0.0 -29.2 9.3 0.0 -30.0 9.5 0.0 -30.8 9.3 0.0)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link2"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link3-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link3-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link3_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i(0 1 2 2 1 3 2 4 0 0 4 5 0 5 6 6 5 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 14 15 16 16 15 17 16 17 18 18 17 19 18 19 20 20 19 21 21 19 22 21 22 23 1 24 3 3 24 25 3 25 26 26 25 27 26 27 28 28 27 29 28 29 30 30 29 31 30 31 32 32 31 33 32 33 34 34 33 35 34 35 36 36 35 37 36 37 38 38 37 39 38 39 40 40 39 41 40 41 42 42 41 43 42 43 44 44 43 45 44 45 46 46 45 47 46 47 48 48 47 49 48 49 50 50 49 51 50 51 52 52 51 53 52 53 54 54 53 55 54 55 56 56 55 57 56 57 58 58 57 59 58 59 60 60 59 61 60 61 62 62 61 63 62 63 64 64 63 65 64 65 66 66 65 67 66 67 68 68 67 69 68 69 70 70 69 71 70 71 72 72 71 73 72 73 74 74 73 75 74 75 76 76 75 77 76 77 78 78 77 79 78 79 80 80 79 23 80 23 81 81 23 22 82 83 84 85 86 87 88 89 90 91 92 93 14 16 94 95 96 21 75 73 97 33 98 35 6 99 0 0 99 84 0 84 1 1 84 24 100 25 24 101 102 100 25 103 27 27 103 104 27 104 29 29 104 105 29 105 31 31 105 106 31 106 33 33 106 107 33 107 98 98 107 108 98 108 109 102 110 100 100 110 111 100 111 25 25 111 112 25 112 103 35 98 37 37 98 113 37 113 39 39 113 114 39 114 41 41 114 115 41 115 43 116 117 118 118 117 119 118 119 120 51 49 121 121 49 47 121 47 115 115 47 45 115 45 43 122 55 123 123 55 53 123 53 124 124 53 51 124 51 125 125 51 121 125 121 126 126 121 120 127 128 129 129 128 130 122 127 55 55 127 129 55 129 57 57 129 131 57 131 59 67 65 132 132 65 63 132 63 131 131 63 61 131 61 59 73 71 97 97 71 69 97 69 133 134 79 77 87 135 136 136 137 134 134 137 138 79 139 23 23 139 140 23 140 21 21 140 141 21 141 95 138 142 134 134 142 143 134 143 79 79 143 144 79 144 139 18 20 86 86 20 21 86 21 87 87 21 96 87 96 135 6 8 99 99 8 10 99 10 94 94 10 12 94 12 14 145 146 147 147 146 148 147 148 90 90 148 149 90 149 88 150 151 152 152 151 92 152 92 153 153 92 91 154 155 87 154 87 156 155 157 87 87 157 90 87 90 85 85 90 89 85 89 93 93 89 158 93 158 91 157 159 90 90 159 160 90 160 147 147 160 161 147 161 162 136 134 87 87 134 163 87 163 156 162 164 147 147 164 165 147 165 134 134 165 166 134 166 163 77 75 134 134 75 97 134 97 147 147 97 133 147 133 145 145 133 167 145 167 168 168 167 151 168 151 169 169 151 150 16 18 94 94 18 86 94 86 99 99 86 85 99 85 84 84 85 93 24 84 100 100 84 83 100 83 170 171 172 93 93 172 173 170 174 100 100 174 175 100 175 176 176 175 177 176 177 171 173 178 93 93 178 179 93 179 84 84 179 180 84 180 82 171 93 176 176 93 92 176 92 181 181 92 151 181 151 182 118 182 183 183 182 184 183 185 118 118 185 186 118 186 167 167 186 187 167 187 188 189 151 190 190 151 167 190 167 191 191 167 188 189 192 151 151 192 193 151 193 182 182 193 194 182 194 184 69 67 133 133 67 132 133 132 167 167 132 131 167 131 118 118 131 129 118 129 116 116 129 130 120 121 118 118 121 115 118 115 182 182 115 114 182 114 181 181 114 113 181 113 176 176 113 98 176 98 100 100 98 109 100 109 101 195 196 197 198 199 200 201 202 203 38 40 204 46 48 205 62 64 206 13 11 207 7 5 208 4 2 209 7 208 9 210 19 211 211 19 17 211 17 207 207 17 15 207 15 13 212 213 214 215 216 210 210 216 22 210 22 19 213 217 214 214 217 218 214 218 210 210 218 219 210 219 215 216 220 22 22 220 221 22 221 81 81 221 222 81 222 80 80 222 223 80 223 224 224 212 80 80 212 214 80 214 78 78 214 76 68 70 225 225 70 72 225 72 74 225 226 68 68 226 206 68 206 66 66 206 64 227 228 205 229 230 231 58 232 56 56 232 233 231 234 229 229 234 235 229 235 232 232 235 236 232 236 233 237 52 238 238 52 54 238 54 239 239 54 56 239 56 240 240 56 233 237 227 52 52 227 205 52 205 50 50 205 48 44 46 241 241 46 205 241 205 229 229 205 228 229 228 230 38 204 36 201 203 242 243 26 244 244 26 245 245 26 246 246 26 28 246 28 247 247 28 30 247 30 248 248 30 32 248 32 249 249 32 34 249 34 250 250 34 251 250 251 252 2 3 209 209 3 26 209 26 203 203 26 243 203 243 242 198 200 253 254 255 256 257 258 259 258 257 260 260 257 261 260 261 262 262 261 263 262 263 264 198 265 199 199 265 266 199 266 263 263 266 267 263 267 264 40 42 204 204 42 268 204 268 269 269 268 270 269 270 257 271 272 273 272 274 273 273 274 203 273 203 251 251 203 202 251 202 252 274 275 203 203 275 276 203 276 209 209 276 277 209 277 278 278 279 209 209 279 280 209 280 197 197 280 281 197 281 195 255 282 256 256 282 197 256 197 273 273 197 196 273 196 271 34 36 251 251 36 204 251 204 273 273 204 269 273 269 256 256 269 257 256 257 254 254 257 259 283 284 229 229 284 285 285 286 229 229 286 270 229 270 241 241 270 268 241 268 44 44 268 42 286 287 270 270 287 288 270 288 257 257 288 289 257 289 290 290 291 257 257 291 292 257 292 261 261 292 293 261 293 294 58 60 232 232 60 295 232 295 229 229 295 261 229 261 283 283 261 294 282 253 197 197 253 200 197 200 209 209 200 208 209 208 4 4 208 5 296 263 297 297 263 214 297 214 298 299 300 210 296 301 263 263 301 302 263 302 199 199 302 303 199 303 304 304 299 199 199 299 210 199 210 200 200 210 211 200 211 208 208 211 207 208 207 9 9 207 11 300 305 210 210 305 306 210 306 214 214 306 307 214 307 298 60 62 295 295 62 206 295 206 261 261 206 226 261 226 263 263 226 225 263 225 214 214 225 74 214 74 76 289 193 290 290 193 192 290 192 291 291 192 189 291 189 292 292 189 190 292 190 293 293 190 191 293 191 294 294 191 188 294 188 283 283 188 187 283 187 284 284 187 186 284 186 285 285 186 185 285 185 286 286 185 183 286 183 287 287 183 184 287 184 288 288 184 194 288 194 289 289 194 193 230 120 231 231 120 119 231 119 234 234 119 117 234 117 235 235 117 116 235 116 236 236 116 130 236 130 233 233 130 128 233 128 240 240 128 127 240 127 239 239 127 122 239 122 238 238 122 123 238 123 237 237 123 124 237 124 227 227 124 125 227 125 228 228 125 126 228 126 230 230 126 120 277 83 278 278 83 82 278 82 279 279 82 180 279 180 280 280 180 179 280 179 281 281 179 178 281 178 195 195 178 173 195 173 196 196 173 172 196 172 271 271 172 171 271 171 272 272 171 177 272 177 274 274 177 175 274 175 275 275 175 174 275 174 276 276 174 170 276 170 277 277 170 83 246 104 245 245 104 103 245 103 244 244 103 112 244 112 243 243 112 111 243 111 242 242 111 110 242 110 201 201 110 102 201 102 202 202 102 101 202 101 252 252 101 109 252 109 250 250 109 108 250 108 249 249 108 107 249 107 248 248 107 106 248 106 247 247 106 105 247 105 246 246 105 104 253 158 198 198 158 89 198 89 265 265 89 88 265 88 266 266 88 149 266 149 267 267 149 148 267 148 264 264 148 146 264 146 262 262 146 145 262 145 260 260 145 168 260 168 258 258 168 169 258 169 259 259 169 150 259 150 254 254 150 152 254 152 255 255 152 153 255 153 282 282 153 91 282 91 253 253 91 158 299 157 300 300 157 155 300 155 305 305 155 154 305 154 306 306 154 156 306 156 307 307 156 163 307 163 298 298 163 166 298 166 297 297 166 165 297 165 296 296 165 164 296 164 301 301 164 162 301 162 302 302 162 161 302 161 303 303 161 160 303 160 304 304 160 159 304 159 299 299 159 157 216 96 220 220 96 95 220 95 221 221 95 141 221 141 222 222 141 140 222 140 223 223 140 139 223 139 224 224 139 144 224 144 212 212 144 143 212 143 213 213 143 142 213 142 217 217 142 138 217 138 218 218 138 137 218 137 219 219 137 136 219 136 215 215 136 135 215 135 216 216 135 96))
                   (list :vertices (let ((mat (make-matrix 308 3))) (fvector-replace (array-entity mat) #f(-10.1 1.6 2.0 -10.0 0.0 2.0 -10.0 0.0 0.0 -10.1 -1.6 0.0 -10.1 1.6 0.0 -10.6 4.8 0.0 -10.6 4.8 2.0 -11.6 7.8 0.0 -11.6 7.8 2.0 -13.1 10.7 0.0 -13.1 10.7 2.0 -15.0 13.3 0.0 -15.0 13.3 2.0 -17.4 15.5 0.0 -17.4 15.5 2.0 -20.0 17.3 0.0 -20.0 17.3 2.0 -22.9 18.7 0.0 -22.9 18.7 2.0 -26.0 19.6 0.0 -26.0 19.6 2.0 -28.2 19.9 2.0 -28.2 19.9 0.0 -29.2 20.0 2.0 -10.1 -1.6 2.0 -10.6 -4.8 2.0 -10.6 -4.8 0.0 -11.6 -7.8 2.0 -11.6 -7.8 0.0 -13.1 -10.7 2.0 -13.1 -10.7 0.0 -15.0 -13.3 2.0 -15.0 -13.3 0.0 -17.4 -15.5 2.0 -17.4 -15.5 0.0 -20.0 -17.3 2.0 -20.0 -17.3 0.0 -22.9 -18.7 2.0 -22.9 -18.7 0.0 -26.0 -19.6 2.0 -26.0 -19.6 0.0 -29.2 -20.0 2.0 -29.2 -20.0 0.0 -32.4 -19.9 2.0 -32.4 -19.9 0.0 -35.6 -19.2 2.0 -35.6 -19.2 0.0 -38.6 -18.1 2.0 -38.6 -18.1 0.0 -41.4 -16.5 2.0 -41.4 -16.5 0.0 -43.9 -14.4 2.0 -43.9 -14.4 0.0 -46.0 -12.0 2.0 -46.0 -12.0 0.0 -47.7 -9.3 2.0 -47.7 -9.3 0.0 -49.0 -6.3 2.0 -49.0 -6.3 0.0 -49.7 -3.2 2.0 -49.7 -3.2 0.0 -50.0 0.0 2.0 -50.0 0.0 0.0 -49.7 3.2 2.0 -49.7 3.2 0.0 -49.0 6.3 2.0 -49.0 6.3 0.0 -47.7 9.3 2.0 -47.7 9.3 0.0 -46.0 12.0 2.0 -46.0 12.0 0.0 -43.9 14.4 2.0 -43.9 14.4 0.0 -41.4 16.5 2.0 -41.4 16.5 0.0 -38.6 18.1 2.0 -38.6 18.1 0.0 -35.6 19.2 2.0 -35.6 19.2 0.0 -32.4 19.9 2.0 -32.4 19.9 0.0 -29.2 20.0 0.0 -21.8 -3.3 2.0 -21.6 -4.0 2.0 -19.6 -2.2 2.0 -26.3 4.3 2.0 -26.3 12.0 2.0 -28.2 12.0 2.0 -28.9 1.6 2.0 -28.2 0.9 2.0 -28.2 4.3 2.0 -28.2 -0.9 2.0 -28.2 -2.2 2.0 -26.3 -2.2 2.0 -19.6 12.0 2.0 -28.7 16.8 2.0 -28.5 16.0 2.0 -40.4 12.0 2.0 -19.6 -14.8 2.0 -19.6 4.3 2.0 -19.6 -6.0 2.0 -17.6 -8.0 2.0 -17.4 -7.2 2.0 -14.8 -7.2 2.0 -14.6 -8.0 2.0 -14.8 -8.8 2.0 -15.4 -9.3 2.0 -16.1 -9.5 2.0 -16.9 -9.3 2.0 -17.4 -8.8 2.0 -16.9 -6.7 2.0 -16.1 -6.5 2.0 -15.4 -6.7 2.0 -26.3 -14.8 2.0 -28.2 -14.8 2.0 -31.8 -14.8 2.0 -43.9 -6.5 2.0 -43.1 -6.7 2.0 -40.4 -6.0 2.0 -42.6 -7.2 2.0 -42.4 -8.0 2.0 -40.4 -14.8 2.0 -45.2 -8.8 2.0 -44.6 -9.3 2.0 -43.9 -9.5 2.0 -43.1 -9.3 2.0 -42.6 -8.8 2.0 -45.4 -8.0 2.0 -45.2 -7.2 2.0 -47.7 -6.0 2.0 -44.6 -6.7 2.0 -47.7 -2.2 2.0 -47.7 4.3 2.0 -40.4 4.3 2.0 -31.8 12.0 2.0 -28.7 15.3 2.0 -29.2 14.7 2.0 -30.0 14.5 2.0 -30.8 14.7 2.0 -30.8 17.3 2.0 -30.0 17.5 2.0 -29.2 17.3 2.0 -31.3 15.3 2.0 -31.5 16.0 2.0 -31.3 16.8 2.0 -31.9 0.5 2.0 -31.5 1.3 2.0 -31.8 4.3 2.0 -30.7 1.9 2.0 -29.8 2.0 2.0 -30.7 -1.9 2.0 -31.8 -2.2 2.0 -29.8 -2.0 2.0 -28.9 -1.6 2.0 -29.2 9.3 2.0 -28.7 8.8 2.0 -30.0 9.5 2.0 -28.5 8.0 2.0 -28.0 0.0 2.0 -28.7 7.2 2.0 -29.2 6.7 2.0 -30.0 6.5 2.0 -30.8 6.7 2.0 -30.8 9.3 2.0 -31.3 7.2 2.0 -31.5 8.0 2.0 -31.3 8.8 2.0 -40.4 -2.2 2.0 -31.9 -0.5 2.0 -31.5 -1.3 2.0 -21.8 -4.7 2.0 -24.4 -4.7 2.0 -24.6 -4.0 2.0 -24.4 -3.3 2.0 -22.3 -5.3 2.0 -23.1 -5.5 2.0 -26.3 -6.0 2.0 -23.8 -5.3 2.0 -23.8 -2.7 2.0 -23.1 -2.5 2.0 -22.3 -2.7 2.0 -28.2 -6.0 2.0 -31.8 -6.0 2.0 -36.9 -5.5 2.0 -36.2 -5.3 2.0 -37.7 -5.3 2.0 -38.2 -4.7 2.0 -38.4 -4.0 2.0 -38.2 -3.3 2.0 -36.2 -2.7 2.0 -36.9 -2.5 2.0 -37.7 -2.7 2.0 -35.6 -3.3 2.0 -35.4 -4.0 2.0 -35.6 -4.7 2.0 -24.4 -3.3 0.0 -24.6 -4.0 0.0 -26.3 -2.2 0.0 -28.2 0.9 0.0 -28.2 4.3 0.0 -26.3 4.3 0.0 -17.4 -7.2 0.0 -17.6 -8.0 0.0 -19.6 -6.0 0.0 -26.3 -14.8 0.0 -40.4 -14.8 0.0 -47.7 4.3 0.0 -19.6 12.0 0.0 -19.6 4.3 0.0 -19.6 -2.2 0.0 -28.2 12.0 0.0 -26.3 12.0 0.0 -31.5 16.0 0.0 -31.3 15.3 0.0 -31.8 12.0 0.0 -28.7 15.3 0.0 -28.5 16.0 0.0 -30.8 14.7 0.0 -30.0 14.5 0.0 -29.2 14.7 0.0 -28.7 16.8 0.0 -29.2 17.3 0.0 -30.0 17.5 0.0 -30.8 17.3 0.0 -31.3 16.8 0.0 -40.4 12.0 0.0 -40.4 4.3 0.0 -43.1 -9.3 0.0 -42.6 -8.8 0.0 -40.4 -6.0 0.0 -42.4 -8.0 0.0 -42.6 -7.2 0.0 -47.7 -6.0 0.0 -45.2 -7.2 0.0 -43.1 -6.7 0.0 -43.9 -6.5 0.0 -44.6 -6.7 0.0 -43.9 -9.5 0.0 -44.6 -9.3 0.0 -45.2 -8.8 0.0 -45.4 -8.0 0.0 -31.8 -14.8 0.0 -16.9 -6.7 0.0 -16.1 -6.5 0.0 -15.4 -6.7 0.0 -14.8 -7.2 0.0 -14.6 -8.0 0.0 -14.8 -8.8 0.0 -15.4 -9.3 0.0 -16.1 -9.5 0.0 -16.9 -9.3 0.0 -19.6 -14.8 0.0 -17.4 -8.8 0.0 -28.0 -0.0 0.0 -29.8 -2.0 0.0 -28.9 -1.6 0.0 -28.2 -2.2 0.0 -31.8 -2.2 0.0 -31.5 -1.3 0.0 -30.7 -1.9 0.0 -31.9 -0.5 0.0 -40.4 -2.2 0.0 -31.9 0.5 0.0 -31.8 4.3 0.0 -31.5 1.3 0.0 -28.9 1.6 0.0 -29.8 2.0 0.0 -30.7 1.9 0.0 -28.2 -14.8 0.0 -28.2 -6.0 0.0 -31.8 -6.0 0.0 -24.4 -4.7 0.0 -23.8 -5.3 0.0 -26.3 -6.0 0.0 -23.1 -5.5 0.0 -22.3 -5.3 0.0 -21.8 -4.7 0.0 -21.6 -4.0 0.0 -21.8 -3.3 0.0 -22.3 -2.7 0.0 -23.1 -2.5 0.0 -23.8 -2.7 0.0 -28.2 -0.9 0.0 -38.4 -4.0 0.0 -38.2 -4.7 0.0 -37.7 -5.3 0.0 -36.9 -5.5 0.0 -36.2 -5.3 0.0 -35.6 -4.7 0.0 -35.4 -4.0 0.0 -35.6 -3.3 0.0 -36.2 -2.7 0.0 -36.9 -2.5 0.0 -37.7 -2.7 0.0 -38.2 -3.3 0.0 -47.7 -2.2 0.0 -31.3 7.2 0.0 -31.5 8.0 0.0 -31.3 8.8 0.0 -28.5 8.0 0.0 -28.7 8.8 0.0 -30.8 6.7 0.0 -30.0 6.5 0.0 -29.2 6.7 0.0 -28.7 7.2 0.0 -29.2 9.3 0.0 -30.0 9.5 0.0 -30.8 9.3 0.0)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link3"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link4-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link4-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link4_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i(0 1 2 2 1 3 2 4 0 0 4 5 0 5 6 6 5 7 6 7 8 8 7 9 8 9 10 10 9 11 10 11 12 12 11 13 12 13 14 14 13 15 14 15 16 16 15 17 16 17 18 18 17 19 18 19 20 20 19 21 21 19 22 21 22 23 1 24 3 3 24 25 3 25 26 26 25 27 26 27 28 28 27 29 28 29 30 30 29 31 30 31 32 32 31 33 32 33 34 34 33 35 34 35 36 36 35 37 36 37 38 38 37 39 38 39 40 40 39 41 40 41 42 42 41 43 42 43 44 44 43 45 44 45 46 46 45 47 46 47 48 48 47 49 48 49 50 50 49 51 50 51 52 52 51 53 52 53 54 54 53 55 54 55 56 56 55 57 56 57 58 58 57 59 58 59 60 60 59 61 60 61 62 62 61 63 62 63 64 64 63 65 64 65 66 66 65 67 66 67 68 68 67 69 68 69 70 70 69 71 70 71 72 72 71 73 72 73 74 74 73 75 74 75 76 76 75 77 76 77 78 78 77 79 78 79 80 80 79 23 80 23 81 81 23 22 82 83 84 85 86 87 88 89 90 91 92 93 14 16 94 95 96 21 75 73 97 33 98 35 6 99 0 0 99 84 0 84 1 1 84 24 100 25 24 101 102 100 25 103 27 27 103 104 27 104 29 29 104 105 29 105 31 31 105 106 31 106 33 33 106 107 33 107 98 98 107 108 98 108 109 102 110 100 100 110 111 100 111 25 25 111 112 25 112 103 35 98 37 37 98 113 37 113 39 39 113 114 39 114 41 41 114 115 41 115 43 116 117 118 118 117 119 118 119 120 51 49 121 121 49 47 121 47 115 115 47 45 115 45 43 122 55 123 123 55 53 123 53 124 124 53 51 124 51 125 125 51 121 125 121 126 126 121 120 127 128 129 129 128 130 122 127 55 55 127 129 55 129 57 57 129 131 57 131 59 67 65 132 132 65 63 132 63 131 131 63 61 131 61 59 73 71 97 97 71 69 97 69 133 134 79 77 87 135 136 136 137 134 134 137 138 79 139 23 23 139 140 23 140 21 21 140 141 21 141 95 138 142 134 134 142 143 134 143 79 79 143 144 79 144 139 18 20 86 86 20 21 86 21 87 87 21 96 87 96 135 6 8 99 99 8 10 99 10 94 94 10 12 94 12 14 145 146 147 147 146 148 147 148 90 90 148 149 90 149 88 150 151 152 152 151 92 152 92 153 153 92 91 154 155 87 154 87 156 155 157 87 87 157 90 87 90 85 85 90 89 85 89 93 93 89 158 93 158 91 157 159 90 90 159 160 90 160 147 147 160 161 147 161 162 136 134 87 87 134 163 87 163 156 162 164 147 147 164 165 147 165 134 134 165 166 134 166 163 77 75 134 134 75 97 134 97 147 147 97 133 147 133 145 145 133 167 145 167 168 168 167 151 168 151 169 169 151 150 16 18 94 94 18 86 94 86 99 99 86 85 99 85 84 84 85 93 24 84 100 100 84 83 100 83 170 171 172 93 93 172 173 170 174 100 100 174 175 100 175 176 176 175 177 176 177 171 173 178 93 93 178 179 93 179 84 84 179 180 84 180 82 171 93 176 176 93 92 176 92 181 181 92 151 181 151 182 118 182 183 183 182 184 183 185 118 118 185 186 118 186 167 167 186 187 167 187 188 189 151 190 190 151 167 190 167 191 191 167 188 189 192 151 151 192 193 151 193 182 182 193 194 182 194 184 69 67 133 133 67 132 133 132 167 167 132 131 167 131 118 118 131 129 118 129 116 116 129 130 120 121 118 118 121 115 118 115 182 182 115 114 182 114 181 181 114 113 181 113 176 176 113 98 176 98 100 100 98 109 100 109 101 195 196 197 198 199 200 201 202 203 38 40 204 46 48 205 62 64 206 13 11 207 7 5 208 4 2 209 7 208 9 210 19 211 211 19 17 211 17 207 207 17 15 207 15 13 212 213 214 215 216 210 210 216 22 210 22 19 213 217 214 214 217 218 214 218 210 210 218 219 210 219 215 216 220 22 22 220 221 22 221 81 81 221 222 81 222 80 80 222 223 80 223 224 224 212 80 80 212 214 80 214 78 78 214 76 68 70 225 225 70 72 225 72 74 225 226 68 68 226 206 68 206 66 66 206 64 227 228 205 229 230 231 58 232 56 56 232 233 231 234 229 229 234 235 229 235 232 232 235 236 232 236 233 237 52 238 238 52 54 238 54 239 239 54 56 239 56 240 240 56 233 237 227 52 52 227 205 52 205 50 50 205 48 44 46 241 241 46 205 241 205 229 229 205 228 229 228 230 38 204 36 201 203 242 243 26 244 244 26 245 245 26 246 246 26 28 246 28 247 247 28 30 247 30 248 248 30 32 248 32 249 249 32 34 249 34 250 250 34 251 250 251 252 2 3 209 209 3 26 209 26 203 203 26 243 203 243 242 198 200 253 254 255 256 257 258 259 258 257 260 260 257 261 260 261 262 262 261 263 262 263 264 198 265 199 199 265 266 199 266 263 263 266 267 263 267 264 40 42 204 204 42 268 204 268 269 269 268 270 269 270 257 271 272 273 272 274 273 273 274 203 273 203 251 251 203 202 251 202 252 274 275 203 203 275 276 203 276 209 209 276 277 209 277 278 278 279 209 209 279 280 209 280 197 197 280 281 197 281 195 255 282 256 256 282 197 256 197 273 273 197 196 273 196 271 34 36 251 251 36 204 251 204 273 273 204 269 273 269 256 256 269 257 256 257 254 254 257 259 283 284 229 229 284 285 285 286 229 229 286 270 229 270 241 241 270 268 241 268 44 44 268 42 286 287 270 270 287 288 270 288 257 257 288 289 257 289 290 290 291 257 257 291 292 257 292 261 261 292 293 261 293 294 58 60 232 232 60 295 232 295 229 229 295 261 229 261 283 283 261 294 282 253 197 197 253 200 197 200 209 209 200 208 209 208 4 4 208 5 296 263 297 297 263 214 297 214 298 299 300 210 296 301 263 263 301 302 263 302 199 199 302 303 199 303 304 304 299 199 199 299 210 199 210 200 200 210 211 200 211 208 208 211 207 208 207 9 9 207 11 300 305 210 210 305 306 210 306 214 214 306 307 214 307 298 60 62 295 295 62 206 295 206 261 261 206 226 261 226 263 263 226 225 263 225 214 214 225 74 214 74 76 289 193 290 290 193 192 290 192 291 291 192 189 291 189 292 292 189 190 292 190 293 293 190 191 293 191 294 294 191 188 294 188 283 283 188 187 283 187 284 284 187 186 284 186 285 285 186 185 285 185 286 286 185 183 286 183 287 287 183 184 287 184 288 288 184 194 288 194 289 289 194 193 230 120 231 231 120 119 231 119 234 234 119 117 234 117 235 235 117 116 235 116 236 236 116 130 236 130 233 233 130 128 233 128 240 240 128 127 240 127 239 239 127 122 239 122 238 238 122 123 238 123 237 237 123 124 237 124 227 227 124 125 227 125 228 228 125 126 228 126 230 230 126 120 277 83 278 278 83 82 278 82 279 279 82 180 279 180 280 280 180 179 280 179 281 281 179 178 281 178 195 195 178 173 195 173 196 196 173 172 196 172 271 271 172 171 271 171 272 272 171 177 272 177 274 274 177 175 274 175 275 275 175 174 275 174 276 276 174 170 276 170 277 277 170 83 246 104 245 245 104 103 245 103 244 244 103 112 244 112 243 243 112 111 243 111 242 242 111 110 242 110 201 201 110 102 201 102 202 202 102 101 202 101 252 252 101 109 252 109 250 250 109 108 250 108 249 249 108 107 249 107 248 248 107 106 248 106 247 247 106 105 247 105 246 246 105 104 253 158 198 198 158 89 198 89 265 265 89 88 265 88 266 266 88 149 266 149 267 267 149 148 267 148 264 264 148 146 264 146 262 262 146 145 262 145 260 260 145 168 260 168 258 258 168 169 258 169 259 259 169 150 259 150 254 254 150 152 254 152 255 255 152 153 255 153 282 282 153 91 282 91 253 253 91 158 299 157 300 300 157 155 300 155 305 305 155 154 305 154 306 306 154 156 306 156 307 307 156 163 307 163 298 298 163 166 298 166 297 297 166 165 297 165 296 296 165 164 296 164 301 301 164 162 301 162 302 302 162 161 302 161 303 303 161 160 303 160 304 304 160 159 304 159 299 299 159 157 216 96 220 220 96 95 220 95 221 221 95 141 221 141 222 222 141 140 222 140 223 223 140 139 223 139 224 224 139 144 224 144 212 212 144 143 212 143 213 213 143 142 213 142 217 217 142 138 217 138 218 218 138 137 218 137 219 219 137 136 219 136 215 215 136 135 215 135 216 216 135 96))
                   (list :vertices (let ((mat (make-matrix 308 3))) (fvector-replace (array-entity mat) #f(-10.1 1.6 2.0 -10.0 0.0 2.0 -10.0 0.0 0.0 -10.1 -1.6 0.0 -10.1 1.6 0.0 -10.6 4.8 0.0 -10.6 4.8 2.0 -11.6 7.8 0.0 -11.6 7.8 2.0 -13.1 10.7 0.0 -13.1 10.7 2.0 -15.0 13.3 0.0 -15.0 13.3 2.0 -17.4 15.5 0.0 -17.4 15.5 2.0 -20.0 17.3 0.0 -20.0 17.3 2.0 -22.9 18.7 0.0 -22.9 18.7 2.0 -26.0 19.6 0.0 -26.0 19.6 2.0 -28.2 19.9 2.0 -28.2 19.9 0.0 -29.2 20.0 2.0 -10.1 -1.6 2.0 -10.6 -4.8 2.0 -10.6 -4.8 0.0 -11.6 -7.8 2.0 -11.6 -7.8 0.0 -13.1 -10.7 2.0 -13.1 -10.7 0.0 -15.0 -13.3 2.0 -15.0 -13.3 0.0 -17.4 -15.5 2.0 -17.4 -15.5 0.0 -20.0 -17.3 2.0 -20.0 -17.3 0.0 -22.9 -18.7 2.0 -22.9 -18.7 0.0 -26.0 -19.6 2.0 -26.0 -19.6 0.0 -29.2 -20.0 2.0 -29.2 -20.0 0.0 -32.4 -19.9 2.0 -32.4 -19.9 0.0 -35.6 -19.2 2.0 -35.6 -19.2 0.0 -38.6 -18.1 2.0 -38.6 -18.1 0.0 -41.4 -16.5 2.0 -41.4 -16.5 0.0 -43.9 -14.4 2.0 -43.9 -14.4 0.0 -46.0 -12.0 2.0 -46.0 -12.0 0.0 -47.7 -9.3 2.0 -47.7 -9.3 0.0 -49.0 -6.3 2.0 -49.0 -6.3 0.0 -49.7 -3.2 2.0 -49.7 -3.2 0.0 -50.0 0.0 2.0 -50.0 0.0 0.0 -49.7 3.2 2.0 -49.7 3.2 0.0 -49.0 6.3 2.0 -49.0 6.3 0.0 -47.7 9.3 2.0 -47.7 9.3 0.0 -46.0 12.0 2.0 -46.0 12.0 0.0 -43.9 14.4 2.0 -43.9 14.4 0.0 -41.4 16.5 2.0 -41.4 16.5 0.0 -38.6 18.1 2.0 -38.6 18.1 0.0 -35.6 19.2 2.0 -35.6 19.2 0.0 -32.4 19.9 2.0 -32.4 19.9 0.0 -29.2 20.0 0.0 -21.8 -3.3 2.0 -21.6 -4.0 2.0 -19.6 -2.2 2.0 -26.3 4.3 2.0 -26.3 12.0 2.0 -28.2 12.0 2.0 -28.9 1.6 2.0 -28.2 0.9 2.0 -28.2 4.3 2.0 -28.2 -0.9 2.0 -28.2 -2.2 2.0 -26.3 -2.2 2.0 -19.6 12.0 2.0 -28.7 16.8 2.0 -28.5 16.0 2.0 -40.4 12.0 2.0 -19.6 -14.8 2.0 -19.6 4.3 2.0 -19.6 -6.0 2.0 -17.6 -8.0 2.0 -17.4 -7.2 2.0 -14.8 -7.2 2.0 -14.6 -8.0 2.0 -14.8 -8.8 2.0 -15.4 -9.3 2.0 -16.1 -9.5 2.0 -16.9 -9.3 2.0 -17.4 -8.8 2.0 -16.9 -6.7 2.0 -16.1 -6.5 2.0 -15.4 -6.7 2.0 -26.3 -14.8 2.0 -28.2 -14.8 2.0 -31.8 -14.8 2.0 -43.9 -6.5 2.0 -43.1 -6.7 2.0 -40.4 -6.0 2.0 -42.6 -7.2 2.0 -42.4 -8.0 2.0 -40.4 -14.8 2.0 -45.2 -8.8 2.0 -44.6 -9.3 2.0 -43.9 -9.5 2.0 -43.1 -9.3 2.0 -42.6 -8.8 2.0 -45.4 -8.0 2.0 -45.2 -7.2 2.0 -47.7 -6.0 2.0 -44.6 -6.7 2.0 -47.7 -2.2 2.0 -47.7 4.3 2.0 -40.4 4.3 2.0 -31.8 12.0 2.0 -28.7 15.3 2.0 -29.2 14.7 2.0 -30.0 14.5 2.0 -30.8 14.7 2.0 -30.8 17.3 2.0 -30.0 17.5 2.0 -29.2 17.3 2.0 -31.3 15.3 2.0 -31.5 16.0 2.0 -31.3 16.8 2.0 -31.9 0.5 2.0 -31.5 1.3 2.0 -31.8 4.3 2.0 -30.7 1.9 2.0 -29.8 2.0 2.0 -30.7 -1.9 2.0 -31.8 -2.2 2.0 -29.8 -2.0 2.0 -28.9 -1.6 2.0 -29.2 9.3 2.0 -28.7 8.8 2.0 -30.0 9.5 2.0 -28.5 8.0 2.0 -28.0 0.0 2.0 -28.7 7.2 2.0 -29.2 6.7 2.0 -30.0 6.5 2.0 -30.8 6.7 2.0 -30.8 9.3 2.0 -31.3 7.2 2.0 -31.5 8.0 2.0 -31.3 8.8 2.0 -40.4 -2.2 2.0 -31.9 -0.5 2.0 -31.5 -1.3 2.0 -21.8 -4.7 2.0 -24.4 -4.7 2.0 -24.6 -4.0 2.0 -24.4 -3.3 2.0 -22.3 -5.3 2.0 -23.1 -5.5 2.0 -26.3 -6.0 2.0 -23.8 -5.3 2.0 -23.8 -2.7 2.0 -23.1 -2.5 2.0 -22.3 -2.7 2.0 -28.2 -6.0 2.0 -31.8 -6.0 2.0 -36.9 -5.5 2.0 -36.2 -5.3 2.0 -37.7 -5.3 2.0 -38.2 -4.7 2.0 -38.4 -4.0 2.0 -38.2 -3.3 2.0 -36.2 -2.7 2.0 -36.9 -2.5 2.0 -37.7 -2.7 2.0 -35.6 -3.3 2.0 -35.4 -4.0 2.0 -35.6 -4.7 2.0 -24.4 -3.3 0.0 -24.6 -4.0 0.0 -26.3 -2.2 0.0 -28.2 0.9 0.0 -28.2 4.3 0.0 -26.3 4.3 0.0 -17.4 -7.2 0.0 -17.6 -8.0 0.0 -19.6 -6.0 0.0 -26.3 -14.8 0.0 -40.4 -14.8 0.0 -47.7 4.3 0.0 -19.6 12.0 0.0 -19.6 4.3 0.0 -19.6 -2.2 0.0 -28.2 12.0 0.0 -26.3 12.0 0.0 -31.5 16.0 0.0 -31.3 15.3 0.0 -31.8 12.0 0.0 -28.7 15.3 0.0 -28.5 16.0 0.0 -30.8 14.7 0.0 -30.0 14.5 0.0 -29.2 14.7 0.0 -28.7 16.8 0.0 -29.2 17.3 0.0 -30.0 17.5 0.0 -30.8 17.3 0.0 -31.3 16.8 0.0 -40.4 12.0 0.0 -40.4 4.3 0.0 -43.1 -9.3 0.0 -42.6 -8.8 0.0 -40.4 -6.0 0.0 -42.4 -8.0 0.0 -42.6 -7.2 0.0 -47.7 -6.0 0.0 -45.2 -7.2 0.0 -43.1 -6.7 0.0 -43.9 -6.5 0.0 -44.6 -6.7 0.0 -43.9 -9.5 0.0 -44.6 -9.3 0.0 -45.2 -8.8 0.0 -45.4 -8.0 0.0 -31.8 -14.8 0.0 -16.9 -6.7 0.0 -16.1 -6.5 0.0 -15.4 -6.7 0.0 -14.8 -7.2 0.0 -14.6 -8.0 0.0 -14.8 -8.8 0.0 -15.4 -9.3 0.0 -16.1 -9.5 0.0 -16.9 -9.3 0.0 -19.6 -14.8 0.0 -17.4 -8.8 0.0 -28.0 -0.0 0.0 -29.8 -2.0 0.0 -28.9 -1.6 0.0 -28.2 -2.2 0.0 -31.8 -2.2 0.0 -31.5 -1.3 0.0 -30.7 -1.9 0.0 -31.9 -0.5 0.0 -40.4 -2.2 0.0 -31.9 0.5 0.0 -31.8 4.3 0.0 -31.5 1.3 0.0 -28.9 1.6 0.0 -29.8 2.0 0.0 -30.7 1.9 0.0 -28.2 -14.8 0.0 -28.2 -6.0 0.0 -31.8 -6.0 0.0 -24.4 -4.7 0.0 -23.8 -5.3 0.0 -26.3 -6.0 0.0 -23.1 -5.5 0.0 -22.3 -5.3 0.0 -21.8 -4.7 0.0 -21.6 -4.0 0.0 -21.8 -3.3 0.0 -22.3 -2.7 0.0 -23.1 -2.5 0.0 -23.8 -2.7 0.0 -28.2 -0.9 0.0 -38.4 -4.0 0.0 -38.2 -4.7 0.0 -37.7 -5.3 0.0 -36.9 -5.5 0.0 -36.2 -5.3 0.0 -35.6 -4.7 0.0 -35.4 -4.0 0.0 -35.6 -3.3 0.0 -36.2 -2.7 0.0 -36.9 -2.5 0.0 -37.7 -2.7 0.0 -38.2 -3.3 0.0 -47.7 -2.2 0.0 -31.3 7.2 0.0 -31.5 8.0 0.0 -31.3 8.8 0.0 -28.5 8.0 0.0 -28.7 8.8 0.0 -30.8 6.7 0.0 -30.0 6.5 0.0 -29.2 6.7 0.0 -28.7 7.2 0.0 -29.2 9.3 0.0 -30.0 9.5 0.0 -30.8 9.3 0.0)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link4"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link5-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link5-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link5_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i
                   (list :vertices (let ((mat (make-matrix 186 3))) (fvector-replace (array-entity mat) #f(-30.0 1.2 -15.0 -30.0 0.0 -15.0 -32.0 0.0 -15.0 -32.0 -1.2 -15.0 -30.0 -1.2 -15.0 -30.0 -3.6 -14.6 -32.0 -3.6 -14.6 -30.0 -5.9 -13.8 -32.0 -5.9 -13.8 -30.0 -8.0 -12.7 -32.0 -8.0 -12.7 -30.0 -9.9 -11.2 -32.0 -9.9 -11.2 -30.0 -11.6 -9.5 -32.0 -11.6 -9.5 -30.0 -13.0 -7.5 -32.0 -13.0 -7.5 -30.0 -14.0 -5.3 -32.0 -14.0 -5.3 -30.0 -14.7 -3.0 -32.0 -14.7 -3.0 -30.0 -15.0 -0.6 -32.0 -15.0 -0.6 -30.0 -14.9 1.8 -32.0 -14.9 1.8 -30.0 -14.4 4.2 -32.0 -14.4 4.2 -30.0 -13.6 6.4 -32.0 -13.6 6.4 -30.0 -12.3 8.5 -32.0 -12.3 8.5 -30.0 -10.8 10.4 -32.0 -10.8 10.4 -30.0 -9.0 12.0 -32.0 -9.0 12.0 -30.0 -7.0 13.3 -32.0 -7.0 13.3 -30.0 -4.8 14.2 -32.0 -4.8 14.2 -30.0 -2.4 14.8 -32.0 -2.4 14.8 -30.0 0.0 15.0 -32.0 0.0 15.0 -30.0 2.4 14.8 -32.0 2.4 14.8 -30.0 4.8 14.2 -32.0 4.8 14.2 -30.0 7.0 13.3 -32.0 7.0 13.3 -30.0 9.0 12.0 -32.0 9.0 12.0 -30.0 10.8 10.4 -32.0 10.8 10.4 -30.0 12.3 8.5 -32.0 12.3 8.5 -30.0 13.6 6.4 -32.0 13.6 6.4 -30.0 14.4 4.2 -32.0 14.4 4.2 -30.0 14.9 1.8 -32.0 14.9 1.8 -30.0 15.0 -0.6 -32.0 15.0 -0.6 -30.0 14.7 -3.0 -32.0 14.7 -3.0 -30.0 14.0 -5.3 -32.0 14.0 -5.3 -30.0 13.0 -7.5 -32.0 13.0 -7.5 -30.0 11.6 -9.5 -32.0 11.6 -9.5 -30.0 9.9 -11.2 -32.0 9.9 -11.2 -30.0 8.0 -12.7 -32.0 8.0 -12.7 -30.0 5.9 -13.8 -32.0 5.9 -13.8 -30.0 3.6 -14.6 -32.0 3.6 -14.6 -32.0 1.2 -15.0 -30.0 -4.7 -8.3 -30.0 -4.0 -8.4 -30.0 -4.4 8.4 -30.0 -3.6 8.4 -30.0 -5.2 -7.8 -30.0 -4.7 5.6 -30.0 -4.0 5.4 -30.0 -5.4 -6.4 -30.0 -5.5 -7.1 -30.0 -3.3 5.6 -30.0 6.6 0.5 -30.0 8.0 -1.5 -30.0 8.7 -1.3 -30.0 9.2 -0.9 -30.0 -5.4 7.5 -30.0 -5.5 6.7 -30.0 -5.2 6.1 -30.0 1.6 1.2 -30.0 1.9 0.4 -30.0 7.3 -1.3 -30.0 1.9 -0.4 -30.0 -2.5 -7.1 -30.0 0.0 -2.0 -30.0 -5.0 8.1 -30.0 0.9 -1.8 -30.0 1.6 -1.2 -30.0 -2.8 -7.8 -30.0 -3.3 -8.3 -30.0 -3.0 8.1 -30.0 -2.6 7.5 -30.0 7.0 1.1 -30.0 -2.5 6.7 -30.0 -2.8 6.1 -30.0 8.4 1.5 -30.0 9.0 1.1 -30.0 9.4 0.5 -30.0 9.5 -0.2 -30.0 0.9 1.8 -30.0 6.8 -0.9 -30.0 6.5 -0.2 -30.0 7.6 1.5 -30.0 -1.6 -1.2 -30.0 -3.6 -5.5 -30.0 -0.9 -1.8 -30.0 -3.0 -5.8 -30.0 -2.6 -6.4 -30.0 -5.0 -5.8 -30.0 -4.4 -5.5 -30.0 0.0 2.0 -30.0 -0.9 1.8 -30.0 -1.9 -0.4 -30.0 -1.9 0.4 -30.0 -1.6 1.2 -32.0 -5.0 8.1 -32.0 -5.4 7.5 -32.0 -4.7 5.6 -32.0 -1.9 0.4 -32.0 -3.6 -5.5 -32.0 -4.4 -5.5 -32.0 7.3 -1.3 -32.0 9.5 -0.2 -32.0 9.2 -0.9 -32.0 8.7 -1.3 -32.0 -5.5 6.7 -32.0 -5.2 6.1 -32.0 9.0 1.1 -32.0 9.4 0.5 -32.0 8.4 1.5 -32.0 0.0 2.0 -32.0 -2.5 6.7 -32.0 -1.6 1.2 -32.0 -4.0 5.4 -32.0 -5.0 -5.8 -32.0 -0.9 1.8 -32.0 -3.3 5.6 -32.0 -2.8 6.1 -32.0 8.0 -1.5 -32.0 -4.4 8.4 -32.0 -3.6 8.4 -32.0 -3.0 8.1 -32.0 -2.6 7.5 -32.0 -5.4 -6.4 -32.0 -5.5 -7.1 -32.0 -5.2 -7.8 -32.0 -4.7 -8.3 -32.0 -4.0 -8.4 -32.0 7.6 1.5 -32.0 7.0 1.1 -32.0 -0.9 -1.8 -32.0 -3.0 -5.8 -32.0 -1.6 -1.2 -32.0 -1.9 -0.4 -32.0 -3.3 -8.3 -32.0 -2.8 -7.8 -32.0 -2.5 -7.1 -32.0 6.8 -0.9 -32.0 -2.6 -6.4 -32.0 1.6 1.2 -32.0 0.9 1.8 -32.0 6.6 0.5 -32.0 -0.0 -2.0 -32.0 0.9 -1.8 -32.0 1.6 -1.2 -32.0 6.5 -0.2 -32.0 1.9 -0.4 -32.0 1.9 0.4)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link5"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link6-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link6-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link6_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i
                   (list :vertices (let ((mat (make-matrix 186 3))) (fvector-replace (array-entity mat) #f(-30.0 1.2 -15.0 -30.0 0.0 -15.0 -32.0 0.0 -15.0 -32.0 -1.2 -15.0 -30.0 -1.2 -15.0 -30.0 -3.6 -14.6 -32.0 -3.6 -14.6 -30.0 -5.9 -13.8 -32.0 -5.9 -13.8 -30.0 -8.0 -12.7 -32.0 -8.0 -12.7 -30.0 -9.9 -11.2 -32.0 -9.9 -11.2 -30.0 -11.6 -9.5 -32.0 -11.6 -9.5 -30.0 -13.0 -7.5 -32.0 -13.0 -7.5 -30.0 -14.0 -5.3 -32.0 -14.0 -5.3 -30.0 -14.7 -3.0 -32.0 -14.7 -3.0 -30.0 -15.0 -0.6 -32.0 -15.0 -0.6 -30.0 -14.9 1.8 -32.0 -14.9 1.8 -30.0 -14.4 4.2 -32.0 -14.4 4.2 -30.0 -13.6 6.4 -32.0 -13.6 6.4 -30.0 -12.3 8.5 -32.0 -12.3 8.5 -30.0 -10.8 10.4 -32.0 -10.8 10.4 -30.0 -9.0 12.0 -32.0 -9.0 12.0 -30.0 -7.0 13.3 -32.0 -7.0 13.3 -30.0 -4.8 14.2 -32.0 -4.8 14.2 -30.0 -2.4 14.8 -32.0 -2.4 14.8 -30.0 0.0 15.0 -32.0 0.0 15.0 -30.0 2.4 14.8 -32.0 2.4 14.8 -30.0 4.8 14.2 -32.0 4.8 14.2 -30.0 7.0 13.3 -32.0 7.0 13.3 -30.0 9.0 12.0 -32.0 9.0 12.0 -30.0 10.8 10.4 -32.0 10.8 10.4 -30.0 12.3 8.5 -32.0 12.3 8.5 -30.0 13.6 6.4 -32.0 13.6 6.4 -30.0 14.4 4.2 -32.0 14.4 4.2 -30.0 14.9 1.8 -32.0 14.9 1.8 -30.0 15.0 -0.6 -32.0 15.0 -0.6 -30.0 14.7 -3.0 -32.0 14.7 -3.0 -30.0 14.0 -5.3 -32.0 14.0 -5.3 -30.0 13.0 -7.5 -32.0 13.0 -7.5 -30.0 11.6 -9.5 -32.0 11.6 -9.5 -30.0 9.9 -11.2 -32.0 9.9 -11.2 -30.0 8.0 -12.7 -32.0 8.0 -12.7 -30.0 5.9 -13.8 -32.0 5.9 -13.8 -30.0 3.6 -14.6 -32.0 3.6 -14.6 -32.0 1.2 -15.0 -30.0 -4.7 -8.3 -30.0 -4.0 -8.4 -30.0 -4.4 8.4 -30.0 -3.6 8.4 -30.0 -5.2 -7.8 -30.0 -4.7 5.6 -30.0 -4.0 5.4 -30.0 -5.4 -6.4 -30.0 -5.5 -7.1 -30.0 -3.3 5.6 -30.0 6.6 0.5 -30.0 8.0 -1.5 -30.0 8.7 -1.3 -30.0 9.2 -0.9 -30.0 -5.4 7.5 -30.0 -5.5 6.7 -30.0 -5.2 6.1 -30.0 1.6 1.2 -30.0 1.9 0.4 -30.0 7.3 -1.3 -30.0 1.9 -0.4 -30.0 -2.5 -7.1 -30.0 0.0 -2.0 -30.0 -5.0 8.1 -30.0 0.9 -1.8 -30.0 1.6 -1.2 -30.0 -2.8 -7.8 -30.0 -3.3 -8.3 -30.0 -3.0 8.1 -30.0 -2.6 7.5 -30.0 7.0 1.1 -30.0 -2.5 6.7 -30.0 -2.8 6.1 -30.0 8.4 1.5 -30.0 9.0 1.1 -30.0 9.4 0.5 -30.0 9.5 -0.2 -30.0 0.9 1.8 -30.0 6.8 -0.9 -30.0 6.5 -0.2 -30.0 7.6 1.5 -30.0 -1.6 -1.2 -30.0 -3.6 -5.5 -30.0 -0.9 -1.8 -30.0 -3.0 -5.8 -30.0 -2.6 -6.4 -30.0 -5.0 -5.8 -30.0 -4.4 -5.5 -30.0 0.0 2.0 -30.0 -0.9 1.8 -30.0 -1.9 -0.4 -30.0 -1.9 0.4 -30.0 -1.6 1.2 -32.0 -5.0 8.1 -32.0 -5.4 7.5 -32.0 -4.7 5.6 -32.0 -1.9 0.4 -32.0 -3.6 -5.5 -32.0 -4.4 -5.5 -32.0 7.3 -1.3 -32.0 9.5 -0.2 -32.0 9.2 -0.9 -32.0 8.7 -1.3 -32.0 -5.5 6.7 -32.0 -5.2 6.1 -32.0 9.0 1.1 -32.0 9.4 0.5 -32.0 8.4 1.5 -32.0 0.0 2.0 -32.0 -2.5 6.7 -32.0 -1.6 1.2 -32.0 -4.0 5.4 -32.0 -5.0 -5.8 -32.0 -0.9 1.8 -32.0 -3.3 5.6 -32.0 -2.8 6.1 -32.0 8.0 -1.5 -32.0 -4.4 8.4 -32.0 -3.6 8.4 -32.0 -3.0 8.1 -32.0 -2.6 7.5 -32.0 -5.4 -6.4 -32.0 -5.5 -7.1 -32.0 -5.2 -7.8 -32.0 -4.7 -8.3 -32.0 -4.0 -8.4 -32.0 7.6 1.5 -32.0 7.0 1.1 -32.0 -0.9 -1.8 -32.0 -3.0 -5.8 -32.0 -1.6 -1.2 -32.0 -1.9 -0.4 -32.0 -3.3 -8.3 -32.0 -2.8 -7.8 -32.0 -2.5 -7.1 -32.0 6.8 -0.9 -32.0 -2.6 -6.4 -32.0 1.6 1.2 -32.0 0.9 1.8 -32.0 6.6 0.5 -32.0 -0.0 -2.0 -32.0 0.9 -1.8 -32.0 1.6 -1.2 -32.0 6.5 -0.2 -32.0 1.9 -0.4 -32.0 1.9 0.4)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link6"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link7-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link7-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link7_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i
                   (list :vertices (let ((mat (make-matrix 196 3))) (fvector-replace (array-entity mat) #f(-30.0 1.0 -12.0 -30.0 0.0 -12.0 -32.0 0.0 -12.0 -32.0 -1.0 -12.0 -30.0 -1.0 -12.0 -30.0 -2.9 -11.7 -32.0 -2.9 -11.7 -30.0 -4.7 -11.0 -32.0 -4.7 -11.0 -30.0 -6.4 -10.1 -32.0 -6.4 -10.1 -30.0 -8.0 -9.0 -32.0 -8.0 -9.0 -30.0 -9.3 -7.6 -32.0 -9.3 -7.6 -30.0 -10.4 -6.0 -32.0 -10.4 -6.0 -30.0 -11.2 -4.3 -32.0 -11.2 -4.3 -30.0 -11.8 -2.4 -32.0 -11.8 -2.4 -30.0 -12.0 -0.5 -32.0 -12.0 -0.5 -30.0 -11.9 1.4 -32.0 -11.9 1.4 -30.0 -11.5 3.3 -32.0 -11.5 3.3 -30.0 -10.8 5.1 -32.0 -10.8 5.1 -30.0 -9.9 6.8 -32.0 -9.9 6.8 -30.0 -8.7 8.3 -32.0 -8.7 8.3 -30.0 -7.2 9.6 -32.0 -7.2 9.6 -30.0 -5.6 10.6 -32.0 -5.6 10.6 -30.0 -3.8 11.4 -32.0 -3.8 11.4 -30.0 -1.9 11.8 -32.0 -1.9 11.8 -30.0 0.0 12.0 -32.0 0.0 12.0 -30.0 1.9 11.8 -32.0 1.9 11.8 -30.0 3.8 11.4 -32.0 3.8 11.4 -30.0 5.6 10.6 -32.0 5.6 10.6 -30.0 7.2 9.6 -32.0 7.2 9.6 -30.0 8.7 8.3 -32.0 8.7 8.3 -30.0 9.9 6.8 -32.0 9.9 6.8 -30.0 10.8 5.1 -32.0 10.8 5.1 -30.0 11.5 3.3 -32.0 11.5 3.3 -30.0 11.9 1.4 -32.0 11.9 1.4 -30.0 12.0 -0.5 -32.0 12.0 -0.5 -30.0 11.8 -2.4 -32.0 11.8 -2.4 -30.0 11.2 -4.3 -32.0 11.2 -4.3 -30.0 10.4 -6.0 -32.0 10.4 -6.0 -30.0 9.3 -7.6 -32.0 9.3 -7.6 -30.0 8.0 -9.0 -32.0 8.0 -9.0 -30.0 6.4 -10.1 -32.0 6.4 -10.1 -30.0 4.7 -11.0 -32.0 4.7 -11.0 -30.0 2.9 -11.7 -32.0 2.9 -11.7 -32.0 1.0 -12.0 -30.0 -4.0 -8.4 -30.0 -4.7 -8.3 -30.0 -5.2 -7.9 -30.0 -5.5 -7.3 -30.0 6.5 -0.3 -30.0 -2.8 7.9 -30.0 6.8 -0.9 -30.0 -2.5 7.3 -30.0 -4.7 5.6 -30.0 -5.5 -6.6 -30.0 -4.0 5.4 -30.0 -5.2 -6.0 -30.0 -5.5 7.3 -30.0 -5.5 6.6 -30.0 -5.2 6.0 -30.0 6.5 0.3 -30.0 6.8 0.9 -30.0 -3.3 8.3 -30.0 -2.5 6.6 -30.0 -2.8 6.0 -30.0 7.3 -1.4 -30.0 8.7 1.4 -30.0 8.0 1.5 -30.0 7.3 1.4 -30.0 -4.0 8.4 -30.0 -4.7 8.3 -30.0 -5.2 7.9 -30.0 -4.7 -5.6 -30.0 -4.0 -5.4 -30.0 -2.0 0.0 -30.0 -3.3 -8.3 -30.0 -2.8 -7.9 -30.0 -2.5 -7.3 -30.0 8.0 -1.5 -30.0 -1.8 0.8 -30.0 -1.4 1.4 -30.0 -3.3 5.6 -30.0 -0.8 1.8 -30.0 0.0 2.0 -30.0 -2.5 -6.6 -30.0 0.0 -2.0 -30.0 -2.8 -6.0 -30.0 -0.8 -1.8 -30.0 -3.3 -5.6 -30.0 -1.4 -1.4 -30.0 -1.8 -0.8 -30.0 8.7 -1.4 -30.0 9.2 -0.9 -30.0 9.5 -0.3 -30.0 9.5 0.3 -30.0 9.2 0.9 -30.0 0.8 1.8 -30.0 1.4 1.4 -30.0 1.8 0.8 -30.0 2.0 0.0 -30.0 1.8 -0.8 -30.0 1.4 -1.4 -30.0 0.8 -1.8 -32.0 -5.5 6.6 -32.0 -4.0 -5.4 -32.0 -4.7 -5.6 -32.0 -2.5 6.6 -32.0 -2.5 7.3 -32.0 -2.8 7.9 -32.0 -3.3 8.3 -32.0 -4.0 8.4 -32.0 -4.7 8.3 -32.0 -5.2 7.9 -32.0 -5.5 7.3 -32.0 -5.2 -6.0 -32.0 -5.5 -6.6 -32.0 -5.5 -7.3 -32.0 -5.2 -7.9 -32.0 -4.7 -8.3 -32.0 -4.0 -8.4 -32.0 -3.3 -8.3 -32.0 -2.5 -7.3 -32.0 -2.5 -6.6 -32.0 -5.2 6.0 -32.0 -4.7 5.6 -32.0 -4.0 5.4 -32.0 -2.8 -7.9 -32.0 8.0 1.5 -32.0 7.3 1.4 -32.0 7.3 -1.4 -32.0 1.4 -1.4 -32.0 6.8 0.9 -32.0 0.8 -1.8 -32.0 6.5 0.3 -32.0 6.5 -0.3 -32.0 1.8 -0.8 -32.0 2.0 0.0 -32.0 1.8 0.8 -32.0 -3.3 5.6 -32.0 -1.4 1.4 -32.0 -0.8 1.8 -32.0 -2.8 6.0 -32.0 0.0 2.0 -32.0 0.8 1.8 -32.0 1.4 1.4 -32.0 8.0 -1.5 -32.0 8.7 -1.4 -32.0 9.2 -0.9 -32.0 9.5 -0.3 -32.0 9.5 0.3 -32.0 9.2 0.9 -32.0 8.7 1.4 -32.0 -1.8 0.8 -32.0 -2.0 0.0 -32.0 -1.8 -0.8 -32.0 -3.3 -5.6 -32.0 -1.4 -1.4 -32.0 -2.8 -6.0 -32.0 -0.8 -1.8 -32.0 -0.0 -2.0 -32.0 6.8 -0.9)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link7"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link8-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link8-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link8_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i
                   (list :vertices (let ((mat (make-matrix 196 3))) (fvector-replace (array-entity mat) #f(-30.0 1.0 -12.0 -30.0 0.0 -12.0 -32.0 0.0 -12.0 -32.0 -1.0 -12.0 -30.0 -1.0 -12.0 -30.0 -2.9 -11.7 -32.0 -2.9 -11.7 -30.0 -4.7 -11.0 -32.0 -4.7 -11.0 -30.0 -6.4 -10.1 -32.0 -6.4 -10.1 -30.0 -8.0 -9.0 -32.0 -8.0 -9.0 -30.0 -9.3 -7.6 -32.0 -9.3 -7.6 -30.0 -10.4 -6.0 -32.0 -10.4 -6.0 -30.0 -11.2 -4.3 -32.0 -11.2 -4.3 -30.0 -11.8 -2.4 -32.0 -11.8 -2.4 -30.0 -12.0 -0.5 -32.0 -12.0 -0.5 -30.0 -11.9 1.4 -32.0 -11.9 1.4 -30.0 -11.5 3.3 -32.0 -11.5 3.3 -30.0 -10.8 5.1 -32.0 -10.8 5.1 -30.0 -9.9 6.8 -32.0 -9.9 6.8 -30.0 -8.7 8.3 -32.0 -8.7 8.3 -30.0 -7.2 9.6 -32.0 -7.2 9.6 -30.0 -5.6 10.6 -32.0 -5.6 10.6 -30.0 -3.8 11.4 -32.0 -3.8 11.4 -30.0 -1.9 11.8 -32.0 -1.9 11.8 -30.0 0.0 12.0 -32.0 0.0 12.0 -30.0 1.9 11.8 -32.0 1.9 11.8 -30.0 3.8 11.4 -32.0 3.8 11.4 -30.0 5.6 10.6 -32.0 5.6 10.6 -30.0 7.2 9.6 -32.0 7.2 9.6 -30.0 8.7 8.3 -32.0 8.7 8.3 -30.0 9.9 6.8 -32.0 9.9 6.8 -30.0 10.8 5.1 -32.0 10.8 5.1 -30.0 11.5 3.3 -32.0 11.5 3.3 -30.0 11.9 1.4 -32.0 11.9 1.4 -30.0 12.0 -0.5 -32.0 12.0 -0.5 -30.0 11.8 -2.4 -32.0 11.8 -2.4 -30.0 11.2 -4.3 -32.0 11.2 -4.3 -30.0 10.4 -6.0 -32.0 10.4 -6.0 -30.0 9.3 -7.6 -32.0 9.3 -7.6 -30.0 8.0 -9.0 -32.0 8.0 -9.0 -30.0 6.4 -10.1 -32.0 6.4 -10.1 -30.0 4.7 -11.0 -32.0 4.7 -11.0 -30.0 2.9 -11.7 -32.0 2.9 -11.7 -32.0 1.0 -12.0 -30.0 -4.0 -8.4 -30.0 -4.7 -8.3 -30.0 -5.2 -7.9 -30.0 -5.5 -7.3 -30.0 6.5 -0.3 -30.0 -2.8 7.9 -30.0 6.8 -0.9 -30.0 -2.5 7.3 -30.0 -4.7 5.6 -30.0 -5.5 -6.6 -30.0 -4.0 5.4 -30.0 -5.2 -6.0 -30.0 -5.5 7.3 -30.0 -5.5 6.6 -30.0 -5.2 6.0 -30.0 6.5 0.3 -30.0 6.8 0.9 -30.0 -3.3 8.3 -30.0 -2.5 6.6 -30.0 -2.8 6.0 -30.0 7.3 -1.4 -30.0 8.7 1.4 -30.0 8.0 1.5 -30.0 7.3 1.4 -30.0 -4.0 8.4 -30.0 -4.7 8.3 -30.0 -5.2 7.9 -30.0 -4.7 -5.6 -30.0 -4.0 -5.4 -30.0 -2.0 0.0 -30.0 -3.3 -8.3 -30.0 -2.8 -7.9 -30.0 -2.5 -7.3 -30.0 8.0 -1.5 -30.0 -1.8 0.8 -30.0 -1.4 1.4 -30.0 -3.3 5.6 -30.0 -0.8 1.8 -30.0 0.0 2.0 -30.0 -2.5 -6.6 -30.0 0.0 -2.0 -30.0 -2.8 -6.0 -30.0 -0.8 -1.8 -30.0 -3.3 -5.6 -30.0 -1.4 -1.4 -30.0 -1.8 -0.8 -30.0 8.7 -1.4 -30.0 9.2 -0.9 -30.0 9.5 -0.3 -30.0 9.5 0.3 -30.0 9.2 0.9 -30.0 0.8 1.8 -30.0 1.4 1.4 -30.0 1.8 0.8 -30.0 2.0 0.0 -30.0 1.8 -0.8 -30.0 1.4 -1.4 -30.0 0.8 -1.8 -32.0 -5.5 6.6 -32.0 -4.0 -5.4 -32.0 -4.7 -5.6 -32.0 -2.5 6.6 -32.0 -2.5 7.3 -32.0 -2.8 7.9 -32.0 -3.3 8.3 -32.0 -4.0 8.4 -32.0 -4.7 8.3 -32.0 -5.2 7.9 -32.0 -5.5 7.3 -32.0 -5.2 -6.0 -32.0 -5.5 -6.6 -32.0 -5.5 -7.3 -32.0 -5.2 -7.9 -32.0 -4.7 -8.3 -32.0 -4.0 -8.4 -32.0 -3.3 -8.3 -32.0 -2.5 -7.3 -32.0 -2.5 -6.6 -32.0 -5.2 6.0 -32.0 -4.7 5.6 -32.0 -4.0 5.4 -32.0 -2.8 -7.9 -32.0 8.0 1.5 -32.0 7.3 1.4 -32.0 7.3 -1.4 -32.0 1.4 -1.4 -32.0 6.8 0.9 -32.0 0.8 -1.8 -32.0 6.5 0.3 -32.0 6.5 -0.3 -32.0 1.8 -0.8 -32.0 2.0 0.0 -32.0 1.8 0.8 -32.0 -3.3 5.6 -32.0 -1.4 1.4 -32.0 -0.8 1.8 -32.0 -2.8 6.0 -32.0 0.0 2.0 -32.0 0.8 1.8 -32.0 1.4 1.4 -32.0 8.0 -1.5 -32.0 8.7 -1.4 -32.0 9.2 -0.9 -32.0 9.5 -0.3 -32.0 9.5 0.3 -32.0 9.2 0.9 -32.0 8.7 1.4 -32.0 -1.8 0.8 -32.0 -2.0 0.0 -32.0 -1.8 -0.8 -32.0 -3.3 -5.6 -32.0 -1.4 -1.4 -32.0 -2.8 -6.0 -32.0 -0.8 -1.8 -32.0 -0.0 -2.0 -32.0 6.8 -0.9)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link8"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link9-virtual_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 0.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link9-virtual"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  (:_make_instance_link9_geom0 ()
    (let (geom glv qhull
          (local-cds (make-coords :pos (float-vector 30.000000 0.000000 0.000000)
                                  :rot (quaternion2matrix (float-vector 1.000000 0.000000 0.000000 0.000000)))))
      (setq glv
       (instance gl::glvertices :init
                 (list ;; mesh list
                  (list ;; mesh description
                   (list :type :triangles)
                   (list :material (list
                    (list :ambient (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))
                    (list :diffuse (float-vector 0.792156862745098 0.8196078431372549 0.9333333333333333 1.0))))
                   (list :indices #i
                   (list :vertices (let ((mat (make-matrix 196 3))) (fvector-replace (array-entity mat) #f(-30.0 1.0 -12.0 -30.0 0.0 -12.0 -32.0 0.0 -12.0 -32.0 -1.0 -12.0 -30.0 -1.0 -12.0 -30.0 -2.9 -11.7 -32.0 -2.9 -11.7 -30.0 -4.7 -11.0 -32.0 -4.7 -11.0 -30.0 -6.4 -10.1 -32.0 -6.4 -10.1 -30.0 -8.0 -9.0 -32.0 -8.0 -9.0 -30.0 -9.3 -7.6 -32.0 -9.3 -7.6 -30.0 -10.4 -6.0 -32.0 -10.4 -6.0 -30.0 -11.2 -4.3 -32.0 -11.2 -4.3 -30.0 -11.8 -2.4 -32.0 -11.8 -2.4 -30.0 -12.0 -0.5 -32.0 -12.0 -0.5 -30.0 -11.9 1.4 -32.0 -11.9 1.4 -30.0 -11.5 3.3 -32.0 -11.5 3.3 -30.0 -10.8 5.1 -32.0 -10.8 5.1 -30.0 -9.9 6.8 -32.0 -9.9 6.8 -30.0 -8.7 8.3 -32.0 -8.7 8.3 -30.0 -7.2 9.6 -32.0 -7.2 9.6 -30.0 -5.6 10.6 -32.0 -5.6 10.6 -30.0 -3.8 11.4 -32.0 -3.8 11.4 -30.0 -1.9 11.8 -32.0 -1.9 11.8 -30.0 0.0 12.0 -32.0 0.0 12.0 -30.0 1.9 11.8 -32.0 1.9 11.8 -30.0 3.8 11.4 -32.0 3.8 11.4 -30.0 5.6 10.6 -32.0 5.6 10.6 -30.0 7.2 9.6 -32.0 7.2 9.6 -30.0 8.7 8.3 -32.0 8.7 8.3 -30.0 9.9 6.8 -32.0 9.9 6.8 -30.0 10.8 5.1 -32.0 10.8 5.1 -30.0 11.5 3.3 -32.0 11.5 3.3 -30.0 11.9 1.4 -32.0 11.9 1.4 -30.0 12.0 -0.5 -32.0 12.0 -0.5 -30.0 11.8 -2.4 -32.0 11.8 -2.4 -30.0 11.2 -4.3 -32.0 11.2 -4.3 -30.0 10.4 -6.0 -32.0 10.4 -6.0 -30.0 9.3 -7.6 -32.0 9.3 -7.6 -30.0 8.0 -9.0 -32.0 8.0 -9.0 -30.0 6.4 -10.1 -32.0 6.4 -10.1 -30.0 4.7 -11.0 -32.0 4.7 -11.0 -30.0 2.9 -11.7 -32.0 2.9 -11.7 -32.0 1.0 -12.0 -30.0 -4.0 -8.4 -30.0 -4.7 -8.3 -30.0 -5.2 -7.9 -30.0 -5.5 -7.3 -30.0 6.5 -0.3 -30.0 -2.8 7.9 -30.0 6.8 -0.9 -30.0 -2.5 7.3 -30.0 -4.7 5.6 -30.0 -5.5 -6.6 -30.0 -4.0 5.4 -30.0 -5.2 -6.0 -30.0 -5.5 7.3 -30.0 -5.5 6.6 -30.0 -5.2 6.0 -30.0 6.5 0.3 -30.0 6.8 0.9 -30.0 -3.3 8.3 -30.0 -2.5 6.6 -30.0 -2.8 6.0 -30.0 7.3 -1.4 -30.0 8.7 1.4 -30.0 8.0 1.5 -30.0 7.3 1.4 -30.0 -4.0 8.4 -30.0 -4.7 8.3 -30.0 -5.2 7.9 -30.0 -4.7 -5.6 -30.0 -4.0 -5.4 -30.0 -2.0 0.0 -30.0 -3.3 -8.3 -30.0 -2.8 -7.9 -30.0 -2.5 -7.3 -30.0 8.0 -1.5 -30.0 -1.8 0.8 -30.0 -1.4 1.4 -30.0 -3.3 5.6 -30.0 -0.8 1.8 -30.0 0.0 2.0 -30.0 -2.5 -6.6 -30.0 0.0 -2.0 -30.0 -2.8 -6.0 -30.0 -0.8 -1.8 -30.0 -3.3 -5.6 -30.0 -1.4 -1.4 -30.0 -1.8 -0.8 -30.0 8.7 -1.4 -30.0 9.2 -0.9 -30.0 9.5 -0.3 -30.0 9.5 0.3 -30.0 9.2 0.9 -30.0 0.8 1.8 -30.0 1.4 1.4 -30.0 1.8 0.8 -30.0 2.0 0.0 -30.0 1.8 -0.8 -30.0 1.4 -1.4 -30.0 0.8 -1.8 -32.0 -5.5 6.6 -32.0 -4.0 -5.4 -32.0 -4.7 -5.6 -32.0 -2.5 6.6 -32.0 -2.5 7.3 -32.0 -2.8 7.9 -32.0 -3.3 8.3 -32.0 -4.0 8.4 -32.0 -4.7 8.3 -32.0 -5.2 7.9 -32.0 -5.5 7.3 -32.0 -5.2 -6.0 -32.0 -5.5 -6.6 -32.0 -5.5 -7.3 -32.0 -5.2 -7.9 -32.0 -4.7 -8.3 -32.0 -4.0 -8.4 -32.0 -3.3 -8.3 -32.0 -2.5 -7.3 -32.0 -2.5 -6.6 -32.0 -5.2 6.0 -32.0 -4.7 5.6 -32.0 -4.0 5.4 -32.0 -2.8 -7.9 -32.0 8.0 1.5 -32.0 7.3 1.4 -32.0 7.3 -1.4 -32.0 1.4 -1.4 -32.0 6.8 0.9 -32.0 0.8 -1.8 -32.0 6.5 0.3 -32.0 6.5 -0.3 -32.0 1.8 -0.8 -32.0 2.0 0.0 -32.0 1.8 0.8 -32.0 -3.3 5.6 -32.0 -1.4 1.4 -32.0 -0.8 1.8 -32.0 -2.8 6.0 -32.0 0.0 2.0 -32.0 0.8 1.8 -32.0 1.4 1.4 -32.0 8.0 -1.5 -32.0 8.7 -1.4 -32.0 9.2 -0.9 -32.0 9.5 -0.3 -32.0 9.5 0.3 -32.0 9.2 0.9 -32.0 8.7 1.4 -32.0 -1.8 0.8 -32.0 -2.0 0.0 -32.0 -1.8 -0.8 -32.0 -3.3 -5.6 -32.0 -1.4 -1.4 -32.0 -2.8 -6.0 -32.0 -0.8 -1.8 -32.0 -0.0 -2.0 -32.0 6.8 -0.9)) mat))))))
      (send glv :transform local-cds)
      (send glv :calc-normals)
      (setq geom (instance collada-body :init :replace-obj nil :name "link9"))
      (when glv
        (setq (geom . gl::aglvertices) glv)
        (send geom :assoc glv))
      geom))
  )

(provide :tail "(eri-Yoga-Slim Linux-6.8.0-52-generic-x86_64-with-glibc2.29) at 2025-03-03 08:46:17")
